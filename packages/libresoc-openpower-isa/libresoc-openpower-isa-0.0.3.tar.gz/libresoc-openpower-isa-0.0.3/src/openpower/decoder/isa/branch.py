# auto-generated by pywriter.py, do not edit or commit

from openpower.decoder.isa.caller import inject, instruction_info
from openpower.decoder.helpers import (EXTS, EXTS64, EXTZ64, ROTL64, ROTL32,
                                 MASK, MASK32,
                                 ne, eq, gt, ge, lt, le, ltu, gtu, length,
                                 trunc_divs, trunc_rems, MULS, DIVS, MODS,
                                 EXTS128, undefined,
                                 DOUBLE, SINGLE)
from openpower.decoder.selectable_int import SelectableInt
from openpower.decoder.selectable_int import selectconcat as concat
from openpower.decoder.orderedset import OrderedSet

class branch:

    @inject()
    def op_b(self, LR):
        global NIA
        if AA:
            NIA = EXTS(concat(LI, SelectableInt(value=0x0, bits=2)))
        else:
            NIA = CIA + EXTS(concat(LI, SelectableInt(value=0x0, bits=2)))
        if LK:
            LR = CIA + 4
        return (LR,)

    @inject()
    def op_ba(self, LR):
        global NIA
        if AA:
            NIA = EXTS(concat(LI, SelectableInt(value=0x0, bits=2)))
        else:
            NIA = CIA + EXTS(concat(LI, SelectableInt(value=0x0, bits=2)))
        if LK:
            LR = CIA + 4
        return (LR,)

    @inject()
    def op_bl(self, LR):
        global NIA
        if AA:
            NIA = EXTS(concat(LI, SelectableInt(value=0x0, bits=2)))
        else:
            NIA = CIA + EXTS(concat(LI, SelectableInt(value=0x0, bits=2)))
        if LK:
            LR = CIA + 4
        return (LR,)

    @inject()
    def op_bla(self, LR):
        global NIA
        if AA:
            NIA = EXTS(concat(LI, SelectableInt(value=0x0, bits=2)))
        else:
            NIA = CIA + EXTS(concat(LI, SelectableInt(value=0x0, bits=2)))
        if LK:
            LR = CIA + 4
        return (LR,)

    @inject()
    def op_bc(self, CTR, CR, LR):
        global NIA
        if mode_is_64bit:
            M = 0
        else:
            M = 32
        if ~BO[2]:
            CTR = CTR - 1
        ctr_ok = BO[2] | ne(CTR[M:64], 0) ^ BO[3]
        cond_ok = BO[0] | ~(CR[BI + 32] ^ BO[1])
        if ctr_ok & cond_ok:
            if AA:
                NIA = EXTS(concat(BD, SelectableInt(value=0x0, bits=2)))
            else:
                NIA = CIA + EXTS(concat(BD, SelectableInt(value=0x0, bits=2)))
        if LK:
            LR = CIA + 4
        return (CTR, CR, LR,)

    @inject()
    def op_bca(self, CTR, CR, LR):
        global NIA
        if mode_is_64bit:
            M = 0
        else:
            M = 32
        if ~BO[2]:
            CTR = CTR - 1
        ctr_ok = BO[2] | ne(CTR[M:64], 0) ^ BO[3]
        cond_ok = BO[0] | ~(CR[BI + 32] ^ BO[1])
        if ctr_ok & cond_ok:
            if AA:
                NIA = EXTS(concat(BD, SelectableInt(value=0x0, bits=2)))
            else:
                NIA = CIA + EXTS(concat(BD, SelectableInt(value=0x0, bits=2)))
        if LK:
            LR = CIA + 4
        return (CTR, CR, LR,)

    @inject()
    def op_bcl(self, CTR, CR, LR):
        global NIA
        if mode_is_64bit:
            M = 0
        else:
            M = 32
        if ~BO[2]:
            CTR = CTR - 1
        ctr_ok = BO[2] | ne(CTR[M:64], 0) ^ BO[3]
        cond_ok = BO[0] | ~(CR[BI + 32] ^ BO[1])
        if ctr_ok & cond_ok:
            if AA:
                NIA = EXTS(concat(BD, SelectableInt(value=0x0, bits=2)))
            else:
                NIA = CIA + EXTS(concat(BD, SelectableInt(value=0x0, bits=2)))
        if LK:
            LR = CIA + 4
        return (CTR, CR, LR,)

    @inject()
    def op_bcla(self, CTR, CR, LR):
        global NIA
        if mode_is_64bit:
            M = 0
        else:
            M = 32
        if ~BO[2]:
            CTR = CTR - 1
        ctr_ok = BO[2] | ne(CTR[M:64], 0) ^ BO[3]
        cond_ok = BO[0] | ~(CR[BI + 32] ^ BO[1])
        if ctr_ok & cond_ok:
            if AA:
                NIA = EXTS(concat(BD, SelectableInt(value=0x0, bits=2)))
            else:
                NIA = CIA + EXTS(concat(BD, SelectableInt(value=0x0, bits=2)))
        if LK:
            LR = CIA + 4
        return (CTR, CR, LR,)

    @inject()
    def op_bclr(self, CTR, CR, LR):
        global NIA
        if mode_is_64bit:
            M = 0
        else:
            M = 32
        if ~BO[2]:
            CTR = CTR - 1
        ctr_ok = BO[2] | ne(CTR[M:64], 0) ^ BO[3]
        cond_ok = BO[0] | ~(CR[BI + 32] ^ BO[1])
        if ctr_ok & cond_ok:
            NIA = concat(LR[0:62], SelectableInt(value=0x0, bits=2))
        if LK:
            LR = CIA + 4
        return (CTR, CR, LR,)

    @inject()
    def op_bclrl(self, CTR, CR, LR):
        global NIA
        if mode_is_64bit:
            M = 0
        else:
            M = 32
        if ~BO[2]:
            CTR = CTR - 1
        ctr_ok = BO[2] | ne(CTR[M:64], 0) ^ BO[3]
        cond_ok = BO[0] | ~(CR[BI + 32] ^ BO[1])
        if ctr_ok & cond_ok:
            NIA = concat(LR[0:62], SelectableInt(value=0x0, bits=2))
        if LK:
            LR = CIA + 4
        return (CTR, CR, LR,)

    @inject()
    def op_bcctr(self, CR, CTR, LR):
        global NIA
        cond_ok = BO[0] | ~(CR[BI + 32] ^ BO[1])
        if cond_ok:
            NIA = concat(CTR[0:62], SelectableInt(value=0x0, bits=2))
        if LK:
            LR = CIA + 4
        return (CR, CTR, LR,)

    @inject()
    def op_bcctrl(self, CR, CTR, LR):
        global NIA
        cond_ok = BO[0] | ~(CR[BI + 32] ^ BO[1])
        if cond_ok:
            NIA = concat(CTR[0:62], SelectableInt(value=0x0, bits=2))
        if LK:
            LR = CIA + 4
        return (CR, CTR, LR,)

    @inject()
    def op_bctar(self, CTR, CR, TAR, LR):
        global NIA
        if mode_is_64bit:
            M = 0
        else:
            M = 32
        if ~BO[2]:
            CTR = CTR - 1
        ctr_ok = BO[2] | ne(CTR[M:64], 0) ^ BO[3]
        cond_ok = BO[0] | ~(CR[BI + 32] ^ BO[1])
        if ctr_ok & cond_ok:
            NIA = concat(TAR[0:62], SelectableInt(value=0x0, bits=2))
        if LK:
            LR = CIA + 4
        return (CTR, CR, TAR, LR,)

    @inject()
    def op_bctarl(self, CTR, CR, TAR, LR):
        global NIA
        if mode_is_64bit:
            M = 0
        else:
            M = 32
        if ~BO[2]:
            CTR = CTR - 1
        ctr_ok = BO[2] | ne(CTR[M:64], 0) ^ BO[3]
        cond_ok = BO[0] | ~(CR[BI + 32] ^ BO[1])
        if ctr_ok & cond_ok:
            NIA = concat(TAR[0:62], SelectableInt(value=0x0, bits=2))
        if LK:
            LR = CIA + 4
        return (CTR, CR, TAR, LR,)

    branch_instrs = {}
    branch_instrs['b'] = instruction_info(func=op_b,
                read_regs=OrderedSet(),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['LR']),
                special_regs=OrderedSet(['LR']), op_fields=OrderedSet(['AA', 'LI', 'LK']),
                form='I',
                asmregs=[['target_addr'], '(AA=0', 'LK=0)'])
    branch_instrs['ba'] = instruction_info(func=op_ba,
                read_regs=OrderedSet(),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['LR']),
                special_regs=OrderedSet(['LR']), op_fields=OrderedSet(['AA', 'LI', 'LK']),
                form='I',
                asmregs=[['target_addr'], '(AA=1', 'LK=0)'])
    branch_instrs['bl'] = instruction_info(func=op_bl,
                read_regs=OrderedSet(),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['LR']),
                special_regs=OrderedSet(['LR']), op_fields=OrderedSet(['AA', 'LI', 'LK']),
                form='I',
                asmregs=[['target_addr'], '(AA=0', 'LK=1)'])
    branch_instrs['bla'] = instruction_info(func=op_bla,
                read_regs=OrderedSet(),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['LR']),
                special_regs=OrderedSet(['LR']), op_fields=OrderedSet(['AA', 'LI', 'LK']),
                form='I',
                asmregs=[['target_addr'], '(AA=1', 'LK=1)'])
    branch_instrs['bc'] = instruction_info(func=op_bc,
                read_regs=OrderedSet(),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['CTR', 'CR', 'LR']),
                special_regs=OrderedSet(['CTR', 'CR', 'LR']), op_fields=OrderedSet(['BO', 'BI', 'AA', 'BD', 'LK']),
                form='B',
                asmregs=[['BO', 'BI', 'target_addr'], '(AA=0', 'LK=0)'])
    branch_instrs['bca'] = instruction_info(func=op_bca,
                read_regs=OrderedSet(),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['CTR', 'CR', 'LR']),
                special_regs=OrderedSet(['CTR', 'CR', 'LR']), op_fields=OrderedSet(['BO', 'BI', 'AA', 'BD', 'LK']),
                form='B',
                asmregs=[['BO', 'BI', 'target_addr'], '(AA=1', 'LK=0)'])
    branch_instrs['bcl'] = instruction_info(func=op_bcl,
                read_regs=OrderedSet(),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['CTR', 'CR', 'LR']),
                special_regs=OrderedSet(['CTR', 'CR', 'LR']), op_fields=OrderedSet(['BO', 'BI', 'AA', 'BD', 'LK']),
                form='B',
                asmregs=[['BO', 'BI', 'target_addr'], '(AA=0', 'LK=1)'])
    branch_instrs['bcla'] = instruction_info(func=op_bcla,
                read_regs=OrderedSet(),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['CTR', 'CR', 'LR']),
                special_regs=OrderedSet(['CTR', 'CR', 'LR']), op_fields=OrderedSet(['BO', 'BI', 'AA', 'BD', 'LK']),
                form='B',
                asmregs=[['BO', 'BI', 'target_addr'], '(AA=1', 'LK=1)'])
    branch_instrs['bclr'] = instruction_info(func=op_bclr,
                read_regs=OrderedSet(),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['CTR', 'CR', 'LR']),
                special_regs=OrderedSet(['CTR', 'CR', 'LR']), op_fields=OrderedSet(['BO', 'BI', 'LK']),
                form='XL',
                asmregs=[['BO', 'BI', 'BH'], '(LK=0)'])
    branch_instrs['bclrl'] = instruction_info(func=op_bclrl,
                read_regs=OrderedSet(),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['CTR', 'CR', 'LR']),
                special_regs=OrderedSet(['CTR', 'CR', 'LR']), op_fields=OrderedSet(['BO', 'BI', 'LK']),
                form='XL',
                asmregs=[['BO', 'BI', 'BH'], '(LK=1)'])
    branch_instrs['bcctr'] = instruction_info(func=op_bcctr,
                read_regs=OrderedSet(),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['CR', 'CTR', 'LR']),
                special_regs=OrderedSet(['CR', 'CTR', 'LR']), op_fields=OrderedSet(['BO', 'BI', 'LK']),
                form='XL',
                asmregs=[['BO', 'BI', 'BH'], '(LK=0)'])
    branch_instrs['bcctrl'] = instruction_info(func=op_bcctrl,
                read_regs=OrderedSet(),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['CR', 'CTR', 'LR']),
                special_regs=OrderedSet(['CR', 'CTR', 'LR']), op_fields=OrderedSet(['BO', 'BI', 'LK']),
                form='XL',
                asmregs=[['BO', 'BI', 'BH'], '(LK=1)'])
    branch_instrs['bctar'] = instruction_info(func=op_bctar,
                read_regs=OrderedSet(),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['CTR', 'CR', 'TAR', 'LR']),
                special_regs=OrderedSet(['CTR', 'CR', 'TAR', 'LR']), op_fields=OrderedSet(['BO', 'BI', 'LK']),
                form='XL',
                asmregs=[['BO', 'BI', 'BH'], '(LK=0)'])
    branch_instrs['bctarl'] = instruction_info(func=op_bctarl,
                read_regs=OrderedSet(),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['CTR', 'CR', 'TAR', 'LR']),
                special_regs=OrderedSet(['CTR', 'CR', 'TAR', 'LR']), op_fields=OrderedSet(['BO', 'BI', 'LK']),
                form='XL',
                asmregs=[['BO', 'BI', 'BH'], '(LK=1)'])
