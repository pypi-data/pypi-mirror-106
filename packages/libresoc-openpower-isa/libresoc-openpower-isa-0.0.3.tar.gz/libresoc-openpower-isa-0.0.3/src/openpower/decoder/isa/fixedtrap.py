# auto-generated by pywriter.py, do not edit or commit

from openpower.decoder.isa.caller import inject, instruction_info
from openpower.decoder.helpers import (EXTS, EXTS64, EXTZ64, ROTL64, ROTL32,
                                 MASK, MASK32,
                                 ne, eq, gt, ge, lt, le, ltu, gtu, length,
                                 trunc_divs, trunc_rems, MULS, DIVS, MODS,
                                 EXTS128, undefined,
                                 DOUBLE, SINGLE)
from openpower.decoder.selectable_int import SelectableInt
from openpower.decoder.selectable_int import selectconcat as concat
from openpower.decoder.orderedset import OrderedSet

class fixedtrap:

    @inject()
    def op_twi(self, RA):
        a = EXTS(RA[32:64])
        if lt(a, EXTS(SI)) & TO[0]:self.TRAP()
        if gt(a, EXTS(SI)) & TO[1]:self.TRAP()
        if eq(a, EXTS(SI)) & TO[2]:self.TRAP()
        if ltu(a, EXTS(SI)) & TO[3]:self.TRAP()
        if gtu(a, EXTS(SI)) & TO[4]:self.TRAP()

    @inject()
    def op_tw(self, RA, RB):
        a = EXTS(RA[32:64])
        b = EXTS(RB[32:64])
        if lt(a, b) & TO[0]:self.TRAP()
        if gt(a, b) & TO[1]:self.TRAP()
        if eq(a, b) & TO[2]:self.TRAP()
        if ltu(a, b) & TO[3]:self.TRAP()
        if gtu(a, b) & TO[4]:self.TRAP()

    @inject()
    def op_tdi(self, RA):
        a = RA
        b = EXTS(SI)
        if lt(a, b) & TO[0]:self.TRAP()
        if gt(a, b) & TO[1]:self.TRAP()
        if eq(a, b) & TO[2]:self.TRAP()
        if ltu(a, b) & TO[3]:self.TRAP()
        if gtu(a, b) & TO[4]:self.TRAP()

    @inject()
    def op_td(self, RA, RB):
        a = RA
        b = RB
        if lt(a, b) & TO[0]:self.TRAP()
        if gt(a, b) & TO[1]:self.TRAP()
        if eq(a, b) & TO[2]:self.TRAP()
        if ltu(a, b) & TO[3]:self.TRAP()
        if gtu(a, b) & TO[4]:self.TRAP()

    @inject()
    def op_isel(self, RA, RB, CR):
        if eq(CR[BC + 32], 1):
            RT = GPR.getz(_RA)
        else:
            RT = RB
        return (CR, RT,)

    fixedtrap_instrs = {}
    fixedtrap_instrs['twi'] = instruction_info(func=op_twi,
                read_regs=OrderedSet(['RA']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(),
                special_regs=OrderedSet(), op_fields=OrderedSet(['SI', 'TO']),
                form='D',
                asmregs=[['TO', 'RA', 'SI']])
    fixedtrap_instrs['tw'] = instruction_info(func=op_tw,
                read_regs=OrderedSet(['RA', 'RB']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(),
                special_regs=OrderedSet(), op_fields=OrderedSet(['TO']),
                form='X',
                asmregs=[['TO', 'RA', 'RB']])
    fixedtrap_instrs['tdi'] = instruction_info(func=op_tdi,
                read_regs=OrderedSet(['RA']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(),
                special_regs=OrderedSet(), op_fields=OrderedSet(['SI', 'TO']),
                form='D',
                asmregs=[['TO', 'RA', 'SI']])
    fixedtrap_instrs['td'] = instruction_info(func=op_td,
                read_regs=OrderedSet(['RA', 'RB']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(),
                special_regs=OrderedSet(), op_fields=OrderedSet(['TO']),
                form='X',
                asmregs=[['TO', 'RA', 'RB']])
    fixedtrap_instrs['isel'] = instruction_info(func=op_isel,
                read_regs=OrderedSet(['RA', 'RB']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['CR', 'RT']),
                special_regs=OrderedSet(['CR']), op_fields=OrderedSet(['BC']),
                form='A',
                asmregs=[['RT', 'RA', 'RB', 'BC']])
