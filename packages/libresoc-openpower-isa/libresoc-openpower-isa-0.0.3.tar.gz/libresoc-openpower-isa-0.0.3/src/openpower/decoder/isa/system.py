# auto-generated by pywriter.py, do not edit or commit

from openpower.decoder.isa.caller import inject, instruction_info
from openpower.decoder.helpers import (EXTS, EXTS64, EXTZ64, ROTL64, ROTL32,
                                 MASK, MASK32,
                                 ne, eq, gt, ge, lt, le, ltu, gtu, length,
                                 trunc_divs, trunc_rems, MULS, DIVS, MODS,
                                 EXTS128, undefined,
                                 DOUBLE, SINGLE)
from openpower.decoder.selectable_int import SelectableInt
from openpower.decoder.selectable_int import selectconcat as concat
from openpower.decoder.orderedset import OrderedSet

class system:

    @inject()
    def op_sc(self, MSR):
        global NIA
        SRR0 = CIA + 4
        SRR1 = concat(0, repeat=4)
        SRR1[33:37] = 0
        SRR1[42:48] = 0
        SRR1[0:33] = MSR[0:33]
        SRR1[37:42] = MSR[37:42]
        SRR1[48:64] = MSR[48:64]
        MSR = new_value
        NIA = SelectableInt(value=0xc00, bits=64)
        return (MSR,)

    @inject()
    def op_scv(self, LR, MSR):
        global NIA
        LR = CIA + 4
        SRR1 = concat(0, repeat=4)
        SRR1[33:37] = undefined(concat(0, repeat=4))
        SRR1[42:48] = undefined(concat(0, repeat=6))
        SRR1[0:33] = MSR[0:33]
        SRR1[37:42] = MSR[37:42]
        SRR1[48:64] = MSR[48:64]
        MSR = new_value
        NIA = vectored
        return (LR, MSR,)

    @inject()
    def op_rfscv(self, MSR, CTR, LR):
        global NIA
        if ne(MSR[29:32], SelectableInt(value=0x2, bits=3)) | ne(CTR[29:32],
            SelectableInt(value=0x0, bits=3)):
            MSR[29:32] = CTR[29:32]
        MSR[48] = CTR[49]
        MSR[58] = CTR[49]
        MSR[59] = CTR[49]
        MSR[0:3] = CTR[0:3]
        MSR[4:29] = CTR[4:29]
        MSR[32] = CTR[32]
        MSR[37:42] = CTR[37:42]
        MSR[49:51] = CTR[49:51]
        MSR[52:58] = CTR[52:58]
        MSR[60:64] = CTR[60:64]
        NIA = concat(LR[0:62], SelectableInt(value=0x0, bits=2))
        return (MSR, CTR, LR,)

    @inject()
    def op_rfid(self, MSR):
        global NIA
        MSR[51] = MSR[3] & SRR1[51] | ~MSR[3] & MSR[51]
        MSR[3] = MSR[3] & SRR1[3]
        if ne(MSR[29:32], SelectableInt(value=0x2, bits=3)) | ne(SRR1[29:32],
            SelectableInt(value=0x0, bits=3)):
            MSR[29:32] = SRR1[29:32]
        MSR[48] = SRR1[48] | SRR1[49]
        MSR[58] = SRR1[58] | SRR1[49]
        MSR[59] = SRR1[59] | SRR1[49]
        MSR[0:3] = SRR1[0:3]
        MSR[4:29] = SRR1[4:29]
        MSR[32] = SRR1[32]
        MSR[37:42] = SRR1[37:42]
        MSR[49:51] = SRR1[49:51]
        MSR[52:58] = SRR1[52:58]
        MSR[60:64] = SRR1[60:64]
        NIA = concat(SRR0[0:62], SelectableInt(value=0x0, bits=2))
        return (MSR,)

    @inject()
    def op_hrfid(self, MSR):
        global NIA
        if ne(MSR[29:32], SelectableInt(value=0x2, bits=3)) | ne(HSRR1[29:32],
            SelectableInt(value=0x0, bits=3)):
            MSR[29:32] = HSRR1[29:32]
        MSR[48] = HSRR1[48] | HSRR1[49]
        MSR[58] = HSRR1[58] | HSRR1[49]
        MSR[59] = HSRR1[59] | HSRR1[49]
        MSR[0:29] = HSRR1[0:29]
        MSR[32] = HSRR1[32]
        MSR[37:42] = HSRR1[37:42]
        MSR[49:58] = HSRR1[49:58]
        MSR[60:64] = HSRR1[60:64]
        NIA = concat(HSRR0[0:62], SelectableInt(value=0x0, bits=2))
        return (MSR,)

    system_instrs = {}
    system_instrs['sc'] = instruction_info(func=op_sc,
                read_regs=OrderedSet(),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['MSR']),
                special_regs=OrderedSet(['MSR']), op_fields=OrderedSet(),
                form='SC',
                asmregs=[['LEV']])
    system_instrs['scv'] = instruction_info(func=op_scv,
                read_regs=OrderedSet(),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['LR', 'MSR']),
                special_regs=OrderedSet(['LR', 'MSR']), op_fields=OrderedSet(),
                form='SC',
                asmregs=[['LEV']])
    system_instrs['rfscv'] = instruction_info(func=op_rfscv,
                read_regs=OrderedSet(),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['MSR', 'CTR', 'LR']),
                special_regs=OrderedSet(['MSR', 'CTR', 'LR']), op_fields=OrderedSet(),
                form='XL',
                asmregs=[])
    system_instrs['rfid'] = instruction_info(func=op_rfid,
                read_regs=OrderedSet(),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['MSR']),
                special_regs=OrderedSet(['MSR']), op_fields=OrderedSet(),
                form='XL',
                asmregs=[])
    system_instrs['hrfid'] = instruction_info(func=op_hrfid,
                read_regs=OrderedSet(),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['MSR']),
                special_regs=OrderedSet(['MSR']), op_fields=OrderedSet(),
                form='XL',
                asmregs=[])
