# auto-generated by pywriter.py, do not edit or commit

from openpower.decoder.isa.caller import inject, instruction_info
from openpower.decoder.helpers import (EXTS, EXTS64, EXTZ64, ROTL64, ROTL32,
                                 MASK, MASK32,
                                 ne, eq, gt, ge, lt, le, ltu, gtu, length,
                                 trunc_divs, trunc_rems, MULS, DIVS, MODS,
                                 EXTS128, undefined,
                                 DOUBLE, SINGLE)
from openpower.decoder.selectable_int import SelectableInt
from openpower.decoder.selectable_int import selectconcat as concat
from openpower.decoder.orderedset import OrderedSet

class stringldst:

    @inject()
    def op_lswi(self, RA):
        EA = GPR.getz(_RA)
        if eq(NB, 0):
            n = 32
        else:
            n = NB
        r = RT - 1
        i = 32
        while gt(n, 0):
            if eq(i, 32):
                r = (r + 1) % 32
                GPR[r] = 0
            GPR(r)[i:i + 7 + 1] = MEM(EA, 1)
            i = i + 8
            if eq(i, 64):
                i = 32
            EA = EA + 1
            n = n - 1

    @inject()
    def op_lswx(self, RA, RB):
        b = GPR.getz(_RA)
        EA = b + RB
        n = XER[57:64]
        r = RT - 1
        i = 32
        RT = undefined(concat(0, repeat=64))
        while gt(n, 0):
            if eq(i, 32):
                r = (r + 1) % 32
                GPR[r] = 0
            GPR(r)[i:i + 7 + 1] = MEM(EA, 1)
            i = i + 8
            if eq(i, 64):
                i = 32
            EA = EA + 1
            n = n - 1
        return (RT,)

    @inject()
    def op_stswi(self, RA):
        EA = GPR.getz(_RA)
        if eq(NB, 0):
            n = 32
        else:
            n = NB
        r = RS - 1
        i = 32
        while gt(n, 0):
            if eq(i, 32):
                r = (r + 1) % 32
            memassign(EA, 1, GPR(r)[i:i + 7 + 1])
            i = i + 8
            if eq(i, 64):
                i = 32
            EA = EA + 1
            n = n - 1

    @inject()
    def op_stswx(self, RA, RB):
        b = GPR.getz(_RA)
        EA = b + RB
        n = XER[57:64]
        r = RS - 1
        i = 32
        while gt(n, 0):
            if eq(i, 32):
                r = (r + 1) % 32
            memassign(EA, 1, GPR(r)[i:i + 7 + 1])
            i = i + 8
            if eq(i, 64):
                i = 32
            EA = EA + 1
            n = n - 1

    stringldst_instrs = {}
    stringldst_instrs['lswi'] = instruction_info(func=op_lswi,
                read_regs=OrderedSet(['RA']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(),
                special_regs=OrderedSet(), op_fields=OrderedSet(['NB']),
                form='X',
                asmregs=[['RT', 'RA', 'NB']])
    stringldst_instrs['lswx'] = instruction_info(func=op_lswx,
                read_regs=OrderedSet(['RA', 'RB']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RT']),
                special_regs=OrderedSet(), op_fields=OrderedSet(),
                form='X',
                asmregs=[['RT', 'RA', 'RB']])
    stringldst_instrs['stswi'] = instruction_info(func=op_stswi,
                read_regs=OrderedSet(['RA']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(),
                special_regs=OrderedSet(), op_fields=OrderedSet(['NB']),
                form='X',
                asmregs=[['RS', 'RA', 'NB']])
    stringldst_instrs['stswx'] = instruction_info(func=op_stswx,
                read_regs=OrderedSet(['RA', 'RB']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(),
                special_regs=OrderedSet(), op_fields=OrderedSet(),
                form='X',
                asmregs=[['RS', 'RA', 'RB']])
