# auto-generated by pywriter.py, do not edit or commit

from openpower.decoder.isa.caller import inject, instruction_info
from openpower.decoder.helpers import (EXTS, EXTS64, EXTZ64, ROTL64, ROTL32,
                                 MASK, MASK32,
                                 ne, eq, gt, ge, lt, le, ltu, gtu, length,
                                 trunc_divs, trunc_rems, MULS, DIVS, MODS,
                                 EXTS128, undefined,
                                 DOUBLE, SINGLE)
from openpower.decoder.selectable_int import SelectableInt
from openpower.decoder.selectable_int import selectconcat as concat
from openpower.decoder.orderedset import OrderedSet

class fixedshift:

    @inject()
    def op_rlwinm(self, RS):
        n = SH
        r = ROTL32(RS[32:64], n)
        m = MASK32(MB, ME)
        RA = r & m
        return (RA,)

    @inject()
    def op_rlwinm_(self, RS):
        n = SH
        r = ROTL32(RS[32:64], n)
        m = MASK32(MB, ME)
        RA = r & m
        return (RA,)

    @inject()
    def op_rlwnm(self, RB, RS):
        n = RB[59:64]
        r = ROTL32(RS[32:64], n)
        m = MASK32(MB, ME)
        RA = r & m
        return (RA,)

    @inject()
    def op_rlwnm_(self, RB, RS):
        n = RB[59:64]
        r = ROTL32(RS[32:64], n)
        m = MASK32(MB, ME)
        RA = r & m
        return (RA,)

    @inject()
    def op_rlwimi(self, RS, RA):
        n = SH
        r = ROTL32(RS[32:64], n)
        m = MASK32(MB, ME)
        RA = r & m | RA & ~m
        return (RA,)

    @inject()
    def op_rlwimi_(self, RS, RA):
        n = SH
        r = ROTL32(RS[32:64], n)
        m = MASK32(MB, ME)
        RA = r & m | RA & ~m
        return (RA,)

    @inject()
    def op_rldicl(self, RS):
        n = sh
        r = ROTL64(RS, n)
        b = concat(mb[5], mb[0:5])
        m = MASK(b, 63)
        RA = r & m
        return (RA,)

    @inject()
    def op_rldicl_(self, RS):
        n = sh
        r = ROTL64(RS, n)
        b = concat(mb[5], mb[0:5])
        m = MASK(b, 63)
        RA = r & m
        return (RA,)

    @inject()
    def op_rldicr(self, RS):
        n = sh
        r = ROTL64(RS, n)
        e = concat(me[5], me[0:5])
        m = MASK(0, e)
        RA = r & m
        return (RA,)

    @inject()
    def op_rldicr_(self, RS):
        n = sh
        r = ROTL64(RS, n)
        e = concat(me[5], me[0:5])
        m = MASK(0, e)
        RA = r & m
        return (RA,)

    @inject()
    def op_rldic(self, RS):
        n = sh
        r = ROTL64(RS, n)
        b = concat(mb[5], mb[0:5])
        m = MASK(b, ~n)
        RA = r & m
        return (RA,)

    @inject()
    def op_rldic_(self, RS):
        n = sh
        r = ROTL64(RS, n)
        b = concat(mb[5], mb[0:5])
        m = MASK(b, ~n)
        RA = r & m
        return (RA,)

    @inject()
    def op_rldcl(self, RB, RS):
        n = RB[58:64]
        r = ROTL64(RS, n)
        b = concat(mb[5], mb[0:5])
        m = MASK(b, 63)
        RA = r & m
        return (RA,)

    @inject()
    def op_rldcl_(self, RB, RS):
        n = RB[58:64]
        r = ROTL64(RS, n)
        b = concat(mb[5], mb[0:5])
        m = MASK(b, 63)
        RA = r & m
        return (RA,)

    @inject()
    def op_rldcr(self, RB, RS):
        n = RB[58:64]
        r = ROTL64(RS, n)
        e = concat(me[5], me[0:5])
        m = MASK(0, e)
        RA = r & m
        return (RA,)

    @inject()
    def op_rldcr_(self, RB, RS):
        n = RB[58:64]
        r = ROTL64(RS, n)
        e = concat(me[5], me[0:5])
        m = MASK(0, e)
        RA = r & m
        return (RA,)

    @inject()
    def op_rldimi(self, RS, RA):
        n = sh
        r = ROTL64(RS, n)
        b = concat(mb[5], mb[0:5])
        m = MASK(b, ~n)
        RA = r & m | RA & ~m
        return (RA,)

    @inject()
    def op_rldimi_(self, RS, RA):
        n = sh
        r = ROTL64(RS, n)
        b = concat(mb[5], mb[0:5])
        m = MASK(b, ~n)
        RA = r & m | RA & ~m
        return (RA,)

    @inject()
    def op_slw(self, RB, RS):
        n = RB[59:64]
        r = ROTL32(RS[32:64], n)
        if eq(RB[58], 0):
            m = MASK32(0, 31 - n)
        else:
            m = concat(0, repeat=64)
        RA = r & m
        return (RA,)

    @inject()
    def op_slw_(self, RB, RS):
        n = RB[59:64]
        r = ROTL32(RS[32:64], n)
        if eq(RB[58], 0):
            m = MASK32(0, 31 - n)
        else:
            m = concat(0, repeat=64)
        RA = r & m
        return (RA,)

    @inject()
    def op_srw(self, RB, RS):
        n = RB[59:64]
        r = ROTL32(RS[32:64], 64 - n)
        if eq(RB[58], 0):
            m = MASK32(n, 31)
        else:
            m = concat(0, repeat=64)
        RA = r & m
        return (RA,)

    @inject()
    def op_srw_(self, RB, RS):
        n = RB[59:64]
        r = ROTL32(RS[32:64], 64 - n)
        if eq(RB[58], 0):
            m = MASK32(n, 31)
        else:
            m = concat(0, repeat=64)
        RA = r & m
        return (RA,)

    @inject()
    def op_srawi(self, RS):
        n = SH
        r = ROTL32(RS[32:64], 64 - n)
        m = MASK32(n, 31)
        s = RS[32]
        RA = r & m | concat(s, repeat=64) & ~m
        carry = s & ne((r & ~m)[32:64], 0)
        CA = carry
        CA32 = carry
        return (RA, CA, CA32,)

    @inject()
    def op_srawi_(self, RS):
        n = SH
        r = ROTL32(RS[32:64], 64 - n)
        m = MASK32(n, 31)
        s = RS[32]
        RA = r & m | concat(s, repeat=64) & ~m
        carry = s & ne((r & ~m)[32:64], 0)
        CA = carry
        CA32 = carry
        return (RA, CA, CA32,)

    @inject()
    def op_sraw(self, RB, RS):
        n = RB[59:64]
        r = ROTL32(RS[32:64], 64 - n)
        if eq(RB[58], 0):
            m = MASK32(n, 31)
        else:
            m = concat(0, repeat=64)
        s = RS[32]
        RA = r & m | concat(s, repeat=64) & ~m
        carry = s & ne((r & ~m)[32:64], 0)
        CA = carry
        CA32 = carry
        return (RA, CA, CA32,)

    @inject()
    def op_sraw_(self, RB, RS):
        n = RB[59:64]
        r = ROTL32(RS[32:64], 64 - n)
        if eq(RB[58], 0):
            m = MASK32(n, 31)
        else:
            m = concat(0, repeat=64)
        s = RS[32]
        RA = r & m | concat(s, repeat=64) & ~m
        carry = s & ne((r & ~m)[32:64], 0)
        CA = carry
        CA32 = carry
        return (RA, CA, CA32,)

    @inject()
    def op_sld(self, RB, RS):
        n = RB[58:64]
        r = ROTL64(RS, n)
        if eq(RB[57], 0):
            m = MASK(0, 63 - n)
        else:
            m = concat(0, repeat=64)
        RA = r & m
        return (RA,)

    @inject()
    def op_sld_(self, RB, RS):
        n = RB[58:64]
        r = ROTL64(RS, n)
        if eq(RB[57], 0):
            m = MASK(0, 63 - n)
        else:
            m = concat(0, repeat=64)
        RA = r & m
        return (RA,)

    @inject()
    def op_srd(self, RB, RS):
        n = RB[58:64]
        r = ROTL64(RS, 64 - n)
        if eq(RB[57], 0):
            m = MASK(n, 63)
        else:
            m = concat(0, repeat=64)
        RA = r & m
        return (RA,)

    @inject()
    def op_srd_(self, RB, RS):
        n = RB[58:64]
        r = ROTL64(RS, 64 - n)
        if eq(RB[57], 0):
            m = MASK(n, 63)
        else:
            m = concat(0, repeat=64)
        RA = r & m
        return (RA,)

    @inject()
    def op_sradi(self, RS):
        n = sh
        r = ROTL64(RS, 64 - n)
        m = MASK(n, 63)
        s = RS[0]
        RA = r & m | concat(s, repeat=64) & ~m
        carry = s & ne(r & ~m, 0)
        CA = carry
        CA32 = carry
        return (RA, CA, CA32,)

    @inject()
    def op_sradi_(self, RS):
        n = sh
        r = ROTL64(RS, 64 - n)
        m = MASK(n, 63)
        s = RS[0]
        RA = r & m | concat(s, repeat=64) & ~m
        carry = s & ne(r & ~m, 0)
        CA = carry
        CA32 = carry
        return (RA, CA, CA32,)

    @inject()
    def op_srad(self, RB, RS):
        n = RB[58:64]
        r = ROTL64(RS, 64 - n)
        if eq(RB[57], 0):
            m = MASK(n, 63)
        else:
            m = concat(0, repeat=64)
        s = RS[0]
        RA = r & m | concat(s, repeat=64) & ~m
        carry = s & ne(r & ~m, 0)
        CA = carry
        CA32 = carry
        return (RA, CA, CA32,)

    @inject()
    def op_srad_(self, RB, RS):
        n = RB[58:64]
        r = ROTL64(RS, 64 - n)
        if eq(RB[57], 0):
            m = MASK(n, 63)
        else:
            m = concat(0, repeat=64)
        s = RS[0]
        RA = r & m | concat(s, repeat=64) & ~m
        carry = s & ne(r & ~m, 0)
        CA = carry
        CA32 = carry
        return (RA, CA, CA32,)

    @inject()
    def op_extswsli(self, RS):
        n = sh
        r = ROTL64(EXTS64(RS[32:64]), n)
        m = MASK(0, 63 - n)
        RA = r & m
        return (RA,)

    @inject()
    def op_extswsli_(self, RS):
        n = sh
        r = ROTL64(EXTS64(RS[32:64]), n)
        m = MASK(0, 63 - n)
        RA = r & m
        return (RA,)

    fixedshift_instrs = {}
    fixedshift_instrs['rlwinm'] = instruction_info(func=op_rlwinm,
                read_regs=OrderedSet(['RS']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RA']),
                special_regs=OrderedSet(), op_fields=OrderedSet(['SH', 'MB', 'ME']),
                form='M',
                asmregs=[['RA', 'RS', 'SH', 'MB', 'ME'], '(Rc=0)'])
    fixedshift_instrs['rlwinm.'] = instruction_info(func=op_rlwinm_,
                read_regs=OrderedSet(['RS']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RA']),
                special_regs=OrderedSet(), op_fields=OrderedSet(['SH', 'MB', 'ME']),
                form='M',
                asmregs=[['RA', 'RS', 'SH', 'MB', 'ME'], '(Rc=1)'])
    fixedshift_instrs['rlwnm'] = instruction_info(func=op_rlwnm,
                read_regs=OrderedSet(['RB', 'RS']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RA']),
                special_regs=OrderedSet(), op_fields=OrderedSet(['MB', 'ME']),
                form='M',
                asmregs=[['RA', 'RS', 'RB', 'MB', 'ME'], '(Rc=0)'])
    fixedshift_instrs['rlwnm.'] = instruction_info(func=op_rlwnm_,
                read_regs=OrderedSet(['RB', 'RS']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RA']),
                special_regs=OrderedSet(), op_fields=OrderedSet(['MB', 'ME']),
                form='M',
                asmregs=[['RA', 'RS', 'RB', 'MB', 'ME'], '(Rc=1)'])
    fixedshift_instrs['rlwimi'] = instruction_info(func=op_rlwimi,
                read_regs=OrderedSet(['RS', 'RA']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RA']),
                special_regs=OrderedSet(), op_fields=OrderedSet(['SH', 'MB', 'ME']),
                form='M',
                asmregs=[['RA', 'RS', 'SH', 'MB', 'ME'], '(Rc=0)'])
    fixedshift_instrs['rlwimi.'] = instruction_info(func=op_rlwimi_,
                read_regs=OrderedSet(['RS', 'RA']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RA']),
                special_regs=OrderedSet(), op_fields=OrderedSet(['SH', 'MB', 'ME']),
                form='M',
                asmregs=[['RA', 'RS', 'SH', 'MB', 'ME'], '(Rc=1)'])
    fixedshift_instrs['rldicl'] = instruction_info(func=op_rldicl,
                read_regs=OrderedSet(['RS']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RA']),
                special_regs=OrderedSet(), op_fields=OrderedSet(['sh', 'mb']),
                form='MD',
                asmregs=[['RA', 'RS', 'SH', 'MB'], '(Rc=0)'])
    fixedshift_instrs['rldicl.'] = instruction_info(func=op_rldicl_,
                read_regs=OrderedSet(['RS']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RA']),
                special_regs=OrderedSet(), op_fields=OrderedSet(['sh', 'mb']),
                form='MD',
                asmregs=[['RA', 'RS', 'SH', 'MB'], '(Rc=1)'])
    fixedshift_instrs['rldicr'] = instruction_info(func=op_rldicr,
                read_regs=OrderedSet(['RS']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RA']),
                special_regs=OrderedSet(), op_fields=OrderedSet(['sh', 'me']),
                form='MD',
                asmregs=[['RA', 'RS', 'SH', 'ME'], '(Rc=0)'])
    fixedshift_instrs['rldicr.'] = instruction_info(func=op_rldicr_,
                read_regs=OrderedSet(['RS']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RA']),
                special_regs=OrderedSet(), op_fields=OrderedSet(['sh', 'me']),
                form='MD',
                asmregs=[['RA', 'RS', 'SH', 'ME'], '(Rc=1)'])
    fixedshift_instrs['rldic'] = instruction_info(func=op_rldic,
                read_regs=OrderedSet(['RS']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RA']),
                special_regs=OrderedSet(), op_fields=OrderedSet(['sh', 'mb']),
                form='MD',
                asmregs=[['RA', 'RS', 'SH', 'MB'], '(Rc=0)'])
    fixedshift_instrs['rldic.'] = instruction_info(func=op_rldic_,
                read_regs=OrderedSet(['RS']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RA']),
                special_regs=OrderedSet(), op_fields=OrderedSet(['sh', 'mb']),
                form='MD',
                asmregs=[['RA', 'RS', 'SH', 'MB'], '(Rc=1)'])
    fixedshift_instrs['rldcl'] = instruction_info(func=op_rldcl,
                read_regs=OrderedSet(['RB', 'RS']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RA']),
                special_regs=OrderedSet(), op_fields=OrderedSet(['mb']),
                form='MDS',
                asmregs=[['RA', 'RS', 'RB', 'MB'], '(Rc=0)'])
    fixedshift_instrs['rldcl.'] = instruction_info(func=op_rldcl_,
                read_regs=OrderedSet(['RB', 'RS']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RA']),
                special_regs=OrderedSet(), op_fields=OrderedSet(['mb']),
                form='MDS',
                asmregs=[['RA', 'RS', 'RB', 'MB'], '(Rc=1)'])
    fixedshift_instrs['rldcr'] = instruction_info(func=op_rldcr,
                read_regs=OrderedSet(['RB', 'RS']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RA']),
                special_regs=OrderedSet(), op_fields=OrderedSet(['me']),
                form='MDS',
                asmregs=[['RA', 'RS', 'RB', 'ME'], '(Rc=0)'])
    fixedshift_instrs['rldcr.'] = instruction_info(func=op_rldcr_,
                read_regs=OrderedSet(['RB', 'RS']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RA']),
                special_regs=OrderedSet(), op_fields=OrderedSet(['me']),
                form='MDS',
                asmregs=[['RA', 'RS', 'RB', 'ME'], '(Rc=1)'])
    fixedshift_instrs['rldimi'] = instruction_info(func=op_rldimi,
                read_regs=OrderedSet(['RS', 'RA']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RA']),
                special_regs=OrderedSet(), op_fields=OrderedSet(['sh', 'mb']),
                form='MD',
                asmregs=[['RA', 'RS', 'SH', 'MB'], '(Rc=0)'])
    fixedshift_instrs['rldimi.'] = instruction_info(func=op_rldimi_,
                read_regs=OrderedSet(['RS', 'RA']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RA']),
                special_regs=OrderedSet(), op_fields=OrderedSet(['sh', 'mb']),
                form='MD',
                asmregs=[['RA', 'RS', 'SH', 'MB'], '(Rc=1)'])
    fixedshift_instrs['slw'] = instruction_info(func=op_slw,
                read_regs=OrderedSet(['RB', 'RS']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RA']),
                special_regs=OrderedSet(), op_fields=OrderedSet(),
                form='X',
                asmregs=[['RA', 'RS', 'RB'], '(Rc=0)'])
    fixedshift_instrs['slw.'] = instruction_info(func=op_slw_,
                read_regs=OrderedSet(['RB', 'RS']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RA']),
                special_regs=OrderedSet(), op_fields=OrderedSet(),
                form='X',
                asmregs=[['RA', 'RS', 'RB'], '(Rc=1)'])
    fixedshift_instrs['srw'] = instruction_info(func=op_srw,
                read_regs=OrderedSet(['RB', 'RS']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RA']),
                special_regs=OrderedSet(), op_fields=OrderedSet(),
                form='X',
                asmregs=[['RA', 'RS', 'RB'], '(Rc=0)'])
    fixedshift_instrs['srw.'] = instruction_info(func=op_srw_,
                read_regs=OrderedSet(['RB', 'RS']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RA']),
                special_regs=OrderedSet(), op_fields=OrderedSet(),
                form='X',
                asmregs=[['RA', 'RS', 'RB'], '(Rc=1)'])
    fixedshift_instrs['srawi'] = instruction_info(func=op_srawi,
                read_regs=OrderedSet(['RS']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RA', 'CA', 'CA32']),
                special_regs=OrderedSet(), op_fields=OrderedSet(['SH']),
                form='X',
                asmregs=[['RA', 'RS', 'SH'], '(Rc=0)'])
    fixedshift_instrs['srawi.'] = instruction_info(func=op_srawi_,
                read_regs=OrderedSet(['RS']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RA', 'CA', 'CA32']),
                special_regs=OrderedSet(), op_fields=OrderedSet(['SH']),
                form='X',
                asmregs=[['RA', 'RS', 'SH'], '(Rc=1)'])
    fixedshift_instrs['sraw'] = instruction_info(func=op_sraw,
                read_regs=OrderedSet(['RB', 'RS']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RA', 'CA', 'CA32']),
                special_regs=OrderedSet(), op_fields=OrderedSet(),
                form='X',
                asmregs=[['RA', 'RS', 'RB'], '(Rc=0)'])
    fixedshift_instrs['sraw.'] = instruction_info(func=op_sraw_,
                read_regs=OrderedSet(['RB', 'RS']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RA', 'CA', 'CA32']),
                special_regs=OrderedSet(), op_fields=OrderedSet(),
                form='X',
                asmregs=[['RA', 'RS', 'RB'], '(Rc=1)'])
    fixedshift_instrs['sld'] = instruction_info(func=op_sld,
                read_regs=OrderedSet(['RB', 'RS']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RA']),
                special_regs=OrderedSet(), op_fields=OrderedSet(),
                form='X',
                asmregs=[['RA', 'RS', 'RB'], '(Rc=0)'])
    fixedshift_instrs['sld.'] = instruction_info(func=op_sld_,
                read_regs=OrderedSet(['RB', 'RS']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RA']),
                special_regs=OrderedSet(), op_fields=OrderedSet(),
                form='X',
                asmregs=[['RA', 'RS', 'RB'], '(Rc=1)'])
    fixedshift_instrs['srd'] = instruction_info(func=op_srd,
                read_regs=OrderedSet(['RB', 'RS']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RA']),
                special_regs=OrderedSet(), op_fields=OrderedSet(),
                form='X',
                asmregs=[['RA', 'RS', 'RB'], '(Rc=0)'])
    fixedshift_instrs['srd.'] = instruction_info(func=op_srd_,
                read_regs=OrderedSet(['RB', 'RS']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RA']),
                special_regs=OrderedSet(), op_fields=OrderedSet(),
                form='X',
                asmregs=[['RA', 'RS', 'RB'], '(Rc=1)'])
    fixedshift_instrs['sradi'] = instruction_info(func=op_sradi,
                read_regs=OrderedSet(['RS']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RA', 'CA', 'CA32']),
                special_regs=OrderedSet(), op_fields=OrderedSet(['sh']),
                form='XS',
                asmregs=[['RA', 'RS', 'SH'], '(Rc=0)'])
    fixedshift_instrs['sradi.'] = instruction_info(func=op_sradi_,
                read_regs=OrderedSet(['RS']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RA', 'CA', 'CA32']),
                special_regs=OrderedSet(), op_fields=OrderedSet(['sh']),
                form='XS',
                asmregs=[['RA', 'RS', 'SH'], '(Rc=1)'])
    fixedshift_instrs['srad'] = instruction_info(func=op_srad,
                read_regs=OrderedSet(['RB', 'RS']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RA', 'CA', 'CA32']),
                special_regs=OrderedSet(), op_fields=OrderedSet(),
                form='X',
                asmregs=[['RA', 'RS', 'RB'], '(Rc=0)'])
    fixedshift_instrs['srad.'] = instruction_info(func=op_srad_,
                read_regs=OrderedSet(['RB', 'RS']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RA', 'CA', 'CA32']),
                special_regs=OrderedSet(), op_fields=OrderedSet(),
                form='X',
                asmregs=[['RA', 'RS', 'RB'], '(Rc=1)'])
    fixedshift_instrs['extswsli'] = instruction_info(func=op_extswsli,
                read_regs=OrderedSet(['RS']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RA']),
                special_regs=OrderedSet(), op_fields=OrderedSet(['sh']),
                form='XS',
                asmregs=[['RA', 'RS', 'SH'], '(Rc=0)'])
    fixedshift_instrs['extswsli.'] = instruction_info(func=op_extswsli_,
                read_regs=OrderedSet(['RS']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RA']),
                special_regs=OrderedSet(), op_fields=OrderedSet(['sh']),
                form='XS',
                asmregs=[['RA', 'RS', 'SH'], '(Rc=1)'])
