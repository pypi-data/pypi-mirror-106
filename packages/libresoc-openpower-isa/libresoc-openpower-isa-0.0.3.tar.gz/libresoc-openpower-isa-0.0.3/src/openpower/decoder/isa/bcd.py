# auto-generated by pywriter.py, do not edit or commit

from openpower.decoder.isa.caller import inject, instruction_info
from openpower.decoder.helpers import (EXTS, EXTS64, EXTZ64, ROTL64, ROTL32,
                                 MASK, MASK32,
                                 ne, eq, gt, ge, lt, le, ltu, gtu, length,
                                 trunc_divs, trunc_rems, MULS, DIVS, MODS,
                                 EXTS128, undefined,
                                 DOUBLE, SINGLE)
from openpower.decoder.selectable_int import SelectableInt
from openpower.decoder.selectable_int import selectconcat as concat
from openpower.decoder.orderedset import OrderedSet

class bcd:

    @inject()
    def op_cdtbcd(self, RA, RS):
        for i in range(0, 1 + 1):
            n = i * 32
            RA[n + 0:n + 7 + 1] = 0
            RA[n + 8:n + 19 + 1] = DPD_TO_BCD(RS[n + 12:n + 21 + 1])
            RA[n + 20:n + 31 + 1] = DPD_TO_BCD(RS[n + 22:n + 31 + 1])
        return (RA,)

    @inject()
    def op_addg6s(self, RA, RB):
        for i in range(0, 15 + 1):
            dci = carry_out(RA[4 * i:64] + RB[4 * i:64])
            c = concat(concat(dc[0], repeat=4), concat(dc[1], repeat=4), concat(dc[
                2], repeat=4), concat(dc[3], repeat=4), concat(dc[4], repeat=4),
                concat(dc[5], repeat=4), concat(dc[6], repeat=4), concat(dc[7],
                repeat=4), concat(dc[8], repeat=4), concat(dc[9], repeat=4), concat
                (dc[10], repeat=4), concat(dc[11], repeat=4), concat(dc[12], repeat
                =4), concat(dc[13], repeat=4), concat(dc[14], repeat=4), concat(dc[
                15], repeat=4))
            RT = ~c & SelectableInt(value=0x6666666666666666, bits=64)
        return (RT,)

    @inject()
    def op_cbcdtd(self, RA, RS):
        for i in range(0, 1 + 1):
            n = i * 32
            RA[n + 0:n + 11 + 1] = 0
            RA[n + 12:n + 21 + 1] = BCD_TO_DPD(RS[n + 8:n + 19 + 1])
            RA[n + 22:n + 31 + 1] = BCD_TO_DPD(RS[n + 20:n + 31 + 1])
        return (RA,)

    bcd_instrs = {}
    bcd_instrs['cdtbcd'] = instruction_info(func=op_cdtbcd,
                read_regs=OrderedSet(['RA', 'RS']),
                uninit_regs=OrderedSet(['RA']), write_regs=OrderedSet(['RA']),
                special_regs=OrderedSet(), op_fields=OrderedSet(),
                form='X',
                asmregs=[['RA', ''], 'RS'])
    bcd_instrs['addg6s'] = instruction_info(func=op_addg6s,
                read_regs=OrderedSet(['RA', 'RB']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RT']),
                special_regs=OrderedSet(), op_fields=OrderedSet(),
                form='XO',
                asmregs=[['RT', 'RA', 'RB']])
    bcd_instrs['cbcdtd'] = instruction_info(func=op_cbcdtd,
                read_regs=OrderedSet(['RA', 'RS']),
                uninit_regs=OrderedSet(['RA']), write_regs=OrderedSet(['RA']),
                special_regs=OrderedSet(), op_fields=OrderedSet(),
                form='X',
                asmregs=[['RA', ''], 'RS'])
