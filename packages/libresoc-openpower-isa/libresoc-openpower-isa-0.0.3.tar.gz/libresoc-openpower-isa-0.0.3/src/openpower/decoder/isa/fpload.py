# auto-generated by pywriter.py, do not edit or commit

from openpower.decoder.isa.caller import inject, instruction_info
from openpower.decoder.helpers import (EXTS, EXTS64, EXTZ64, ROTL64, ROTL32,
                                 MASK, MASK32,
                                 ne, eq, gt, ge, lt, le, ltu, gtu, length,
                                 trunc_divs, trunc_rems, MULS, DIVS, MODS,
                                 EXTS128, undefined,
                                 DOUBLE, SINGLE)
from openpower.decoder.selectable_int import SelectableInt
from openpower.decoder.selectable_int import selectconcat as concat
from openpower.decoder.orderedset import OrderedSet

class fpload:

    @inject()
    def op_lfs(self, RA):
        EA = GPR.getz(_RA) + EXTS(D)
        FRT = DOUBLE(MEM(EA, 4))
        return (FRT,)

    @inject()
    def op_lfsx(self, RA, RB):
        EA = GPR.getz(_RA) + RB
        print ("EA", EA)
        FRT = DOUBLE(MEM(EA, 4))
        return (FRT,)

    @inject()
    def op_lfsu(self, RA):
        EA = RA + EXTS(D)
        FRT = DOUBLE(MEM(EA, 4))
        RA = EA
        return (FRT, RA,)

    @inject()
    def op_lfsux(self, RA, RB):
        EA = RA + RB
        FRT = DOUBLE(MEM(EA, 4))
        RA = EA
        return (FRT, RA,)

    @inject()
    def op_lfd(self, RA):
        EA = GPR.getz(_RA) + EXTS(D)
        FRT = MEM(EA, 8)
        return (FRT,)

    @inject()
    def op_lfdx(self, RA, RB):
        EA = GPR.getz(_RA) + RB
        FRT = MEM(EA, 8)
        return (FRT,)

    @inject()
    def op_lfdu(self, RA):
        EA = RA + EXTS(D)
        FRT = MEM(EA, 8)
        RA = EA
        return (FRT, RA,)

    @inject()
    def op_lfdux(self, RA, RB):
        EA = RA + RB
        FRT = MEM(EA, 8)
        RA = EA
        return (FRT, RA,)

    @inject()
    def op_lfiwax(self, RA, RB):
        EA = GPR.getz(_RA) + RB
        FRT = EXTS(MEM(EA, 4))
        return (FRT,)

    @inject()
    def op_lfiwix(self, RA, RB):
        EA = GPR.getz(_RA) + RB
        FRT = concat(concat(0, repeat=32), MEM(EA, 4))
        return (FRT,)

    fpload_instrs = {}
    fpload_instrs['lfs'] = instruction_info(func=op_lfs,
                read_regs=OrderedSet(['RA']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['FRT']),
                special_regs=OrderedSet(), op_fields=OrderedSet(['D']),
                form='D',
                asmregs=[['FRT', 'D(RA)']])
    fpload_instrs['lfsx'] = instruction_info(func=op_lfsx,
                read_regs=OrderedSet(['RA', 'RB']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['FRT']),
                special_regs=OrderedSet(), op_fields=OrderedSet(),
                form='X',
                asmregs=[['FRT', 'RA', 'RB']])
    fpload_instrs['lfsu'] = instruction_info(func=op_lfsu,
                read_regs=OrderedSet(['RA']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['FRT', 'RA']),
                special_regs=OrderedSet(), op_fields=OrderedSet(['D']),
                form='D',
                asmregs=[['FRT', 'D(RA)']])
    fpload_instrs['lfsux'] = instruction_info(func=op_lfsux,
                read_regs=OrderedSet(['RA', 'RB']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['FRT', 'RA']),
                special_regs=OrderedSet(), op_fields=OrderedSet(),
                form='X',
                asmregs=[['FRT', 'RA', 'RB']])
    fpload_instrs['lfd'] = instruction_info(func=op_lfd,
                read_regs=OrderedSet(['RA']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['FRT']),
                special_regs=OrderedSet(), op_fields=OrderedSet(['D']),
                form='D',
                asmregs=[['FRT', 'D(RA)']])
    fpload_instrs['lfdx'] = instruction_info(func=op_lfdx,
                read_regs=OrderedSet(['RA', 'RB']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['FRT']),
                special_regs=OrderedSet(), op_fields=OrderedSet(),
                form='X',
                asmregs=[['FRT', 'RA', 'RB']])
    fpload_instrs['lfdu'] = instruction_info(func=op_lfdu,
                read_regs=OrderedSet(['RA']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['FRT', 'RA']),
                special_regs=OrderedSet(), op_fields=OrderedSet(['D']),
                form='D',
                asmregs=[['FRT', 'D(RA)']])
    fpload_instrs['lfdux'] = instruction_info(func=op_lfdux,
                read_regs=OrderedSet(['RA', 'RB']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['FRT', 'RA']),
                special_regs=OrderedSet(), op_fields=OrderedSet(),
                form='X',
                asmregs=[['FRT', 'RA', 'RB']])
    fpload_instrs['lfiwax'] = instruction_info(func=op_lfiwax,
                read_regs=OrderedSet(['RA', 'RB']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['FRT']),
                special_regs=OrderedSet(), op_fields=OrderedSet(),
                form='X',
                asmregs=[['FRT', 'RA', 'RB']])
    fpload_instrs['lfiwix'] = instruction_info(func=op_lfiwix,
                read_regs=OrderedSet(['RA', 'RB']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['FRT']),
                special_regs=OrderedSet(), op_fields=OrderedSet(),
                form='X',
                asmregs=[['FRT', 'RA', 'RB']])
