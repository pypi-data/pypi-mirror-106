# auto-generated by pywriter.py, do not edit or commit

from openpower.decoder.isa.caller import inject, instruction_info
from openpower.decoder.helpers import (EXTS, EXTS64, EXTZ64, ROTL64, ROTL32,
                                 MASK, MASK32,
                                 ne, eq, gt, ge, lt, le, ltu, gtu, length,
                                 trunc_divs, trunc_rems, MULS, DIVS, MODS,
                                 EXTS128, undefined,
                                 DOUBLE, SINGLE)
from openpower.decoder.selectable_int import SelectableInt
from openpower.decoder.selectable_int import selectconcat as concat
from openpower.decoder.orderedset import OrderedSet

class fixedload:

    @inject()
    def op_lbz(self, RA):
        b = GPR.getz(_RA)
        EA = b + EXTS(D)
        RT = concat(concat(0, repeat=56), MEM(EA, 1))
        return (RT,)

    @inject()
    def op_lbzx(self, RA, RB):
        b = GPR.getz(_RA)
        EA = b + RB
        RT = concat(concat(0, repeat=56), MEM(EA, 1))
        return (RT,)

    @inject()
    def op_lbzu(self, RA):
        EA = RA + EXTS(D)
        RT = concat(concat(0, repeat=56), MEM(EA, 1))
        RA = EA
        return (RT, RA,)

    @inject()
    def op_lbzux(self, RA, RB):
        EA = RA + RB
        RT = concat(concat(0, repeat=56), MEM(EA, 1))
        RA = EA
        return (RT, RA,)

    @inject()
    def op_lhz(self, RA):
        b = GPR.getz(_RA)
        EA = b + EXTS(D)
        RT = concat(concat(0, repeat=48), MEM(EA, 2))
        return (RT,)

    @inject()
    def op_lhzx(self, RA, RB):
        b = GPR.getz(_RA)
        EA = b + RB
        RT = concat(concat(0, repeat=48), MEM(EA, 2))
        return (RT,)

    @inject()
    def op_lhzu(self, RA):
        EA = RA + EXTS(D)
        RT = concat(concat(0, repeat=48), MEM(EA, 2))
        RA = EA
        return (RT, RA,)

    @inject()
    def op_lhzux(self, RA, RB):
        EA = RA + RB
        RT = concat(concat(0, repeat=48), MEM(EA, 2))
        RA = EA
        return (RT, RA,)

    @inject()
    def op_lha(self, RA):
        b = GPR.getz(_RA)
        EA = b + EXTS(D)
        RT = EXTS(MEM(EA, 2))
        return (RT,)

    @inject()
    def op_lhax(self, RA, RB):
        b = GPR.getz(_RA)
        EA = b + RB
        RT = EXTS(MEM(EA, 2))
        return (RT,)

    @inject()
    def op_lhau(self, RA):
        EA = RA + EXTS(D)
        RT = EXTS(MEM(EA, 2))
        RA = EA
        return (RT, RA,)

    @inject()
    def op_lhaux(self, RA, RB):
        EA = RA + RB
        RT = EXTS(MEM(EA, 2))
        RA = EA
        return (RT, RA,)

    @inject()
    def op_lwz(self, RA):
        b = GPR.getz(_RA)
        EA = b + EXTS(D)
        RT = concat(concat(0, repeat=32), MEM(EA, 4))
        return (RT,)

    @inject()
    def op_lwzx(self, RA, RB):
        b = GPR.getz(_RA)
        EA = b + RB
        RT = concat(concat(0, repeat=32), MEM(EA, 4))
        return (RT,)

    @inject()
    def op_lwzu(self, RA):
        EA = RA + EXTS(D)
        RT = concat(concat(0, repeat=32), MEM(EA, 4))
        RA = EA
        return (RT, RA,)

    @inject()
    def op_lwzux(self, RA, RB):
        EA = RA + RB
        RT = concat(concat(0, repeat=32), MEM(EA, 4))
        RA = EA
        return (RT, RA,)

    @inject()
    def op_lwa(self, RA):
        b = GPR.getz(_RA)
        EA = b + EXTS(concat(DS, SelectableInt(value=0x0, bits=2)))
        RT = EXTS(MEM(EA, 4))
        return (RT,)

    @inject()
    def op_lwax(self, RA, RB):
        b = GPR.getz(_RA)
        EA = b + RB
        RT = EXTS(MEM(EA, 4))
        return (RT,)

    @inject()
    def op_lwaux(self, RA, RB):
        EA = RA + RB
        RT = EXTS(MEM(EA, 4))
        RA = EA
        return (RT, RA,)

    @inject()
    def op_ld(self, RA):
        b = GPR.getz(_RA)
        EA = b + EXTS(concat(DS, SelectableInt(value=0x0, bits=2)))
        RT = MEM(EA, 8)
        return (RT,)

    @inject()
    def op_ldx(self, RA, RB):
        b = GPR.getz(_RA)
        EA = b + RB
        RT = MEM(EA, 8)
        return (RT,)

    @inject()
    def op_ldu(self, RA):
        EA = RA + EXTS(concat(DS, SelectableInt(value=0x0, bits=2)))
        RT = MEM(EA, 8)
        RA = EA
        return (RT, RA,)

    @inject()
    def op_ldux(self, RA, RB):
        EA = RA + RB
        RT = MEM(EA, 8)
        RA = EA
        return (RT, RA,)

    @inject()
    def op_lq(self, RA):
        b = GPR.getz(_RA)
        EA = b + EXTS(concat(DQ, SelectableInt(value=0x0, bits=4)))
        RTp = MEM(EA, 16)

    @inject()
    def op_lhbrx(self, RA, RB):
        b = GPR.getz(_RA)
        EA = b + RB
        load_data = MEM(EA, 2)
        RT = concat(concat(0, repeat=48), load_data[8:16], load_data[0:8])
        return (RT,)

    @inject()
    def op_lwbrx(self, RA, RB):
        b = GPR.getz(_RA)
        EA = b + RB
        load_data = MEM(EA, 4)
        RT = concat(concat(0, repeat=32), load_data[24:32], load_data[16:24],
            load_data[8:16], load_data[0:8])
        return (RT,)

    @inject()
    def op_ldbrx(self, RA, RB):
        b = GPR.getz(_RA)
        EA = b + RB
        load_data = MEM(EA, 8)
        RT = concat(load_data[56:64], load_data[48:56], load_data[40:48], load_data
            [32:40], load_data[24:32], load_data[16:24], load_data[8:16], load_data
            [0:8])
        return (RT,)

    @inject()
    def op_lmw(self, RA):
        b = GPR.getz(_RA)
        EA = b + EXTS(D)
        r = RT
        while le(r, 31):
            GPR[r] = concat(concat(0, repeat=32), MEM(EA, 4))
            r = r + 1
            EA = EA + 4

    fixedload_instrs = {}
    fixedload_instrs['lbz'] = instruction_info(func=op_lbz,
                read_regs=OrderedSet(['RA']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RT']),
                special_regs=OrderedSet(), op_fields=OrderedSet(['D']),
                form='D',
                asmregs=[['RT', 'D(RA)']])
    fixedload_instrs['lbzx'] = instruction_info(func=op_lbzx,
                read_regs=OrderedSet(['RA', 'RB']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RT']),
                special_regs=OrderedSet(), op_fields=OrderedSet(),
                form='X',
                asmregs=[['RT', 'RA', 'RB']])
    fixedload_instrs['lbzu'] = instruction_info(func=op_lbzu,
                read_regs=OrderedSet(['RA']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RT', 'RA']),
                special_regs=OrderedSet(), op_fields=OrderedSet(['D']),
                form='D',
                asmregs=[['RT', 'D(RA)']])
    fixedload_instrs['lbzux'] = instruction_info(func=op_lbzux,
                read_regs=OrderedSet(['RA', 'RB']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RT', 'RA']),
                special_regs=OrderedSet(), op_fields=OrderedSet(),
                form='X',
                asmregs=[['RT', 'RA', 'RB']])
    fixedload_instrs['lhz'] = instruction_info(func=op_lhz,
                read_regs=OrderedSet(['RA']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RT']),
                special_regs=OrderedSet(), op_fields=OrderedSet(['D']),
                form='D',
                asmregs=[['RT', 'D(RA)']])
    fixedload_instrs['lhzx'] = instruction_info(func=op_lhzx,
                read_regs=OrderedSet(['RA', 'RB']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RT']),
                special_regs=OrderedSet(), op_fields=OrderedSet(),
                form='X',
                asmregs=[['RT', 'RA', 'RB']])
    fixedload_instrs['lhzu'] = instruction_info(func=op_lhzu,
                read_regs=OrderedSet(['RA']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RT', 'RA']),
                special_regs=OrderedSet(), op_fields=OrderedSet(['D']),
                form='D',
                asmregs=[['RT', 'D(RA)']])
    fixedload_instrs['lhzux'] = instruction_info(func=op_lhzux,
                read_regs=OrderedSet(['RA', 'RB']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RT', 'RA']),
                special_regs=OrderedSet(), op_fields=OrderedSet(),
                form='X',
                asmregs=[['RT', 'RA', 'RB']])
    fixedload_instrs['lha'] = instruction_info(func=op_lha,
                read_regs=OrderedSet(['RA']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RT']),
                special_regs=OrderedSet(), op_fields=OrderedSet(['D']),
                form='D',
                asmregs=[['RT', 'D(RA)']])
    fixedload_instrs['lhax'] = instruction_info(func=op_lhax,
                read_regs=OrderedSet(['RA', 'RB']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RT']),
                special_regs=OrderedSet(), op_fields=OrderedSet(),
                form='X',
                asmregs=[['RT', 'RA', 'RB']])
    fixedload_instrs['lhau'] = instruction_info(func=op_lhau,
                read_regs=OrderedSet(['RA']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RT', 'RA']),
                special_regs=OrderedSet(), op_fields=OrderedSet(['D']),
                form='D',
                asmregs=[['RT', 'D(RA)']])
    fixedload_instrs['lhaux'] = instruction_info(func=op_lhaux,
                read_regs=OrderedSet(['RA', 'RB']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RT', 'RA']),
                special_regs=OrderedSet(), op_fields=OrderedSet(),
                form='X',
                asmregs=[['RT', 'RA', 'RB']])
    fixedload_instrs['lwz'] = instruction_info(func=op_lwz,
                read_regs=OrderedSet(['RA']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RT']),
                special_regs=OrderedSet(), op_fields=OrderedSet(['D']),
                form='D',
                asmregs=[['RT', 'D(RA)']])
    fixedload_instrs['lwzx'] = instruction_info(func=op_lwzx,
                read_regs=OrderedSet(['RA', 'RB']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RT']),
                special_regs=OrderedSet(), op_fields=OrderedSet(),
                form='X',
                asmregs=[['RT', 'RA', 'RB']])
    fixedload_instrs['lwzu'] = instruction_info(func=op_lwzu,
                read_regs=OrderedSet(['RA']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RT', 'RA']),
                special_regs=OrderedSet(), op_fields=OrderedSet(['D']),
                form='D',
                asmregs=[['RT', 'D(RA)']])
    fixedload_instrs['lwzux'] = instruction_info(func=op_lwzux,
                read_regs=OrderedSet(['RA', 'RB']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RT', 'RA']),
                special_regs=OrderedSet(), op_fields=OrderedSet(),
                form='X',
                asmregs=[['RT', 'RA', 'RB']])
    fixedload_instrs['lwa'] = instruction_info(func=op_lwa,
                read_regs=OrderedSet(['RA']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RT']),
                special_regs=OrderedSet(), op_fields=OrderedSet(['DS']),
                form='DS',
                asmregs=[['RT', 'DS(RA)']])
    fixedload_instrs['lwax'] = instruction_info(func=op_lwax,
                read_regs=OrderedSet(['RA', 'RB']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RT']),
                special_regs=OrderedSet(), op_fields=OrderedSet(),
                form='X',
                asmregs=[['RT', 'RA', 'RB']])
    fixedload_instrs['lwaux'] = instruction_info(func=op_lwaux,
                read_regs=OrderedSet(['RA', 'RB']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RT', 'RA']),
                special_regs=OrderedSet(), op_fields=OrderedSet(),
                form='X',
                asmregs=[['RT', 'RA', 'RB']])
    fixedload_instrs['ld'] = instruction_info(func=op_ld,
                read_regs=OrderedSet(['RA']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RT']),
                special_regs=OrderedSet(), op_fields=OrderedSet(['DS']),
                form='DS',
                asmregs=[['RT', 'DS(RA)']])
    fixedload_instrs['ldx'] = instruction_info(func=op_ldx,
                read_regs=OrderedSet(['RA', 'RB']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RT']),
                special_regs=OrderedSet(), op_fields=OrderedSet(),
                form='X',
                asmregs=[['RT', 'RA', 'RB']])
    fixedload_instrs['ldu'] = instruction_info(func=op_ldu,
                read_regs=OrderedSet(['RA']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RT', 'RA']),
                special_regs=OrderedSet(), op_fields=OrderedSet(['DS']),
                form='DS',
                asmregs=[['RT', 'DS(RA)']])
    fixedload_instrs['ldux'] = instruction_info(func=op_ldux,
                read_regs=OrderedSet(['RA', 'RB']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RT', 'RA']),
                special_regs=OrderedSet(), op_fields=OrderedSet(),
                form='X',
                asmregs=[['RT', 'RA', 'RB']])
    fixedload_instrs['lq'] = instruction_info(func=op_lq,
                read_regs=OrderedSet(['RA']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(),
                special_regs=OrderedSet(), op_fields=OrderedSet(['DQ', 'RTp']),
                form='DQ',
                asmregs=[['RTp', 'DQ(RA)']])
    fixedload_instrs['lhbrx'] = instruction_info(func=op_lhbrx,
                read_regs=OrderedSet(['RA', 'RB']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RT']),
                special_regs=OrderedSet(), op_fields=OrderedSet(),
                form='X',
                asmregs=[['RT', 'RA', 'RB']])
    fixedload_instrs['lwbrx'] = instruction_info(func=op_lwbrx,
                read_regs=OrderedSet(['RA', 'RB']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RT']),
                special_regs=OrderedSet(), op_fields=OrderedSet(),
                form='X',
                asmregs=[['RT', 'RA', 'RB']])
    fixedload_instrs['ldbrx'] = instruction_info(func=op_ldbrx,
                read_regs=OrderedSet(['RA', 'RB']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(['RT']),
                special_regs=OrderedSet(), op_fields=OrderedSet(),
                form='X',
                asmregs=[['RT', 'RA', 'RB']])
    fixedload_instrs['lmw'] = instruction_info(func=op_lmw,
                read_regs=OrderedSet(['RA']),
                uninit_regs=OrderedSet(), write_regs=OrderedSet(),
                special_regs=OrderedSet(), op_fields=OrderedSet(),
                form='DQ',
                asmregs=[['RT', 'D(RA)']])
