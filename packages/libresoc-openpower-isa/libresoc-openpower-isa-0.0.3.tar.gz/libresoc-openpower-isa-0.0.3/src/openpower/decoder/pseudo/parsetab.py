
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'file_input_endleftEQGTLTleftPLUSMINUSleftMULTDIVAPPEND ASSIGN BINARY BREAK COLON COMMA DEDENT DEF DIV DO ELSE ENDMARKER EQ FOR GT IF INDENT LBRACK LPAR LT MINUS MULT NAME NEWLINE NUMBER PLUS RBRACK RETURN RPAR SEMICOLON STRING THEN TO WHILE WSfile_input_end : file_input ENDMARKERfile_input : file_input NEWLINE\n                      | file_input stmt\n                      | NEWLINE\n                      | stmtfuncdef : DEF NAME parameters COLON suiteparameters : LPAR RPAR\n                      | LPAR varargslist RPARvarargslist : varargslist COMMA NAME\n                       | NAMEstmt : simple_stmtstmt : compound_stmtsimple_stmt : small_stmts NEWLINE\n                       | small_stmts SEMICOLON NEWLINEsmall_stmts : small_stmts SEMICOLON small_stmt\n                       | small_stmtsmall_stmt : flow_stmt\n                      | break_stmt\n                      | expr_stmtexpr_stmt : testlist ASSIGN testlist\n                     | testlist flow_stmt : return_stmtreturn_stmt : RETURN testlistcompound_stmt : if_stmt\n                         | while_stmt\n                         | for_stmt\n                         | funcdef\n        break_stmt : BREAK\n        for_stmt : FOR test EQ test TO test COLON suite\n        while_stmt : DO WHILE test COLON suite ELSE COLON suite\n                      | DO WHILE test COLON suite\n        if_stmt : IF test COLON suite ELSE COLON if_stmt\n                   | IF test COLON suite ELSE COLON suite\n                   | IF test COLON suite\n        suite : simple_stmt\n                 | NEWLINE INDENT stmts DEDENTstmts : stmts stmt\n                 | stmtcomparison : comparison PLUS comparison\n                      | comparison MINUS comparison\n                      | comparison MULT comparison\n                      | comparison DIV comparison\n                      | comparison LT comparison\n                      | comparison EQ comparison\n                      | comparison GT comparison\n                      | PLUS comparison\n                      | MINUS comparison\n                      | comparison APPEND comparison\n                      | powerpower : atom\n                 | atom traileratom : NAMEatom : BINARY\n                | NUMBER\n                | STRINGatom : LBRACK listmaker RBRACKlistmaker : test COMMA listmaker\n                     | test\n        atom : LPAR testlist RPARtrailer : trailer_arglist\n                   | trailer_subscript\n        trailer_arglist : LPAR arglist RPARtrailer_subscript : LBRACK subscript RBRACKsubscript : test COLON test\n                     | test\n        testlist : testlist_multi COMMA\n                    | testlist_multi testlist_multi : testlist_multi COMMA test\n                          | testtest : comparisonarglist : arglist COMMA argument\n                   | argumentargument : test'
    
_lr_action_items = {'NEWLINE':([0,2,3,4,5,6,7,8,9,10,11,12,14,18,19,20,21,22,23,24,26,27,30,31,32,33,34,38,39,40,41,47,48,57,58,59,60,61,67,68,69,74,75,76,77,78,79,80,81,82,83,89,91,92,93,95,97,101,103,108,110,115,121,122,123,125,126,127,128,],[3,38,-4,-5,-11,-12,40,-24,-25,-26,-27,-16,-69,-52,-17,-18,-19,-22,-28,-21,-67,-70,-49,-50,-53,-54,-55,-2,-3,-13,67,-23,-66,-46,-47,-51,-60,-61,-14,-15,94,-20,-68,-39,-40,-41,-42,-43,-44,-45,-48,-56,-59,-34,-35,94,94,-62,-63,-31,-6,94,-33,-32,-36,94,94,-30,-29,]),'IF':([0,2,3,4,5,6,8,9,10,11,38,39,40,67,92,93,107,108,110,115,116,117,121,122,123,124,127,128,],[13,13,-4,-5,-11,-12,-24,-25,-26,-27,-2,-3,-13,-14,-34,-35,13,-31,-6,13,13,-38,-33,-32,-36,-37,-30,-29,]),'DO':([0,2,3,4,5,6,8,9,10,11,38,39,40,67,92,93,107,108,110,116,117,121,122,123,124,127,128,],[15,15,-4,-5,-11,-12,-24,-25,-26,-27,-2,-3,-13,-14,-34,-35,15,-31,-6,15,-38,-33,-32,-36,-37,-30,-29,]),'FOR':([0,2,3,4,5,6,8,9,10,11,38,39,40,67,92,93,107,108,110,116,117,121,122,123,124,127,128,],[16,16,-4,-5,-11,-12,-24,-25,-26,-27,-2,-3,-13,-14,-34,-35,16,-31,-6,16,-38,-33,-32,-36,-37,-30,-29,]),'DEF':([0,2,3,4,5,6,8,9,10,11,38,39,40,67,92,93,107,108,110,116,117,121,122,123,124,127,128,],[17,17,-4,-5,-11,-12,-24,-25,-26,-27,-2,-3,-13,-14,-34,-35,17,-31,-6,17,-38,-33,-32,-36,-37,-30,-29,]),'BREAK':([0,2,3,4,5,6,8,9,10,11,38,39,40,41,67,69,92,93,95,97,107,108,110,115,116,117,121,122,123,124,125,126,127,128,],[23,23,-4,-5,-11,-12,-24,-25,-26,-27,-2,-3,-13,23,-14,23,-34,-35,23,23,23,-31,-6,23,23,-38,-33,-32,-36,-37,23,23,-30,-29,]),'RETURN':([0,2,3,4,5,6,8,9,10,11,38,39,40,41,67,69,92,93,95,97,107,108,110,115,116,117,121,122,123,124,125,126,127,128,],[25,25,-4,-5,-11,-12,-24,-25,-26,-27,-2,-3,-13,25,-14,25,-34,-35,25,25,25,-31,-6,25,25,-38,-33,-32,-36,-37,25,25,-30,-29,]),'PLUS':([0,2,3,4,5,6,8,9,10,11,13,16,18,25,27,28,29,30,31,32,33,34,35,36,38,39,40,41,43,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,67,69,71,76,77,78,79,80,81,82,83,89,90,91,92,93,95,97,101,102,103,104,107,108,109,110,115,116,117,121,122,123,124,125,126,127,128,],[28,28,-4,-5,-11,-12,-24,-25,-26,-27,28,28,-52,28,49,28,28,-49,-50,-53,-54,-55,28,28,-2,-3,-13,28,28,28,28,28,28,28,28,28,28,28,28,-46,-47,-51,-60,-61,28,28,-14,28,28,-39,-40,-41,-42,49,49,49,49,-56,28,-59,-34,-35,28,28,-62,28,-63,28,28,-31,28,-6,28,28,-38,-33,-32,-36,-37,28,28,-30,-29,]),'MINUS':([0,2,3,4,5,6,8,9,10,11,13,16,18,25,27,28,29,30,31,32,33,34,35,36,38,39,40,41,43,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,67,69,71,76,77,78,79,80,81,82,83,89,90,91,92,93,95,97,101,102,103,104,107,108,109,110,115,116,117,121,122,123,124,125,126,127,128,],[29,29,-4,-5,-11,-12,-24,-25,-26,-27,29,29,-52,29,50,29,29,-49,-50,-53,-54,-55,29,29,-2,-3,-13,29,29,29,29,29,29,29,29,29,29,29,29,-46,-47,-51,-60,-61,29,29,-14,29,29,-39,-40,-41,-42,50,50,50,50,-56,29,-59,-34,-35,29,29,-62,29,-63,29,29,-31,29,-6,29,29,-38,-33,-32,-36,-37,29,29,-30,-29,]),'NAME':([0,2,3,4,5,6,8,9,10,11,13,16,17,25,28,29,35,36,38,39,40,41,43,46,48,49,50,51,52,53,54,55,56,62,63,67,69,71,73,90,92,93,95,97,102,104,107,108,109,110,112,115,116,117,121,122,123,124,125,126,127,128,],[18,18,-4,-5,-11,-12,-24,-25,-26,-27,18,18,45,18,18,18,18,18,-2,-3,-13,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-14,18,18,100,18,-34,-35,18,18,18,18,18,-31,18,-6,120,18,18,-38,-33,-32,-36,-37,18,18,-30,-29,]),'BINARY':([0,2,3,4,5,6,8,9,10,11,13,16,25,28,29,35,36,38,39,40,41,43,46,48,49,50,51,52,53,54,55,56,62,63,67,69,71,90,92,93,95,97,102,104,107,108,109,110,115,116,117,121,122,123,124,125,126,127,128,],[32,32,-4,-5,-11,-12,-24,-25,-26,-27,32,32,32,32,32,32,32,-2,-3,-13,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-14,32,32,32,-34,-35,32,32,32,32,32,-31,32,-6,32,32,-38,-33,-32,-36,-37,32,32,-30,-29,]),'NUMBER':([0,2,3,4,5,6,8,9,10,11,13,16,25,28,29,35,36,38,39,40,41,43,46,48,49,50,51,52,53,54,55,56,62,63,67,69,71,90,92,93,95,97,102,104,107,108,109,110,115,116,117,121,122,123,124,125,126,127,128,],[33,33,-4,-5,-11,-12,-24,-25,-26,-27,33,33,33,33,33,33,33,-2,-3,-13,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-14,33,33,33,-34,-35,33,33,33,33,33,-31,33,-6,33,33,-38,-33,-32,-36,-37,33,33,-30,-29,]),'STRING':([0,2,3,4,5,6,8,9,10,11,13,16,25,28,29,35,36,38,39,40,41,43,46,48,49,50,51,52,53,54,55,56,62,63,67,69,71,90,92,93,95,97,102,104,107,108,109,110,115,116,117,121,122,123,124,125,126,127,128,],[34,34,-4,-5,-11,-12,-24,-25,-26,-27,34,34,34,34,34,34,34,-2,-3,-13,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-14,34,34,34,-34,-35,34,34,34,34,34,-31,34,-6,34,34,-38,-33,-32,-36,-37,34,34,-30,-29,]),'LBRACK':([0,2,3,4,5,6,8,9,10,11,13,16,18,25,28,29,31,32,33,34,35,36,38,39,40,41,43,46,48,49,50,51,52,53,54,55,56,62,63,67,69,71,89,90,91,92,93,95,97,102,104,107,108,109,110,115,116,117,121,122,123,124,125,126,127,128,],[35,35,-4,-5,-11,-12,-24,-25,-26,-27,35,35,-52,35,35,35,63,-53,-54,-55,35,35,-2,-3,-13,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-14,35,35,-56,35,-59,-34,-35,35,35,35,35,35,-31,35,-6,35,35,-38,-33,-32,-36,-37,35,35,-30,-29,]),'LPAR':([0,2,3,4,5,6,8,9,10,11,13,16,18,25,28,29,31,32,33,34,35,36,38,39,40,41,43,45,46,48,49,50,51,52,53,54,55,56,62,63,67,69,71,89,90,91,92,93,95,97,102,104,107,108,109,110,115,116,117,121,122,123,124,125,126,127,128,],[36,36,-4,-5,-11,-12,-24,-25,-26,-27,36,36,-52,36,36,36,62,-53,-54,-55,36,36,-2,-3,-13,36,36,73,36,36,36,36,36,36,36,36,36,36,36,36,-14,36,36,-56,36,-59,-34,-35,36,36,36,36,36,-31,36,-6,36,36,-38,-33,-32,-36,-37,36,36,-30,-29,]),'$end':([1,37,],[0,-1,]),'ENDMARKER':([2,3,4,5,6,8,9,10,11,38,39,40,67,92,93,108,110,121,122,123,127,128,],[37,-4,-5,-11,-12,-24,-25,-26,-27,-2,-3,-13,-14,-34,-35,-31,-6,-33,-32,-36,-30,-29,]),'DEDENT':([5,6,8,9,10,11,40,67,92,93,108,110,116,117,121,122,123,124,127,128,],[-11,-12,-24,-25,-26,-27,-13,-14,-34,-35,-31,-6,123,-38,-33,-32,-36,-37,-30,-29,]),'SEMICOLON':([7,12,14,18,19,20,21,22,23,24,26,27,30,31,32,33,34,47,48,57,58,59,60,61,68,74,75,76,77,78,79,80,81,82,83,89,91,101,103,],[41,-16,-69,-52,-17,-18,-19,-22,-28,-21,-67,-70,-49,-50,-53,-54,-55,-23,-66,-46,-47,-51,-60,-61,-15,-20,-68,-39,-40,-41,-42,-43,-44,-45,-48,-56,-59,-62,-63,]),'COMMA':([14,18,26,27,30,31,32,33,34,57,58,59,60,61,65,75,76,77,78,79,80,81,82,83,84,85,86,89,91,99,100,101,103,113,120,],[-69,-52,48,-70,-49,-50,-53,-54,-55,-46,-47,-51,-60,-61,90,-68,-39,-40,-41,-42,-43,-44,-45,-48,102,-72,-73,-56,-59,112,-10,-62,-63,-71,-9,]),'ASSIGN':([14,18,24,26,27,30,31,32,33,34,48,57,58,59,60,61,75,76,77,78,79,80,81,82,83,89,91,101,103,],[-69,-52,46,-67,-70,-49,-50,-53,-54,-55,-66,-46,-47,-51,-60,-61,-68,-39,-40,-41,-42,-43,-44,-45,-48,-56,-59,-62,-63,]),'RPAR':([14,18,26,27,30,31,32,33,34,48,57,58,59,60,61,66,73,75,76,77,78,79,80,81,82,83,84,85,86,89,91,99,100,101,103,113,120,],[-69,-52,-67,-70,-49,-50,-53,-54,-55,-66,-46,-47,-51,-60,-61,91,98,-68,-39,-40,-41,-42,-43,-44,-45,-48,101,-72,-73,-56,-59,111,-10,-62,-63,-71,-9,]),'WHILE':([15,],[43,]),'MULT':([18,27,30,31,32,33,34,57,58,59,60,61,76,77,78,79,80,81,82,83,89,91,101,103,],[-52,51,-49,-50,-53,-54,-55,51,51,-51,-60,-61,51,51,-41,-42,51,51,51,51,-56,-59,-62,-63,]),'DIV':([18,27,30,31,32,33,34,57,58,59,60,61,76,77,78,79,80,81,82,83,89,91,101,103,],[-52,52,-49,-50,-53,-54,-55,52,52,-51,-60,-61,52,52,-41,-42,52,52,52,52,-56,-59,-62,-63,]),'LT':([18,27,30,31,32,33,34,57,58,59,60,61,76,77,78,79,80,81,82,83,89,91,101,103,],[-52,53,-49,-50,-53,-54,-55,-46,-47,-51,-60,-61,-39,-40,-41,-42,-43,-44,-45,53,-56,-59,-62,-63,]),'EQ':([18,27,30,31,32,33,34,44,57,58,59,60,61,76,77,78,79,80,81,82,83,89,91,101,103,],[-52,54,-49,-50,-53,-54,-55,71,-46,-47,-51,-60,-61,-39,-40,-41,-42,-43,-44,-45,54,-56,-59,-62,-63,]),'GT':([18,27,30,31,32,33,34,57,58,59,60,61,76,77,78,79,80,81,82,83,89,91,101,103,],[-52,55,-49,-50,-53,-54,-55,-46,-47,-51,-60,-61,-39,-40,-41,-42,-43,-44,-45,55,-56,-59,-62,-63,]),'APPEND':([18,27,30,31,32,33,34,57,58,59,60,61,76,77,78,79,80,81,82,83,89,91,101,103,],[-52,56,-49,-50,-53,-54,-55,-46,-47,-51,-60,-61,-39,-40,-41,-42,-43,-44,-45,56,-56,-59,-62,-63,]),'COLON':([18,27,30,31,32,33,34,42,57,58,59,60,61,70,72,76,77,78,79,80,81,82,83,88,89,91,98,101,103,106,111,118,119,],[-52,-70,-49,-50,-53,-54,-55,69,-46,-47,-51,-60,-61,95,97,-39,-40,-41,-42,-43,-44,-45,-48,104,-56,-59,-7,-62,-63,115,-8,125,126,]),'RBRACK':([18,27,30,31,32,33,34,57,58,59,60,61,64,65,76,77,78,79,80,81,82,83,87,88,89,91,101,103,105,114,],[-52,-70,-49,-50,-53,-54,-55,-46,-47,-51,-60,-61,89,-58,-39,-40,-41,-42,-43,-44,-45,-48,103,-65,-56,-59,-62,-63,-57,-64,]),'TO':([18,27,30,31,32,33,34,57,58,59,60,61,76,77,78,79,80,81,82,83,89,91,96,101,103,],[-52,-70,-49,-50,-53,-54,-55,-46,-47,-51,-60,-61,-39,-40,-41,-42,-43,-44,-45,-48,-56,-59,109,-62,-63,]),'ELSE':([40,67,92,93,108,123,],[-13,-14,106,-35,118,-36,]),'INDENT':([94,],[107,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'file_input_end':([0,],[1,]),'file_input':([0,],[2,]),'stmt':([0,2,107,116,],[4,39,117,124,]),'simple_stmt':([0,2,69,95,97,107,115,116,125,126,],[5,5,93,93,93,5,93,5,93,93,]),'compound_stmt':([0,2,107,116,],[6,6,6,6,]),'small_stmts':([0,2,69,95,97,107,115,116,125,126,],[7,7,7,7,7,7,7,7,7,7,]),'if_stmt':([0,2,107,115,116,],[8,8,8,122,8,]),'while_stmt':([0,2,107,116,],[9,9,9,9,]),'for_stmt':([0,2,107,116,],[10,10,10,10,]),'funcdef':([0,2,107,116,],[11,11,11,11,]),'small_stmt':([0,2,41,69,95,97,107,115,116,125,126,],[12,12,68,12,12,12,12,12,12,12,12,]),'test':([0,2,13,16,25,35,36,41,43,46,48,62,63,69,71,90,95,97,102,104,107,109,115,116,125,126,],[14,14,42,44,14,65,14,14,70,14,75,86,88,14,96,65,14,14,86,114,14,119,14,14,14,14,]),'flow_stmt':([0,2,41,69,95,97,107,115,116,125,126,],[19,19,19,19,19,19,19,19,19,19,19,]),'break_stmt':([0,2,41,69,95,97,107,115,116,125,126,],[20,20,20,20,20,20,20,20,20,20,20,]),'expr_stmt':([0,2,41,69,95,97,107,115,116,125,126,],[21,21,21,21,21,21,21,21,21,21,21,]),'return_stmt':([0,2,41,69,95,97,107,115,116,125,126,],[22,22,22,22,22,22,22,22,22,22,22,]),'testlist':([0,2,25,36,41,46,69,95,97,107,115,116,125,126,],[24,24,47,66,24,74,24,24,24,24,24,24,24,24,]),'testlist_multi':([0,2,25,36,41,46,69,95,97,107,115,116,125,126,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'comparison':([0,2,13,16,25,28,29,35,36,41,43,46,48,49,50,51,52,53,54,55,56,62,63,69,71,90,95,97,102,104,107,109,115,116,125,126,],[27,27,27,27,27,57,58,27,27,27,27,27,27,76,77,78,79,80,81,82,83,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'power':([0,2,13,16,25,28,29,35,36,41,43,46,48,49,50,51,52,53,54,55,56,62,63,69,71,90,95,97,102,104,107,109,115,116,125,126,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'atom':([0,2,13,16,25,28,29,35,36,41,43,46,48,49,50,51,52,53,54,55,56,62,63,69,71,90,95,97,102,104,107,109,115,116,125,126,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'trailer':([31,],[59,]),'trailer_arglist':([31,],[60,]),'trailer_subscript':([31,],[61,]),'listmaker':([35,90,],[64,105,]),'parameters':([45,],[72,]),'arglist':([62,],[84,]),'argument':([62,102,],[85,113,]),'subscript':([63,],[87,]),'suite':([69,95,97,115,125,126,],[92,108,110,121,127,128,]),'varargslist':([73,],[99,]),'stmts':([107,],[116,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> file_input_end","S'",1,None,None,None),
  ('file_input_end -> file_input ENDMARKER','file_input_end',2,'p_file_input_end','parser.py',125),
  ('file_input -> file_input NEWLINE','file_input',2,'p_file_input','parser.py',130),
  ('file_input -> file_input stmt','file_input',2,'p_file_input','parser.py',131),
  ('file_input -> NEWLINE','file_input',1,'p_file_input','parser.py',132),
  ('file_input -> stmt','file_input',1,'p_file_input','parser.py',133),
  ('funcdef -> DEF NAME parameters COLON suite','funcdef',5,'p_funcdef','parser.py',149),
  ('parameters -> LPAR RPAR','parameters',2,'p_parameters','parser.py',154),
  ('parameters -> LPAR varargslist RPAR','parameters',3,'p_parameters','parser.py',155),
  ('varargslist -> varargslist COMMA NAME','varargslist',3,'p_varargslist','parser.py',167),
  ('varargslist -> NAME','varargslist',1,'p_varargslist','parser.py',168),
  ('stmt -> simple_stmt','stmt',1,'p_stmt_simple','parser.py',176),
  ('stmt -> compound_stmt','stmt',1,'p_stmt_compound','parser.py',181),
  ('simple_stmt -> small_stmts NEWLINE','simple_stmt',2,'p_simple_stmt','parser.py',186),
  ('simple_stmt -> small_stmts SEMICOLON NEWLINE','simple_stmt',3,'p_simple_stmt','parser.py',187),
  ('small_stmts -> small_stmts SEMICOLON small_stmt','small_stmts',3,'p_small_stmts','parser.py',191),
  ('small_stmts -> small_stmt','small_stmts',1,'p_small_stmts','parser.py',192),
  ('small_stmt -> flow_stmt','small_stmt',1,'p_small_stmt','parser.py',201),
  ('small_stmt -> break_stmt','small_stmt',1,'p_small_stmt','parser.py',202),
  ('small_stmt -> expr_stmt','small_stmt',1,'p_small_stmt','parser.py',203),
  ('expr_stmt -> testlist ASSIGN testlist','expr_stmt',3,'p_expr_stmt','parser.py',214),
  ('expr_stmt -> testlist','expr_stmt',1,'p_expr_stmt','parser.py',215),
  ('flow_stmt -> return_stmt','flow_stmt',1,'p_flow_stmt','parser.py',232),
  ('return_stmt -> RETURN testlist','return_stmt',2,'p_return_stmt','parser.py',237),
  ('compound_stmt -> if_stmt','compound_stmt',1,'p_compound_stmt','parser.py',242),
  ('compound_stmt -> while_stmt','compound_stmt',1,'p_compound_stmt','parser.py',243),
  ('compound_stmt -> for_stmt','compound_stmt',1,'p_compound_stmt','parser.py',244),
  ('compound_stmt -> funcdef','compound_stmt',1,'p_compound_stmt','parser.py',245),
  ('break_stmt -> BREAK','break_stmt',1,'p_break_stmt','parser.py',250),
  ('for_stmt -> FOR test EQ test TO test COLON suite','for_stmt',8,'p_for_stmt','parser.py',255),
  ('while_stmt -> DO WHILE test COLON suite ELSE COLON suite','while_stmt',8,'p_while_stmt','parser.py',265),
  ('while_stmt -> DO WHILE test COLON suite','while_stmt',5,'p_while_stmt','parser.py',266),
  ('if_stmt -> IF test COLON suite ELSE COLON if_stmt','if_stmt',7,'p_if_stmt','parser.py',274),
  ('if_stmt -> IF test COLON suite ELSE COLON suite','if_stmt',7,'p_if_stmt','parser.py',275),
  ('if_stmt -> IF test COLON suite','if_stmt',4,'p_if_stmt','parser.py',276),
  ('suite -> simple_stmt','suite',1,'p_suite','parser.py',286),
  ('suite -> NEWLINE INDENT stmts DEDENT','suite',4,'p_suite','parser.py',287),
  ('stmts -> stmts stmt','stmts',2,'p_stmts','parser.py',295),
  ('stmts -> stmt','stmts',1,'p_stmts','parser.py',296),
  ('comparison -> comparison PLUS comparison','comparison',3,'p_comparison','parser.py',303),
  ('comparison -> comparison MINUS comparison','comparison',3,'p_comparison','parser.py',304),
  ('comparison -> comparison MULT comparison','comparison',3,'p_comparison','parser.py',305),
  ('comparison -> comparison DIV comparison','comparison',3,'p_comparison','parser.py',306),
  ('comparison -> comparison LT comparison','comparison',3,'p_comparison','parser.py',307),
  ('comparison -> comparison EQ comparison','comparison',3,'p_comparison','parser.py',308),
  ('comparison -> comparison GT comparison','comparison',3,'p_comparison','parser.py',309),
  ('comparison -> PLUS comparison','comparison',2,'p_comparison','parser.py',310),
  ('comparison -> MINUS comparison','comparison',2,'p_comparison','parser.py',311),
  ('comparison -> comparison APPEND comparison','comparison',3,'p_comparison','parser.py',312),
  ('comparison -> power','comparison',1,'p_comparison','parser.py',313),
  ('power -> atom','power',1,'p_power','parser.py',333),
  ('power -> atom trailer','power',2,'p_power','parser.py',334),
  ('atom -> NAME','atom',1,'p_atom_name','parser.py',356),
  ('atom -> BINARY','atom',1,'p_atom_number','parser.py',360),
  ('atom -> NUMBER','atom',1,'p_atom_number','parser.py',361),
  ('atom -> STRING','atom',1,'p_atom_number','parser.py',362),
  ('atom -> LBRACK listmaker RBRACK','atom',3,'p_atom_listmaker','parser.py',368),
  ('listmaker -> test COMMA listmaker','listmaker',3,'p_listmaker','parser.py',372),
  ('listmaker -> test','listmaker',1,'p_listmaker','parser.py',373),
  ('atom -> LPAR testlist RPAR','atom',3,'p_atom_tuple','parser.py',381),
  ('trailer -> trailer_arglist','trailer',1,'p_trailer','parser.py',393),
  ('trailer -> trailer_subscript','trailer',1,'p_trailer','parser.py',394),
  ('trailer_arglist -> LPAR arglist RPAR','trailer_arglist',3,'p_trailer_arglist','parser.py',399),
  ('trailer_subscript -> LBRACK subscript RBRACK','trailer_subscript',3,'p_trailer_subscript','parser.py',403),
  ('subscript -> test COLON test','subscript',3,'p_subscript','parser.py',409),
  ('subscript -> test','subscript',1,'p_subscript','parser.py',410),
  ('testlist -> testlist_multi COMMA','testlist',2,'p_testlist','parser.py',421),
  ('testlist -> testlist_multi','testlist',1,'p_testlist','parser.py',422),
  ('testlist_multi -> testlist_multi COMMA test','testlist_multi',3,'p_testlist_multi','parser.py',436),
  ('testlist_multi -> test','testlist_multi',1,'p_testlist_multi','parser.py',437),
  ('test -> comparison','test',1,'p_test','parser.py',452),
  ('arglist -> arglist COMMA argument','arglist',3,'p_arglist','parser.py',461),
  ('arglist -> argument','arglist',1,'p_arglist','parser.py',462),
  ('argument -> test','argument',1,'p_argument','parser.py',470),
]
