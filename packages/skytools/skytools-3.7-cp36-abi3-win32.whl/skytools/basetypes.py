"""Database tools.
"""

import io
from typing import IO, Any, Iterable, Mapping, Optional, Sequence, Tuple, Union

try:
    from typing import Protocol
except ImportError:
    Protocol = object   # type: ignore


ExecuteParams = Union[Sequence[Any], Mapping[str, Any]]


class DictRow(Protocol):
    """Allow both key and index-based access.

    Both Psycopg2 DictRow and PL/Python rows support this.
    """
    def keys(self) -> Iterable[str]: ...
    def values(self) -> Iterable[Any]: ...
    def items(self) -> Iterable[Tuple[str, Any]]: ...
    def __getitem__(self, key: Union[str, int]) -> Any: ...
    def __iter__(self) -> Iterable[str]: ...
    def __len__(self) -> int: ...
    def __contains__(self, key: str) -> bool: ...


class Cursor(Protocol):
    def execute(self, sql: str, params: Optional[ExecuteParams] = None) -> None: ...
    def fetchall(self) -> Sequence[DictRow]: ...
    def fetchone(self) -> DictRow: ...
    def copy_from(self, buf: IO[str], hdr: str) -> None: ...
    def copy_expert(self, sql: str, f: Union[IO[str], io.TextIOBase]) -> None: ...


class Connection(Protocol):
    def cursor(self) -> Cursor: ...
    def rollback(self) -> None: ...
    def commit(self) -> None: ...


class Runnable(Protocol):
    def run(self) -> None: ...


class HasFileno(Protocol):
    def fileno(self) -> int: ...


FileDescriptor = int
FileDescriptorLike = Union[int, HasFileno]

