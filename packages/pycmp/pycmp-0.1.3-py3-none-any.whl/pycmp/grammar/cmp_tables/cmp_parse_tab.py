
# cmp_parse_tab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "translation_unitright-right~right+ARRAY_DIV ARRAY_MUL ARRAY_POW ARRAY_RDIV BREAK CLEAR COMMENT CONSTANT ELSE ELSEIF END EQ_OP FOR FUNCTION GE_OP GLOBAL IDENTIFIER IF LE_OP NEWLINE NE_OP RETURN STRING_LITERAL TCOMMENT TRANSPOSE WHILE\n        primary_expression : identifier_expression\n                           | constant_expression\n                           | string_literal_expression\n                           | '(' expression ')'\n                           | '[' ']'\n                           | '[' array_list ']'\n        \n        identifier_expression : IDENTIFIER\n        \n        constant_expression : CONSTANT\n        \n        string_literal_expression : STRING_LITERAL\n        \n        postfix_expression : primary_expression\n                           | array_expression\n                           | postfix_expression TRANSPOSE\n        \n        index_expression : ':'\n                         | expression\n        \n        index_expression_list : index_expression\n                              | index_expression_list ',' index_expression\n        \n        array_expression : IDENTIFIER '(' index_expression_list ')'\n        \n        unary_expression : postfix_expression\n                         | unary_operator postfix_expression\n        \n        unary_operator : '+'\n                       | '-'\n                       | '~'\n        \n        multiplicative_expression : unary_expression\n                                  | multiplicative_expression '*' unary_expression\n                                  | multiplicative_expression '/' unary_expression\n                                  | multiplicative_expression '^' unary_expression\n                                  | multiplicative_expression ARRAY_MUL unary_expression\n                                  | multiplicative_expression ARRAY_DIV unary_expression\n                                  | multiplicative_expression ARRAY_RDIV unary_expression\n                                  | multiplicative_expression ARRAY_POW unary_expression\n        \n        additive_expression : multiplicative_expression\n                            | additive_expression '+' multiplicative_expression\n                            | additive_expression '-' multiplicative_expression\n        \n        relational_expression : additive_expression\n                              | relational_expression '<' additive_expression\n                              | relational_expression '>' additive_expression\n                              | relational_expression LE_OP additive_expression\n                              | relational_expression GE_OP additive_expression\n        \n        equality_expression : relational_expression\n                            | equality_expression EQ_OP relational_expression\n                            | equality_expression NE_OP relational_expression\n        \n        and_expression : equality_expression\n                       | and_expression '&' equality_expression\n        \n        or_expression : and_expression\n                      | or_expression '|' and_expression\n        \n        expression : or_expression\n                   | expression ':' or_expression\n        \n        assignment_expression : postfix_expression '=' expression\n        \n        eostmt : ','\n               | ';'\n               | NEWLINE\n        \n        statement : global_statement\n                  | clear_statement\n                  | assignment_statement\n                  | expression_statement\n                  | selection_statement\n                  | iteration_statement\n                  | jump_statement\n                  | func_statement\n                  | comment_statement\n        \n        comment_statement : COMMENT TCOMMENT\n        \n        statement_list : statement\n                       | statement_list statement\n                       | statement_list_error\n        \n        statement_list_error : statement_list error\n        \n        identifier_list : IDENTIFIER\n                        | identifier_list IDENTIFIER\n        \n        global_statement : GLOBAL identifier_list eostmt\n        \n        clear_statement : CLEAR identifier_list eostmt\n        \n        expression_statement : eostmt\n                             | expression eostmt\n        \n        assignment_statement : assignment_expression eostmt\n        \n        array_element : expression\n                      | expression_statement\n        \n        array_list : array_element\n                   | array_list array_element\n        \n        selection_statement : IF expression statement_list END eostmt\n                            | IF expression statement_list ELSE statement_list END eostmt\n                            | IF expression statement_list elseif_clause END eostmt\n                            | IF expression statement_list elseif_clause ELSE statement_list END eostmt\n                            | selection_statement_invoke_error\n                            | selection_statement_error\n        \n        selection_statement_error : IF error\n        \n        selection_statement_invoke_error : IF expression statement_list\n        \n        elseif_clause : ELSEIF expression statement_list\n                      | elseif_clause ELSEIF expression statement_list\n        \n        iteration_statement : WHILE expression statement_list END eostmt\n                            | FOR IDENTIFIER '=' expression statement_list END eostmt\n                            | FOR '(' IDENTIFIER '=' expression ')' statement_list END eostmt\n        \n        jump_statement : BREAK eostmt\n                       | RETURN eostmt\n        \n        translation_unit : statement_list\n        \n        func_identifier_list : IDENTIFIER\n                             | func_identifier_list ',' IDENTIFIER\n        \n        func_return_list : IDENTIFIER\n                         | '[' func_identifier_list ']'\n        \n        func_declare_lhs : IDENTIFIER\n                         | IDENTIFIER '(' ')'\n                         | IDENTIFIER '(' func_identifier_list ')'\n        \n        func_declare : func_declare_lhs\n                     | func_return_list '=' func_declare_lhs\n                     | func_declare_invoke_error\n        \n        func_declare_invoke_error : func_return_list '='\n                                  | func_return_list\n        \n        func_statement : FUNCTION func_declare eostmt statement_list END\n                       | func_statement_error\n        \n        func_statement_error : FUNCTION error eostmt statement_list END\n        "
    
_lr_action_items = {'GLOBAL':([0,2,3,4,5,6,7,8,9,10,11,12,13,15,20,21,24,29,32,33,34,35,36,37,38,39,40,41,43,44,45,46,47,48,51,54,55,59,60,62,63,64,65,70,71,79,81,84,104,105,107,108,109,110,117,118,119,125,126,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,149,151,153,154,161,162,164,166,167,168,171,172,176,177,178,179,181,182,184,185,186,187,189,],[14,14,-62,-64,-52,-53,-54,-55,-56,-57,-58,-59,-60,-70,-81,-82,-7,-106,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,-42,-8,-9,-39,-34,-31,-23,-63,-65,-72,-71,14,-83,-18,14,-90,-91,-61,-12,-5,-19,-68,-69,-47,14,14,-4,14,14,-45,-43,-6,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,14,14,-17,14,14,-77,14,14,14,-87,14,-105,-107,-79,14,14,14,14,-78,14,-88,14,-80,-89,]),'CLEAR':([0,2,3,4,5,6,7,8,9,10,11,12,13,15,20,21,24,29,32,33,34,35,36,37,38,39,40,41,43,44,45,46,47,48,51,54,55,59,60,62,63,64,65,70,71,79,81,84,104,105,107,108,109,110,117,118,119,125,126,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,149,151,153,154,161,162,164,166,167,168,171,172,176,177,178,179,181,182,184,185,186,187,189,],[16,16,-62,-64,-52,-53,-54,-55,-56,-57,-58,-59,-60,-70,-81,-82,-7,-106,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,-42,-8,-9,-39,-34,-31,-23,-63,-65,-72,-71,16,-83,-18,16,-90,-91,-61,-12,-5,-19,-68,-69,-47,16,16,-4,16,16,-45,-43,-6,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,16,16,-17,16,16,-77,16,16,16,-87,16,-105,-107,-79,16,16,16,16,-78,16,-88,16,-80,-89,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,15,20,21,24,29,32,33,34,35,36,37,38,39,40,41,43,44,45,46,47,48,51,54,55,59,60,62,63,64,65,70,71,79,81,84,104,105,107,108,109,110,117,118,119,125,126,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,149,151,153,154,161,162,164,166,167,168,171,172,176,177,178,179,181,182,184,185,186,187,189,],[19,19,-62,-64,-52,-53,-54,-55,-56,-57,-58,-59,-60,-70,-81,-82,-7,-106,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,-42,-8,-9,-39,-34,-31,-23,-63,-65,-72,-71,19,-83,-18,19,-90,-91,-61,-12,-5,-19,-68,-69,-47,19,19,-4,19,19,-45,-43,-6,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,19,19,-17,19,19,-77,19,19,19,-87,19,-105,-107,-79,19,19,19,19,-78,19,-88,19,-80,-89,]),'WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,13,15,20,21,24,29,32,33,34,35,36,37,38,39,40,41,43,44,45,46,47,48,51,54,55,59,60,62,63,64,65,70,71,79,81,84,104,105,107,108,109,110,117,118,119,125,126,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,149,151,153,154,161,162,164,166,167,168,171,172,176,177,178,179,181,182,184,185,186,187,189,],[22,22,-62,-64,-52,-53,-54,-55,-56,-57,-58,-59,-60,-70,-81,-82,-7,-106,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,-42,-8,-9,-39,-34,-31,-23,-63,-65,-72,-71,22,-83,-18,22,-90,-91,-61,-12,-5,-19,-68,-69,-47,22,22,-4,22,22,-45,-43,-6,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,22,22,-17,22,22,-77,22,22,22,-87,22,-105,-107,-79,22,22,22,22,-78,22,-88,22,-80,-89,]),'FOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,15,20,21,24,29,32,33,34,35,36,37,38,39,40,41,43,44,45,46,47,48,51,54,55,59,60,62,63,64,65,70,71,79,81,84,104,105,107,108,109,110,117,118,119,125,126,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,149,151,153,154,161,162,164,166,167,168,171,172,176,177,178,179,181,182,184,185,186,187,189,],[23,23,-62,-64,-52,-53,-54,-55,-56,-57,-58,-59,-60,-70,-81,-82,-7,-106,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,-42,-8,-9,-39,-34,-31,-23,-63,-65,-72,-71,23,-83,-18,23,-90,-91,-61,-12,-5,-19,-68,-69,-47,23,23,-4,23,23,-45,-43,-6,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,23,23,-17,23,23,-77,23,23,23,-87,23,-105,-107,-79,23,23,23,23,-78,23,-88,23,-80,-89,]),'BREAK':([0,2,3,4,5,6,7,8,9,10,11,12,13,15,20,21,24,29,32,33,34,35,36,37,38,39,40,41,43,44,45,46,47,48,51,54,55,59,60,62,63,64,65,70,71,79,81,84,104,105,107,108,109,110,117,118,119,125,126,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,149,151,153,154,161,162,164,166,167,168,171,172,176,177,178,179,181,182,184,185,186,187,189,],[26,26,-62,-64,-52,-53,-54,-55,-56,-57,-58,-59,-60,-70,-81,-82,-7,-106,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,-42,-8,-9,-39,-34,-31,-23,-63,-65,-72,-71,26,-83,-18,26,-90,-91,-61,-12,-5,-19,-68,-69,-47,26,26,-4,26,26,-45,-43,-6,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,26,26,-17,26,26,-77,26,26,26,-87,26,-105,-107,-79,26,26,26,26,-78,26,-88,26,-80,-89,]),'RETURN':([0,2,3,4,5,6,7,8,9,10,11,12,13,15,20,21,24,29,32,33,34,35,36,37,38,39,40,41,43,44,45,46,47,48,51,54,55,59,60,62,63,64,65,70,71,79,81,84,104,105,107,108,109,110,117,118,119,125,126,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,149,151,153,154,161,162,164,166,167,168,171,172,176,177,178,179,181,182,184,185,186,187,189,],[27,27,-62,-64,-52,-53,-54,-55,-56,-57,-58,-59,-60,-70,-81,-82,-7,-106,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,-42,-8,-9,-39,-34,-31,-23,-63,-65,-72,-71,27,-83,-18,27,-90,-91,-61,-12,-5,-19,-68,-69,-47,27,27,-4,27,27,-45,-43,-6,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,27,27,-17,27,27,-77,27,27,27,-87,27,-105,-107,-79,27,27,27,27,-78,27,-88,27,-80,-89,]),'FUNCTION':([0,2,3,4,5,6,7,8,9,10,11,12,13,15,20,21,24,29,32,33,34,35,36,37,38,39,40,41,43,44,45,46,47,48,51,54,55,59,60,62,63,64,65,70,71,79,81,84,104,105,107,108,109,110,117,118,119,125,126,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,149,151,153,154,161,162,164,166,167,168,171,172,176,177,178,179,181,182,184,185,186,187,189,],[28,28,-62,-64,-52,-53,-54,-55,-56,-57,-58,-59,-60,-70,-81,-82,-7,-106,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,-42,-8,-9,-39,-34,-31,-23,-63,-65,-72,-71,28,-83,-18,28,-90,-91,-61,-12,-5,-19,-68,-69,-47,28,28,-4,28,28,-45,-43,-6,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,28,28,-17,28,28,-77,28,28,28,-87,28,-105,-107,-79,28,28,28,28,-78,28,-88,28,-80,-89,]),'COMMENT':([0,2,3,4,5,6,7,8,9,10,11,12,13,15,20,21,24,29,32,33,34,35,36,37,38,39,40,41,43,44,45,46,47,48,51,54,55,59,60,62,63,64,65,70,71,79,81,84,104,105,107,108,109,110,117,118,119,125,126,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,149,151,153,154,161,162,164,166,167,168,171,172,176,177,178,179,181,182,184,185,186,187,189,],[30,30,-62,-64,-52,-53,-54,-55,-56,-57,-58,-59,-60,-70,-81,-82,-7,-106,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,-42,-8,-9,-39,-34,-31,-23,-63,-65,-72,-71,30,-83,-18,30,-90,-91,-61,-12,-5,-19,-68,-69,-47,30,30,-4,30,30,-45,-43,-6,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,30,30,-17,30,30,-77,30,30,30,-87,30,-105,-107,-79,30,30,30,30,-78,30,-88,30,-80,-89,]),',':([0,2,3,4,5,6,7,8,9,10,11,12,13,15,17,18,20,21,24,26,27,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,54,55,56,57,58,59,60,62,63,64,65,70,71,72,73,74,75,76,77,79,81,84,85,86,87,88,104,105,106,107,108,109,110,113,114,115,116,117,118,119,120,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,148,149,151,153,154,155,156,157,158,159,161,162,163,164,166,167,168,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,],[32,32,-62,-64,-52,-53,-54,-55,-56,-57,-58,-59,-60,-70,32,32,-81,-82,-7,32,32,-106,-18,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,32,-42,-8,-9,-39,-34,-31,-23,-63,-65,32,-66,32,-72,-71,32,-83,-18,32,-90,-91,32,32,-100,-104,-102,-95,-61,-12,-5,32,-75,32,-74,-19,-68,-67,-69,-47,32,32,152,-15,-13,-14,-4,32,32,-103,160,-93,-48,-45,-43,-6,-76,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,32,32,32,32,-17,32,32,-101,-97,-98,160,-96,-77,32,32,32,32,-87,32,-16,-105,-107,-99,-94,32,-79,32,32,32,32,32,-78,32,32,-88,32,-80,32,-89,]),';':([0,2,3,4,5,6,7,8,9,10,11,12,13,15,17,18,20,21,24,26,27,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,54,55,56,57,58,59,60,62,63,64,65,70,71,72,73,74,75,76,77,79,81,84,85,86,87,88,104,105,106,107,108,109,110,117,118,119,120,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,148,149,151,153,154,155,156,157,159,161,162,163,164,166,167,168,171,172,173,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,],[33,33,-62,-64,-52,-53,-54,-55,-56,-57,-58,-59,-60,-70,33,33,-81,-82,-7,33,33,-106,-18,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,33,-42,-8,-9,-39,-34,-31,-23,-63,-65,33,-66,33,-72,-71,33,-83,-18,33,-90,-91,33,33,-100,-104,-102,-95,-61,-12,-5,33,-75,33,-74,-19,-68,-67,-69,-47,33,33,-4,33,33,-103,-48,-45,-43,-6,-76,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,33,33,33,33,-17,33,33,-101,-97,-98,-96,-77,33,33,33,33,-87,33,-105,-107,-99,33,-79,33,33,33,33,33,-78,33,33,-88,33,-80,33,-89,]),'NEWLINE':([0,2,3,4,5,6,7,8,9,10,11,12,13,15,17,18,20,21,24,26,27,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,54,55,56,57,58,59,60,62,63,64,65,70,71,72,73,74,75,76,77,79,81,84,85,86,87,88,104,105,106,107,108,109,110,117,118,119,120,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,148,149,151,153,154,155,156,157,159,161,162,163,164,166,167,168,171,172,173,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,],[34,34,-62,-64,-52,-53,-54,-55,-56,-57,-58,-59,-60,-70,34,34,-81,-82,-7,34,34,-106,-18,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,34,-42,-8,-9,-39,-34,-31,-23,-63,-65,34,-66,34,-72,-71,34,-83,-18,34,-90,-91,34,34,-100,-104,-102,-95,-61,-12,-5,34,-75,34,-74,-19,-68,-67,-69,-47,34,34,-4,34,34,-103,-48,-45,-43,-6,-76,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,34,34,34,34,-17,34,34,-101,-97,-98,-96,-77,34,34,34,34,-87,34,-105,-107,-99,34,-79,34,34,34,34,34,-78,34,34,-88,34,-80,34,-89,]),'(':([0,2,3,4,5,6,7,8,9,10,11,12,13,15,19,20,21,22,23,24,25,29,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,59,60,61,62,63,64,65,68,70,71,77,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,109,110,111,117,118,119,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,147,149,150,151,152,153,154,156,161,162,164,165,166,167,168,171,172,176,177,178,179,181,182,184,185,186,187,189,],[25,25,-62,-64,-52,-53,-54,-55,-56,-57,-58,-59,-60,-70,25,-81,-82,25,67,68,25,-106,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,25,-42,-8,-9,-39,-34,-31,-20,-21,-23,25,-22,-63,-65,-72,-71,25,25,-83,-18,25,25,-90,-91,121,-61,25,-12,25,25,-5,25,-75,-73,-74,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-19,-68,-69,-47,25,25,25,-4,25,25,-45,-43,-6,-76,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,25,25,25,25,-17,25,25,25,121,-77,25,25,25,25,-87,25,-105,-107,-79,25,25,25,25,-78,25,-88,25,-80,-89,]),'[':([0,2,3,4,5,6,7,8,9,10,11,12,13,15,19,20,21,22,24,25,28,29,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,59,60,61,62,63,64,65,68,70,71,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,109,110,111,117,118,119,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,147,149,150,151,152,153,154,161,162,164,165,166,167,168,171,172,176,177,178,179,181,182,184,185,186,187,189,],[42,42,-62,-64,-52,-53,-54,-55,-56,-57,-58,-59,-60,-70,42,-81,-82,42,-7,42,78,-106,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,42,-42,-8,-9,-39,-34,-31,-20,-21,-23,42,-22,-63,-65,-72,-71,42,42,-83,-18,42,42,-90,-91,-61,42,-12,42,42,-5,42,-75,-73,-74,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-19,-68,-69,-47,42,42,42,-4,42,42,-45,-43,-6,-76,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,42,42,42,42,-17,42,42,42,-77,42,42,42,42,-87,42,-105,-107,-79,42,42,42,42,-78,42,-88,42,-80,-89,]),'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,19,20,21,22,23,24,25,28,29,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,70,71,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,117,118,119,120,121,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,147,149,150,151,152,153,154,160,161,162,164,165,166,167,168,171,172,176,177,178,179,181,182,184,185,186,187,189,],[24,24,-62,-64,-52,-53,-54,-55,-56,-57,-58,-59,-60,57,-70,57,24,-81,-82,24,66,-7,24,77,-106,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,24,-42,-8,-9,-39,-34,-31,-20,-21,-23,24,-22,-63,-65,106,-66,106,-72,-71,24,24,-83,-18,24,112,24,-90,-91,123,-61,24,-12,24,24,-5,24,-75,-73,-74,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,-19,-68,-67,-69,-47,24,24,24,-4,24,24,156,123,-45,-43,-6,-76,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,24,24,24,24,-17,24,24,24,174,-77,24,24,24,24,-87,24,-105,-107,-79,24,24,24,24,-78,24,-88,24,-80,-89,]),'CONSTANT':([0,2,3,4,5,6,7,8,9,10,11,12,13,15,19,20,21,22,24,25,29,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,59,60,61,62,63,64,65,68,70,71,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,109,110,111,117,118,119,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,147,149,150,151,152,153,154,161,162,164,165,166,167,168,171,172,176,177,178,179,181,182,184,185,186,187,189,],[44,44,-62,-64,-52,-53,-54,-55,-56,-57,-58,-59,-60,-70,44,-81,-82,44,-7,44,-106,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,44,-42,-8,-9,-39,-34,-31,-20,-21,-23,44,-22,-63,-65,-72,-71,44,44,-83,-18,44,44,-90,-91,-61,44,-12,44,44,-5,44,-75,-73,-74,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-19,-68,-69,-47,44,44,44,-4,44,44,-45,-43,-6,-76,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,44,44,44,44,-17,44,44,44,-77,44,44,44,44,-87,44,-105,-107,-79,44,44,44,44,-78,44,-88,44,-80,-89,]),'STRING_LITERAL':([0,2,3,4,5,6,7,8,9,10,11,12,13,15,19,20,21,22,24,25,29,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,59,60,61,62,63,64,65,68,70,71,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,109,110,111,117,118,119,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,147,149,150,151,152,153,154,161,162,164,165,166,167,168,171,172,176,177,178,179,181,182,184,185,186,187,189,],[45,45,-62,-64,-52,-53,-54,-55,-56,-57,-58,-59,-60,-70,45,-81,-82,45,-7,45,-106,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,45,-42,-8,-9,-39,-34,-31,-20,-21,-23,45,-22,-63,-65,-72,-71,45,45,-83,-18,45,45,-90,-91,-61,45,-12,45,45,-5,45,-75,-73,-74,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-19,-68,-69,-47,45,45,45,-4,45,45,-45,-43,-6,-76,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,45,45,45,45,-17,45,45,45,-77,45,45,45,45,-87,45,-105,-107,-79,45,45,45,45,-78,45,-88,45,-80,-89,]),'+':([0,2,3,4,5,6,7,8,9,10,11,12,13,15,19,20,21,22,24,25,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,54,55,59,60,61,62,63,64,65,68,70,71,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,109,110,111,117,118,119,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,147,149,150,151,152,153,154,161,162,164,165,166,167,168,171,172,176,177,178,179,181,182,184,185,186,187,189,],[49,49,-62,-64,-52,-53,-54,-55,-56,-57,-58,-59,-60,-70,49,-81,-82,49,-7,49,-106,-18,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,49,-42,-8,-9,-39,95,-31,-23,-63,-65,-72,-71,49,49,-83,-18,49,49,-90,-91,-61,49,-12,49,49,-5,49,-75,-73,-74,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-19,-68,-69,-47,49,49,49,-4,49,49,-45,-43,-6,-76,-40,-41,95,95,95,95,-32,-33,-24,-25,-26,-27,-28,-29,-30,49,49,49,49,-17,49,49,49,-77,49,49,49,49,-87,49,-105,-107,-79,49,49,49,49,-78,49,-88,49,-80,-89,]),'-':([0,2,3,4,5,6,7,8,9,10,11,12,13,15,19,20,21,22,24,25,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,54,55,59,60,61,62,63,64,65,68,70,71,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,109,110,111,117,118,119,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,147,149,150,151,152,153,154,161,162,164,165,166,167,168,171,172,176,177,178,179,181,182,184,185,186,187,189,],[50,50,-62,-64,-52,-53,-54,-55,-56,-57,-58,-59,-60,-70,50,-81,-82,50,-7,50,-106,-18,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,50,-42,-8,-9,-39,96,-31,-23,-63,-65,-72,-71,50,50,-83,-18,50,50,-90,-91,-61,50,-12,50,50,-5,50,-75,-73,-74,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-19,-68,-69,-47,50,50,50,-4,50,50,-45,-43,-6,-76,-40,-41,96,96,96,96,-32,-33,-24,-25,-26,-27,-28,-29,-30,50,50,50,50,-17,50,50,50,-77,50,50,50,50,-87,50,-105,-107,-79,50,50,50,50,-78,50,-88,50,-80,-89,]),'~':([0,2,3,4,5,6,7,8,9,10,11,12,13,15,19,20,21,22,24,25,29,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,54,55,59,60,61,62,63,64,65,68,70,71,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,109,110,111,117,118,119,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,147,149,150,151,152,153,154,161,162,164,165,166,167,168,171,172,176,177,178,179,181,182,184,185,186,187,189,],[53,53,-62,-64,-52,-53,-54,-55,-56,-57,-58,-59,-60,-70,53,-81,-82,53,-7,53,-106,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,53,-42,-8,-9,-39,-34,-31,-23,-63,-65,-72,-71,53,53,-83,-18,53,53,-90,-91,-61,53,-12,53,53,-5,53,-75,-73,-74,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,-19,-68,-69,-47,53,53,53,-4,53,53,-45,-43,-6,-76,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,53,53,53,53,-17,53,53,53,-77,53,53,53,53,-87,53,-105,-107,-79,53,53,53,53,-78,53,-88,53,-80,-89,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,15,20,21,29,32,33,34,54,55,59,60,63,70,71,79,105,107,109,161,167,171,172,176,182,185,187,189,],[0,-92,-62,-64,-52,-53,-54,-55,-56,-57,-58,-59,-60,-70,-81,-82,-106,-49,-50,-51,-63,-65,-72,-71,-83,-90,-91,-61,-68,-69,-84,-77,-87,-105,-107,-79,-78,-88,-80,-89,]),'error':([2,3,4,5,6,7,8,9,10,11,12,13,15,19,20,21,28,29,32,33,34,54,55,59,60,63,70,71,79,105,107,109,110,153,154,161,162,167,168,171,172,176,177,179,182,184,185,186,187,189,],[55,-62,-64,-52,-53,-54,-55,-56,-57,-58,-59,-60,-70,63,-81,-82,73,-106,-49,-50,-51,-63,-65,-72,-71,-83,-90,-91,-61,-68,-69,55,55,55,55,-77,55,-87,55,-105,-107,-79,55,55,-78,55,-88,55,-80,-89,]),'END':([3,4,5,6,7,8,9,10,11,12,13,15,20,21,29,32,33,34,54,55,59,60,63,70,71,79,105,107,109,110,146,153,154,161,162,167,168,171,172,176,177,179,182,184,185,186,187,189,],[-62,-64,-52,-53,-54,-55,-56,-57,-58,-59,-60,-70,-81,-82,-106,-49,-50,-51,-63,-65,-72,-71,-83,-90,-91,-61,-68,-69,144,148,163,171,172,-77,175,-87,180,-105,-107,-79,183,-85,-78,-86,-88,188,-80,-89,]),'ELSE':([3,4,5,6,7,8,9,10,11,12,13,15,20,21,29,32,33,34,54,55,59,60,63,70,71,79,105,107,109,146,161,167,171,172,176,179,182,184,185,187,189,],[-62,-64,-52,-53,-54,-55,-56,-57,-58,-59,-60,-70,-81,-82,-106,-49,-50,-51,-63,-65,-72,-71,-83,-90,-91,-61,-68,-69,145,164,-77,-87,-105,-107,-79,-85,-78,-86,-88,-80,-89,]),'ELSEIF':([3,4,5,6,7,8,9,10,11,12,13,15,20,21,29,32,33,34,54,55,59,60,63,70,71,79,105,107,109,146,161,167,171,172,176,179,182,184,185,187,189,],[-62,-64,-52,-53,-54,-55,-56,-57,-58,-59,-60,-70,-81,-82,-106,-49,-50,-51,-63,-65,-72,-71,-83,-90,-91,-61,-68,-69,147,165,-77,-87,-105,-107,-79,-85,-78,-86,-88,-80,-89,]),']':([15,24,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,60,64,81,84,85,86,87,88,104,108,117,122,123,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,151,174,],[-70,-7,-49,-50,-51,-46,-10,-11,-44,-1,-2,-3,84,-42,-8,-9,-39,-34,-31,-23,-71,-18,-12,-5,127,-75,-73,-74,-19,-47,-4,159,-93,-45,-43,-6,-76,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,-17,-94,]),':':([18,24,31,35,36,37,38,39,40,41,43,44,45,46,47,48,51,62,64,65,68,69,81,84,87,104,108,116,117,124,125,126,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,149,151,152,166,169,178,],[61,-7,-18,-46,-10,-11,-44,-1,-2,-3,-42,-8,-9,-39,-34,-31,-23,61,-18,61,115,61,-12,-5,61,-19,-47,61,-4,61,-45,-43,-6,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,61,-17,115,61,61,61,]),'=':([24,31,36,37,39,40,41,44,45,66,75,77,81,84,112,117,127,151,159,],[-7,80,-10,-11,-1,-2,-3,-8,-9,111,120,-95,-12,-5,150,-4,-6,-17,-96,]),'TRANSPOSE':([24,31,36,37,39,40,41,44,45,64,81,84,104,117,127,151,],[-7,81,-10,-11,-1,-2,-3,-8,-9,81,-12,-5,81,-4,-6,-17,]),'*':([24,31,36,37,39,40,41,44,45,48,51,64,81,84,104,117,127,135,136,137,138,139,140,141,142,143,151,],[-7,-18,-10,-11,-1,-2,-3,-8,-9,97,-23,-18,-12,-5,-19,-4,-6,97,97,-24,-25,-26,-27,-28,-29,-30,-17,]),'/':([24,31,36,37,39,40,41,44,45,48,51,64,81,84,104,117,127,135,136,137,138,139,140,141,142,143,151,],[-7,-18,-10,-11,-1,-2,-3,-8,-9,98,-23,-18,-12,-5,-19,-4,-6,98,98,-24,-25,-26,-27,-28,-29,-30,-17,]),'^':([24,31,36,37,39,40,41,44,45,48,51,64,81,84,104,117,127,135,136,137,138,139,140,141,142,143,151,],[-7,-18,-10,-11,-1,-2,-3,-8,-9,99,-23,-18,-12,-5,-19,-4,-6,99,99,-24,-25,-26,-27,-28,-29,-30,-17,]),'ARRAY_MUL':([24,31,36,37,39,40,41,44,45,48,51,64,81,84,104,117,127,135,136,137,138,139,140,141,142,143,151,],[-7,-18,-10,-11,-1,-2,-3,-8,-9,100,-23,-18,-12,-5,-19,-4,-6,100,100,-24,-25,-26,-27,-28,-29,-30,-17,]),'ARRAY_DIV':([24,31,36,37,39,40,41,44,45,48,51,64,81,84,104,117,127,135,136,137,138,139,140,141,142,143,151,],[-7,-18,-10,-11,-1,-2,-3,-8,-9,101,-23,-18,-12,-5,-19,-4,-6,101,101,-24,-25,-26,-27,-28,-29,-30,-17,]),'ARRAY_RDIV':([24,31,36,37,39,40,41,44,45,48,51,64,81,84,104,117,127,135,136,137,138,139,140,141,142,143,151,],[-7,-18,-10,-11,-1,-2,-3,-8,-9,102,-23,-18,-12,-5,-19,-4,-6,102,102,-24,-25,-26,-27,-28,-29,-30,-17,]),'ARRAY_POW':([24,31,36,37,39,40,41,44,45,48,51,64,81,84,104,117,127,135,136,137,138,139,140,141,142,143,151,],[-7,-18,-10,-11,-1,-2,-3,-8,-9,103,-23,-18,-12,-5,-19,-4,-6,103,103,-24,-25,-26,-27,-28,-29,-30,-17,]),'<':([24,31,36,37,39,40,41,44,45,46,47,48,51,64,81,84,104,117,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,151,],[-7,-18,-10,-11,-1,-2,-3,-8,-9,91,-34,-31,-23,-18,-12,-5,-19,-4,-6,91,91,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,-17,]),'>':([24,31,36,37,39,40,41,44,45,46,47,48,51,64,81,84,104,117,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,151,],[-7,-18,-10,-11,-1,-2,-3,-8,-9,92,-34,-31,-23,-18,-12,-5,-19,-4,-6,92,92,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,-17,]),'LE_OP':([24,31,36,37,39,40,41,44,45,46,47,48,51,64,81,84,104,117,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,151,],[-7,-18,-10,-11,-1,-2,-3,-8,-9,93,-34,-31,-23,-18,-12,-5,-19,-4,-6,93,93,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,-17,]),'GE_OP':([24,31,36,37,39,40,41,44,45,46,47,48,51,64,81,84,104,117,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,151,],[-7,-18,-10,-11,-1,-2,-3,-8,-9,94,-34,-31,-23,-18,-12,-5,-19,-4,-6,94,94,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,-17,]),'EQ_OP':([24,31,36,37,39,40,41,43,44,45,46,47,48,51,64,81,84,104,117,126,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,151,],[-7,-18,-10,-11,-1,-2,-3,89,-8,-9,-39,-34,-31,-23,-18,-12,-5,-19,-4,89,-6,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,-17,]),'NE_OP':([24,31,36,37,39,40,41,43,44,45,46,47,48,51,64,81,84,104,117,126,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,151,],[-7,-18,-10,-11,-1,-2,-3,90,-8,-9,-39,-34,-31,-23,-18,-12,-5,-19,-4,90,-6,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,-17,]),'&':([24,31,36,37,38,39,40,41,43,44,45,46,47,48,51,64,81,84,104,117,125,126,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,151,],[-7,-18,-10,-11,83,-1,-2,-3,-42,-8,-9,-39,-34,-31,-23,-18,-12,-5,-19,-4,83,-43,-6,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,-17,]),'|':([24,31,35,36,37,38,39,40,41,43,44,45,46,47,48,51,64,81,84,104,108,117,125,126,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,151,],[-7,-18,82,-10,-11,-44,-1,-2,-3,-42,-8,-9,-39,-34,-31,-23,-18,-12,-5,-19,82,-4,-45,-43,-6,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,-17,]),')':([24,35,36,37,38,39,40,41,43,44,45,46,47,48,51,64,69,81,84,104,108,113,114,115,116,117,121,123,125,126,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,151,158,169,170,174,],[-7,-46,-10,-11,-44,-1,-2,-3,-42,-8,-9,-39,-34,-31,-23,-18,117,-12,-5,-19,-47,151,-15,-13,-14,-4,157,-93,-45,-43,-6,-40,-41,-35,-36,-37,-38,-32,-33,-24,-25,-26,-27,-28,-29,-30,-17,173,181,-16,-94,]),'TCOMMENT':([30,],[79,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'translation_unit':([0,],[1,]),'statement_list':([0,62,65,118,119,145,149,164,166,178,181,],[2,109,110,153,154,162,168,177,179,184,186,]),'statement':([0,2,62,65,109,110,118,119,145,149,153,154,162,164,166,168,177,178,179,181,184,186,],[3,54,3,3,54,54,3,3,3,3,54,54,54,3,3,54,54,3,54,3,54,54,]),'statement_list_error':([0,62,65,118,119,145,149,164,166,178,181,],[4,4,4,4,4,4,4,4,4,4,4,]),'global_statement':([0,2,62,65,109,110,118,119,145,149,153,154,162,164,166,168,177,178,179,181,184,186,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'clear_statement':([0,2,62,65,109,110,118,119,145,149,153,154,162,164,166,168,177,178,179,181,184,186,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'assignment_statement':([0,2,62,65,109,110,118,119,145,149,153,154,162,164,166,168,177,178,179,181,184,186,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'expression_statement':([0,2,42,62,65,85,109,110,118,119,145,149,153,154,162,164,166,168,177,178,179,181,184,186,],[8,8,88,8,8,88,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'selection_statement':([0,2,62,65,109,110,118,119,145,149,153,154,162,164,166,168,177,178,179,181,184,186,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'iteration_statement':([0,2,62,65,109,110,118,119,145,149,153,154,162,164,166,168,177,178,179,181,184,186,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'jump_statement':([0,2,62,65,109,110,118,119,145,149,153,154,162,164,166,168,177,178,179,181,184,186,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'func_statement':([0,2,62,65,109,110,118,119,145,149,153,154,162,164,166,168,177,178,179,181,184,186,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'comment_statement':([0,2,62,65,109,110,118,119,145,149,153,154,162,164,166,168,177,178,179,181,184,186,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'eostmt':([0,2,17,18,26,27,42,56,58,62,65,72,73,85,87,109,110,118,119,144,145,148,149,153,154,162,163,164,166,168,175,177,178,179,180,181,183,184,186,188,],[15,15,59,60,70,71,15,105,107,15,15,118,119,15,60,15,15,15,15,161,15,167,15,15,15,15,176,15,15,15,182,15,15,15,185,15,187,15,15,189,]),'assignment_expression':([0,2,62,65,109,110,118,119,145,149,153,154,162,164,166,168,177,178,179,181,184,186,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'expression':([0,2,19,22,25,42,62,65,68,80,85,109,110,111,118,119,145,147,149,150,152,153,154,162,164,165,166,168,177,178,179,181,184,186,],[18,18,62,65,69,87,18,18,116,124,87,18,18,149,18,18,18,166,18,169,116,18,18,18,18,178,18,18,18,18,18,18,18,18,]),'selection_statement_invoke_error':([0,2,62,65,109,110,118,119,145,149,153,154,162,164,166,168,177,178,179,181,184,186,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'selection_statement_error':([0,2,62,65,109,110,118,119,145,149,153,154,162,164,166,168,177,178,179,181,184,186,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'func_statement_error':([0,2,62,65,109,110,118,119,145,149,153,154,162,164,166,168,177,178,179,181,184,186,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'postfix_expression':([0,2,19,22,25,42,52,61,62,65,68,80,82,83,85,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,109,110,111,118,119,145,147,149,150,152,153,154,162,164,165,166,168,177,178,179,181,184,186,],[31,31,64,64,64,64,104,64,31,31,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,31,31,64,31,31,31,64,31,64,64,31,31,31,31,64,31,31,31,31,31,31,31,31,]),'or_expression':([0,2,19,22,25,42,61,62,65,68,80,85,109,110,111,118,119,145,147,149,150,152,153,154,162,164,165,166,168,177,178,179,181,184,186,],[35,35,35,35,35,35,108,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'primary_expression':([0,2,19,22,25,42,52,61,62,65,68,80,82,83,85,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,109,110,111,118,119,145,147,149,150,152,153,154,162,164,165,166,168,177,178,179,181,184,186,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'array_expression':([0,2,19,22,25,42,52,61,62,65,68,80,82,83,85,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,109,110,111,118,119,145,147,149,150,152,153,154,162,164,165,166,168,177,178,179,181,184,186,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'and_expression':([0,2,19,22,25,42,61,62,65,68,80,82,85,109,110,111,118,119,145,147,149,150,152,153,154,162,164,165,166,168,177,178,179,181,184,186,],[38,38,38,38,38,38,38,38,38,38,38,125,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'identifier_expression':([0,2,19,22,25,42,52,61,62,65,68,80,82,83,85,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,109,110,111,118,119,145,147,149,150,152,153,154,162,164,165,166,168,177,178,179,181,184,186,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'constant_expression':([0,2,19,22,25,42,52,61,62,65,68,80,82,83,85,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,109,110,111,118,119,145,147,149,150,152,153,154,162,164,165,166,168,177,178,179,181,184,186,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'string_literal_expression':([0,2,19,22,25,42,52,61,62,65,68,80,82,83,85,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,109,110,111,118,119,145,147,149,150,152,153,154,162,164,165,166,168,177,178,179,181,184,186,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'equality_expression':([0,2,19,22,25,42,61,62,65,68,80,82,83,85,109,110,111,118,119,145,147,149,150,152,153,154,162,164,165,166,168,177,178,179,181,184,186,],[43,43,43,43,43,43,43,43,43,43,43,43,126,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'relational_expression':([0,2,19,22,25,42,61,62,65,68,80,82,83,85,89,90,109,110,111,118,119,145,147,149,150,152,153,154,162,164,165,166,168,177,178,179,181,184,186,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,129,130,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'additive_expression':([0,2,19,22,25,42,61,62,65,68,80,82,83,85,89,90,91,92,93,94,109,110,111,118,119,145,147,149,150,152,153,154,162,164,165,166,168,177,178,179,181,184,186,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,131,132,133,134,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'multiplicative_expression':([0,2,19,22,25,42,61,62,65,68,80,82,83,85,89,90,91,92,93,94,95,96,109,110,111,118,119,145,147,149,150,152,153,154,162,164,165,166,168,177,178,179,181,184,186,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,135,136,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'unary_expression':([0,2,19,22,25,42,61,62,65,68,80,82,83,85,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,109,110,111,118,119,145,147,149,150,152,153,154,162,164,165,166,168,177,178,179,181,184,186,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,137,138,139,140,141,142,143,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'unary_operator':([0,2,19,22,25,42,61,62,65,68,80,82,83,85,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,109,110,111,118,119,145,147,149,150,152,153,154,162,164,165,166,168,177,178,179,181,184,186,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'identifier_list':([14,16,],[56,58,]),'func_declare':([28,],[72,]),'func_declare_lhs':([28,120,],[74,155,]),'func_return_list':([28,],[75,]),'func_declare_invoke_error':([28,],[76,]),'array_list':([42,],[85,]),'array_element':([42,85,],[86,128,]),'index_expression_list':([68,],[113,]),'index_expression':([68,152,],[114,170,]),'func_identifier_list':([78,121,],[122,158,]),'elseif_clause':([109,],[146,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> translation_unit","S'",1,None,None,None),
  ('primary_expression -> identifier_expression','primary_expression',1,'p_primary_expression','parser.py',98),
  ('primary_expression -> constant_expression','primary_expression',1,'p_primary_expression','parser.py',99),
  ('primary_expression -> string_literal_expression','primary_expression',1,'p_primary_expression','parser.py',100),
  ('primary_expression -> ( expression )','primary_expression',3,'p_primary_expression','parser.py',101),
  ('primary_expression -> [ ]','primary_expression',2,'p_primary_expression','parser.py',102),
  ('primary_expression -> [ array_list ]','primary_expression',3,'p_primary_expression','parser.py',103),
  ('identifier_expression -> IDENTIFIER','identifier_expression',1,'p_identifier_expression','parser.py',117),
  ('constant_expression -> CONSTANT','constant_expression',1,'p_constant_expression','parser.py',123),
  ('string_literal_expression -> STRING_LITERAL','string_literal_expression',1,'p_string_literal_expression','parser.py',129),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','parser.py',135),
  ('postfix_expression -> array_expression','postfix_expression',1,'p_postfix_expression','parser.py',136),
  ('postfix_expression -> postfix_expression TRANSPOSE','postfix_expression',2,'p_postfix_expression','parser.py',137),
  ('index_expression -> :','index_expression',1,'p_index_expression','parser.py',143),
  ('index_expression -> expression','index_expression',1,'p_index_expression','parser.py',144),
  ('index_expression_list -> index_expression','index_expression_list',1,'p_index_expression_list','parser.py',150),
  ('index_expression_list -> index_expression_list , index_expression','index_expression_list',3,'p_index_expression_list','parser.py',151),
  ('array_expression -> IDENTIFIER ( index_expression_list )','array_expression',4,'p_array_expression','parser.py',157),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','parser.py',163),
  ('unary_expression -> unary_operator postfix_expression','unary_expression',2,'p_unary_expression','parser.py',164),
  ('unary_operator -> +','unary_operator',1,'p_unary_operator','parser.py',170),
  ('unary_operator -> -','unary_operator',1,'p_unary_operator','parser.py',171),
  ('unary_operator -> ~','unary_operator',1,'p_unary_operator','parser.py',172),
  ('multiplicative_expression -> unary_expression','multiplicative_expression',1,'p_multiplicative_expression','parser.py',178),
  ('multiplicative_expression -> multiplicative_expression * unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',179),
  ('multiplicative_expression -> multiplicative_expression / unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',180),
  ('multiplicative_expression -> multiplicative_expression ^ unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',181),
  ('multiplicative_expression -> multiplicative_expression ARRAY_MUL unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',182),
  ('multiplicative_expression -> multiplicative_expression ARRAY_DIV unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',183),
  ('multiplicative_expression -> multiplicative_expression ARRAY_RDIV unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',184),
  ('multiplicative_expression -> multiplicative_expression ARRAY_POW unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',185),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','parser.py',191),
  ('additive_expression -> additive_expression + multiplicative_expression','additive_expression',3,'p_additive_expression','parser.py',192),
  ('additive_expression -> additive_expression - multiplicative_expression','additive_expression',3,'p_additive_expression','parser.py',193),
  ('relational_expression -> additive_expression','relational_expression',1,'p_relational_expression','parser.py',199),
  ('relational_expression -> relational_expression < additive_expression','relational_expression',3,'p_relational_expression','parser.py',200),
  ('relational_expression -> relational_expression > additive_expression','relational_expression',3,'p_relational_expression','parser.py',201),
  ('relational_expression -> relational_expression LE_OP additive_expression','relational_expression',3,'p_relational_expression','parser.py',202),
  ('relational_expression -> relational_expression GE_OP additive_expression','relational_expression',3,'p_relational_expression','parser.py',203),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','parser.py',209),
  ('equality_expression -> equality_expression EQ_OP relational_expression','equality_expression',3,'p_equality_expression','parser.py',210),
  ('equality_expression -> equality_expression NE_OP relational_expression','equality_expression',3,'p_equality_expression','parser.py',211),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression','parser.py',217),
  ('and_expression -> and_expression & equality_expression','and_expression',3,'p_and_expression','parser.py',218),
  ('or_expression -> and_expression','or_expression',1,'p_or_expression','parser.py',224),
  ('or_expression -> or_expression | and_expression','or_expression',3,'p_or_expression','parser.py',225),
  ('expression -> or_expression','expression',1,'p_expression','parser.py',231),
  ('expression -> expression : or_expression','expression',3,'p_expression','parser.py',232),
  ('assignment_expression -> postfix_expression = expression','assignment_expression',3,'p_assignment_expression','parser.py',238),
  ('eostmt -> ,','eostmt',1,'p_eostmt','parser.py',244),
  ('eostmt -> ;','eostmt',1,'p_eostmt','parser.py',245),
  ('eostmt -> NEWLINE','eostmt',1,'p_eostmt','parser.py',246),
  ('statement -> global_statement','statement',1,'p_statement','parser.py',252),
  ('statement -> clear_statement','statement',1,'p_statement','parser.py',253),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',254),
  ('statement -> expression_statement','statement',1,'p_statement','parser.py',255),
  ('statement -> selection_statement','statement',1,'p_statement','parser.py',256),
  ('statement -> iteration_statement','statement',1,'p_statement','parser.py',257),
  ('statement -> jump_statement','statement',1,'p_statement','parser.py',258),
  ('statement -> func_statement','statement',1,'p_statement','parser.py',259),
  ('statement -> comment_statement','statement',1,'p_statement','parser.py',260),
  ('comment_statement -> COMMENT TCOMMENT','comment_statement',2,'p_comment_statement','parser.py',266),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',272),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',273),
  ('statement_list -> statement_list_error','statement_list',1,'p_statement_list','parser.py',274),
  ('statement_list_error -> statement_list error','statement_list_error',2,'p_statement_list_error','parser.py',280),
  ('identifier_list -> IDENTIFIER','identifier_list',1,'p_identifier_list','parser.py',292),
  ('identifier_list -> identifier_list IDENTIFIER','identifier_list',2,'p_identifier_list','parser.py',293),
  ('global_statement -> GLOBAL identifier_list eostmt','global_statement',3,'p_global_statement','parser.py',299),
  ('clear_statement -> CLEAR identifier_list eostmt','clear_statement',3,'p_clear_statement','parser.py',305),
  ('expression_statement -> eostmt','expression_statement',1,'p_expression_statement','parser.py',311),
  ('expression_statement -> expression eostmt','expression_statement',2,'p_expression_statement','parser.py',312),
  ('assignment_statement -> assignment_expression eostmt','assignment_statement',2,'p_assignment_statement','parser.py',318),
  ('array_element -> expression','array_element',1,'p_array_element','parser.py',324),
  ('array_element -> expression_statement','array_element',1,'p_array_element','parser.py',325),
  ('array_list -> array_element','array_list',1,'p_array_list','parser.py',331),
  ('array_list -> array_list array_element','array_list',2,'p_array_list','parser.py',332),
  ('selection_statement -> IF expression statement_list END eostmt','selection_statement',5,'p_selection_statement','parser.py',338),
  ('selection_statement -> IF expression statement_list ELSE statement_list END eostmt','selection_statement',7,'p_selection_statement','parser.py',339),
  ('selection_statement -> IF expression statement_list elseif_clause END eostmt','selection_statement',6,'p_selection_statement','parser.py',340),
  ('selection_statement -> IF expression statement_list elseif_clause ELSE statement_list END eostmt','selection_statement',8,'p_selection_statement','parser.py',341),
  ('selection_statement -> selection_statement_invoke_error','selection_statement',1,'p_selection_statement','parser.py',342),
  ('selection_statement -> selection_statement_error','selection_statement',1,'p_selection_statement','parser.py',343),
  ('selection_statement_error -> IF error','selection_statement_error',2,'p_selection_statement_error','parser.py',358),
  ('selection_statement_invoke_error -> IF expression statement_list','selection_statement_invoke_error',3,'p_selection_statement_invoke_error','parser.py',370),
  ('elseif_clause -> ELSEIF expression statement_list','elseif_clause',3,'p_elseif_clause','parser.py',376),
  ('elseif_clause -> elseif_clause ELSEIF expression statement_list','elseif_clause',4,'p_elseif_clause','parser.py',377),
  ('iteration_statement -> WHILE expression statement_list END eostmt','iteration_statement',5,'p_iteration_statement','parser.py',386),
  ('iteration_statement -> FOR IDENTIFIER = expression statement_list END eostmt','iteration_statement',7,'p_iteration_statement','parser.py',387),
  ('iteration_statement -> FOR ( IDENTIFIER = expression ) statement_list END eostmt','iteration_statement',9,'p_iteration_statement','parser.py',388),
  ('jump_statement -> BREAK eostmt','jump_statement',2,'p_jump_statement','parser.py',400),
  ('jump_statement -> RETURN eostmt','jump_statement',2,'p_jump_statement','parser.py',401),
  ('translation_unit -> statement_list','translation_unit',1,'p_translation_unit','parser.py',410),
  ('func_identifier_list -> IDENTIFIER','func_identifier_list',1,'p_func_identifier_list','parser.py',416),
  ('func_identifier_list -> func_identifier_list , IDENTIFIER','func_identifier_list',3,'p_func_identifier_list','parser.py',417),
  ('func_return_list -> IDENTIFIER','func_return_list',1,'p_func_return_list','parser.py',426),
  ('func_return_list -> [ func_identifier_list ]','func_return_list',3,'p_func_return_list','parser.py',427),
  ('func_declare_lhs -> IDENTIFIER','func_declare_lhs',1,'p_func_declare_lhs','parser.py',436),
  ('func_declare_lhs -> IDENTIFIER ( )','func_declare_lhs',3,'p_func_declare_lhs','parser.py',437),
  ('func_declare_lhs -> IDENTIFIER ( func_identifier_list )','func_declare_lhs',4,'p_func_declare_lhs','parser.py',438),
  ('func_declare -> func_declare_lhs','func_declare',1,'p_func_declare','parser.py',447),
  ('func_declare -> func_return_list = func_declare_lhs','func_declare',3,'p_func_declare','parser.py',448),
  ('func_declare -> func_declare_invoke_error','func_declare',1,'p_func_declare','parser.py',449),
  ('func_declare_invoke_error -> func_return_list =','func_declare_invoke_error',2,'p_func_declare_invoke_error','parser.py',458),
  ('func_declare_invoke_error -> func_return_list','func_declare_invoke_error',1,'p_func_declare_invoke_error','parser.py',459),
  ('func_statement -> FUNCTION func_declare eostmt statement_list END','func_statement',5,'p_func_statement','parser.py',465),
  ('func_statement -> func_statement_error','func_statement',1,'p_func_statement','parser.py',466),
  ('func_statement_error -> FUNCTION error eostmt statement_list END','func_statement_error',5,'p_func_statement_error','parser.py',475),
]
