# -*- coding: utf-8 -*-
from setuptools import setup

package_dir = \
{'': 'src'}

packages = \
['cwafctl']

package_data = \
{'': ['*']}

install_requires = \
['PyYAML>=5.4.1,<6.0.0',
 'certifi>=2020.12.5,<2021.0.0',
 'cffi>=1.14.5,<2.0.0',
 'chardet>=4.0.0,<5.0.0',
 'cryptography>=3.4.7,<4.0.0',
 'fire>=0.4.0,<0.5.0',
 'idna>=2.10,<3.0',
 'lxml==4.6.3',
 'pyOpenSSL>=20.0.1,<21.0.0',
 'pycparser>=2.20,<3.0',
 'requests>=2.25.1,<3.0.0',
 'six>=1.16.0,<2.0.0',
 'termcolor>=1.1.0,<2.0.0',
 'urllib3>=1.26.4,<2.0.0']

entry_points = \
{'console_scripts': ['cwafctl = cwafctl.cwafctl:start']}

setup_kwargs = {
    'name': 'cwafctl',
    'version': '0.3.0',
    'description': 'Radware Cloud WAF command-line tool',
    'long_description': '# cwafctl\n\n**cwafctl** is a commandline utility that allows to manage cloud waf objects from the client. It allows to perform several actions from the cli, such as retrieving objects such as certificates, application configuration, etc. In addition, it allows to update and modify existing protections within a given cloud waf account. The first step before using cwafctl is to update the file settings.py to include api credentials that must be created in your Radware Cloud WAF account prior to using this tool.\n\n**cwafctl** works with yaml, it allows you to retrieve information in yaml format, that you can save to a file, modify and later on re-use to update the object. The yaml objects used by cwafctl are mapped directly to the JSON format supported by Cloud WAF for API calls.\n\n**cwafctl** requires python 3.8 to run and was tested using windows 10.\n\n# How to install\npip install cwafctl\n\n\n\n# How to use\ncwafctl basically implements the commands below:\n * **get** :    Allows to retrieve a configuration\n * **create**:  Allows to deploy new configurations (ex.:new application,certificate,etc.)\n * **delete**:  Allows to delete an object\n * **set**:     Allows to modify an existing configuration\n * **utils**:   Misc utilities\n\n## Retrieving objects using the "get" command\nIn order to list applications currently onboarded on your cloud waf account and dump it to a yaml file:\n\n  **cwafctl get applications > applications.yaml**\n\n\nIn order to list certificates deployed in your account and dump it to a yaml file:\n\n **cwafctl get certificates > certificates.yaml**\n\n\nIn order to get a specific application configuration and dump it to a yaml file:\n\n **cwafctl get application "HacmeBank" > hacmebankapp.yaml**\n\n\nTo get the full list of available commands and objects that are retrievable:\n\n **cwafctl get --help"**\n\n\n To get help on a specific command, you can use the following syntax:\n\n **cwafctl get application --help**\n\n CLI Output:\n\n    python cwafctl.py get application --help\n    INFO: Showing help with the command \'cwafctl.py get application -- --help\'.\n\n    NAME\n        cwafctl.py get application - Gets an application configuration by name in YAML\n\n    SYNOPSIS\n        cwafctl.py get application NAME\n\n    DESCRIPTION\n        Gets an application configuration by name in YAML\n\n    POSITIONAL ARGUMENTS\n        NAME\n\n    NOTES\n        You can also use flags syntax for POSITIONAL ARGUMENTS\n\n\n## Deploying objects using the "create" command\nIn order to deploy an application:\n  **cwafctl create application < newapp.yaml** [see yaml folder for an example of a yaml file used to onboard an application]\n\nIn order to deploy a certificate:\n  **cwafctl create certificate < certificate.yaml** [see the yaml folder for an example of how to onboard a certificate]\n\n## Deleting objects using the "delete" command\nTo delete a certificate:\n   **cwafctl delete certificate FINGERPRINT**\n\nwhere **FINGERPRINT** can be obtained by listing the certificates using the command **cwafctl.py get certificates**"\n\nTo delete an application:\n    **cwafctl delete application APPNAME**\n\nwhere **APPNAME** is the application name.\n\n\n## Modifying existing configuration using the "get" and "set" command\n\nAny "get" command can be used to retrieve an object that can be stored and edited locally and later pushed using the "set" command.\n\n For example:\n\n    The following commands retrieve the "general information section of an application" and wil store it to a yaml file\n\n    cwafctl get application_generalinfo "HacmeBank" > generalInfo.yaml\n\n    The content of the yaml file is the following:\n    description: null\n    externalID: null\n    ownerEmail: null\n    ownerName: Christian Shink\n\n    The field "description" can be modified and edited  and the content becomes the folowing :\n    description: HacmeBank application\n    externalID: null\n    ownerEmail: null\n    ownerName: Christian Shink\n\n    once the field has been edited, the new General Info for the application "HacmeBank" can be set using the following command:\n    **cwafctl set application_generalinfo "HacmeBank" < generalInfo.yaml\n\n\n## Deploying a new application using cwafctl\n\nThe "yaml files" folder contains yaml files that are usable to deploy a certificate specified in the certificate.yaml file along with a newapp.yaml file that specifies where to deploy the app.\nIn order to get the regions code for the available regions that you can deploy in, you can use the following files:\n\nnewapp.yaml file content:\n\n\n        applicationName: My application\n        mainDomain: www.test.com\n        protocol: BOTH\n        region: CANADA_1\n        originServers:\n        - address: 2.2.2.2\n          addressType: IP\n        - address: 3.3.3.3\n          addressType: IP\n        generalInfo:\n          ownerName: Christian Shink\n          ownerEmail: christian.shink@test.com\n          externalID: \'123445\'\n          description: test\n        fingerprint: 87FE361698CB3F47683245984DDAF08E334818D3\n\n\nPlease note that the "fingerprint" field here can be calculated using the following command:<br>\n    **cwafctl utils get_certificate_fingerprint < ./"yaml files"/certificate.yaml**\n\nPlease note that the available region codes can be obtained from cloud waf using the following commands:<br>\n**cwafctl get available_regions**\n\nCLI output:\n\n    - CANADA_1\n    - US_EAST_1\n    - US_CENTRAL_1\n\n\ncert.yaml file content:\n\n\n        certificate: |-\n         -----BEGIN CERTIFICATE-----\n         MIICzDCCAbSgAwIBAgIJAOg5uU72jLpRMA0GCSqGSIb3DQEBBQUAMBcxFTATBgNV\n         BAMTDHd3dy50ZXN0LmNvbTAeFw0yMTA1MDMwODI3MTZaFw0zMTA1MDEwODI3MTZa\n         MBcxFTATBgNVBAMTDHd3dy50ZXN0LmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEP\n         ADCCAQoCggEBAKMB23DlAYI5sX5AumYVr1k1GF4ASLmC2kbJfKi6Qq7pLN7qZiz6\n         IA/VhWrCr6GOBEPSG93ICxW/D2x/3B4MyEmFu9cSkeht+5RoJjFX43uEGnVMWC+o\n         j2sr62sBXz68O+XRzeVAxWBnJj4rstj+1RgZulYn+/6dTyvkfLuWBM0GJlTtxGf6\n         Y09xGWXwxyTmiHIcNsn1BkRRDcXMr0mZogK+UWdqMXVq6dRuQN315r4HdEZ8xlCM\n         eWC9EufIbtl1tm3mjSEQ1jhZWeIAKrpdIMytAdtoymDHUgfkcQWo1iTvnYcQ4OVf\n         0wlCmIJUJLw9WjOKSsJW06us6Z8ZXWltMucCAwEAAaMbMBkwFwYDVR0RBBAwDoIM\n         d3d3LnRlc3QuY29tMA0GCSqGSIb3DQEBBQUAA4IBAQB4phluspkjLvLOxGw9Yycw\n         V97gvwpqr+JuEIVJL2W3eDsUbLmIpMQ5AhjedJV6z8rjugJJF6/c7slboKj/Awr4\n         +l/Gjnkgt7yuOJ4reghiQvveGp9iIKlo2S76juLVxg1pKTLGm7Ult3Z+kz1aQaxS\n         o38y3Yqy+b8MO8/mjOOTkm1atvif2XZAn2LiNaApk0kVaJcLov/oxJbzQPwjdxge\n         1rN0Mk+qPexa46iP7vJLpVd4BHqf7s0kY5FuiqFmwsGdcHqAmUgmsp3SPHxgCUgC\n         Z1pVtB4uciEpLdYesA2cy9kAy1wLJuz9JbdTT1k/ViyreBGdu8mkH7OiqCwJcn+l\n         -----END CERTIFICATE-----\n        chain: \'\'\n        key: |-\n         -----BEGIN RSA PRIVATE KEY-----\n         MIIEowIBAAKCAQEAowHbcOUBgjmxfkC6ZhWvWTUYXgBIuYLaRsl8qLpCruks3upm\n         LPogD9WFasKvoY4EQ9Ib3cgLFb8PbH/cHgzISYW71xKR6G37lGgmMVfje4QadUxY\n         L6iPayvrawFfPrw75dHN5UDFYGcmPiuy2P7VGBm6Vif7/p1PK+R8u5YEzQYmVO3E\n         Z/pjT3EZZfDHJOaIchw2yfUGRFENxcyvSZmiAr5RZ2oxdWrp1G5A3fXmvgd0RnzG\n         UIx5YL0S58hu2XW2beaNIRDWOFlZ4gAqul0gzK0B22jKYMdSB+RxBajWJO+dhxDg\n         5V/TCUKYglQkvD1aM4pKwlbTq6zpnxldaW0y5wIDAQABAoIBAGnTQ9aoJfGYaP3R\n         IfIyc9NTYA1u28fsBq9cEZ0sxyvs35+cx1a9z+DXuzUTTZhxrZ0mI8c5HtEwZ+AF\n         pi6wF7t7ofY/7Q/bjy/K6bixGVNP8SljtgDCytFGAyFGE8KTy8MpESWbhkhOzwof\n         ro2n60opMcrLTJMBJ6wUO1JBU76SDRP2/061SXbdC4MBgO/Ea2J42GjbTtWkTvCp\n         sjBKpZbwLJPyIe6eQeqBA9eCgjEFc20owLva6eW/+KSI7sY6t6kAW8EQLAjT3BFa\n         1+3AuWTfo2kgXGFO8eYbRE5IYfXAOdI+7laGAGme5Wk1gB4OEgBRmEILDiLesksx\n         b9K1l8kCgYEA1CorQ2eAyly6YYAeS/6SWDozugUnTXVMjRCR1uqqfr2Y213HMeUw\n         +Q6eIh0xlsEow8HKYHhmZ4uPRStmctm2QpbBCzPl8dpdmcQo5n7ouNELPeSVznmH\n         eMnx3b3mtL48PkXziWKm8IoJ/qWFheZjZz5ymhRGzFFiPv4JQVpnl8MCgYEAxK+l\n         5eaOhepzEwqDVFPEIy4zmMRfQQHH9qahDHogGQmzdlZ3yrZwOLfJvXskuomVKqhB\n         aeDEWd/zLcrQU3QNFTiBZhJgWGutrp/MxwR5ft4Wvm4Xj7EaAdl9Iq1cdLKvyeHw\n         8JbYu4KHTTNtNIzIAy0yQdhiKHIq6hucOXfhqg0CgYB1RoH3lkTolu0na+xTUXqP\n         bkydbK/W7xnLd/dFdx2bRS4zQ9kRyYCSivP6I2z/yfHAk2RMgwEIB2rAb0cIATPw\n         BujaSmu2jl/i2T1Ke6gkUNkH80yjfyXVLLuXOJtIGUevnHcL4A4rNAJmUhRGeZ1E\n         uo4agU7JLctCyqVPDKvqhQKBgDnCk2eWc5hkJ3MaDUNAbkMemExursJ6cWy/tl/h\n         pXd0390Ku5cuSHp/jqE0fq7BJKsoSj17om36VIHII7G+TPFEbMu67cxJovG7P/na\n         GIvnUKqPzh+GlOqiIhuC6bnjl7gjwAwHYJKAXJeRWKqsBTjZlv67OuhBztR9Uz2V\n         NRIpAoGBANIn8QeRhIpTx4IOtn+MEI/cHbGHfHjwkidm9KVbyuOgHKSHPZ1jCbTA\n         Tr6dWkpbMIkxhkbuTED6UqXmvPxui0ZXgM+MozRgkOEvKaMEjTit7D6xM4ba1wl8\n         pbrcUEXSdSRp89NDRUAsyRPCRvMNspGDOqJKXxLus1u3YpiHkD7a\n         -----END RSA PRIVATE KEY-----\n        passphrase: test\n\nPlease note that the "certificate.yaml" file can either be created manually or be generated using the following command:<br><br>\n**cwafctl utils generate_yaml_cert_file certificate.pem key.pem certchain.pem test**<br><br>\n    where certificate.pem is the file containing the public key<br>\n    where key.pem is the file containing the private key<br>\n    where certchain.pem is the file containing the certificate chain<br>\n    where test is the passphrase that was used to encrypt the certificate<br>\n\n**To deploy the certificate:**\n\n    cwafctl create certificate < ./"yaml files"/certificate.yaml\n\n**To deploy the application:**\n\n    cwafctl create application < ./"yaml files"/newapp.yaml\n\n\n\n\n\n\n\n\n\n\n\n\n',
    'author': 'Christian Shink',
    'author_email': 'christian.shink@radware.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/Radware/CloudWAF-command-line-tool',
    'package_dir': package_dir,
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.8,<4.0',
}


setup(**setup_kwargs)
