// Copyright Â© 2017 Erez Shinan
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


// Adapted from: https://github.com/lark-parser/lark/blob/master/examples/python3.lark


file_input: (_NEWLINE | stmt)*

contractdef: "contract" NAME ":" suite
structdef: "struct" NAME ":" suite
funcdef: decorators "def" NAME "(" parameter_list ")" [return_type] [":" suite]
decorators: decorator*
decorator: "@" NAME ["(" arguments ")"] _NEWLINE

return_type: "->" test | "->" "(" test ("," test)+ ")"

parameter_list: [parameter ("," parameter)*]
parameter: NAME ":" test ["=" test]

?stmt: simple_stmt | compound_stmt
?simple_stmt: small_stmt _NEWLINE
?small_stmt: expr_stmt | pass_stmt | flow_stmt | import_stmt | assert_stmt
expr_stmt: test [annassign | augassign | assign] | testlist assign
assign: "=" testlist
annassign: ":" test ["=" test]
augassign: aug_op test
!aug_op: "+=" | "-=" | "*=" | "/=" | "%=" | "**="
pass_stmt: "pass"
?flow_stmt: break_stmt | continue_stmt | return_stmt | raise_stmt
break_stmt: "break"
continue_stmt: "continue"
return_stmt: "return" [testlist] | "return" "(" testlist ")"
raise_stmt: "raise" [test]
?import_stmt: import_name | import_from
import_name: "import" alias_list
import_from: "from" relative_name "import" ("(" alias_list ")" | alias_list)
relative_name: [dots] dotted_name | dots
!dots: "."+
alias_list: alias ("," alias)*
alias: dotted_name ["as" NAME]
dotted_name: NAME ("." NAME)*
assert_stmt: "assert" test ["," test]

?compound_stmt: if_stmt | for_stmt | with_stmt | funcdef | structdef | contractdef
if_stmt: "if" test ":" suite ("elif" test ":" suite)* ["else" ":" suite]
for_stmt: "for" var "in" test ":" suite
with_stmt: "with" test ":" suite
suite: simple_stmt | _NEWLINE _INDENT stmt+ _DEDENT

?test: impl_test ["if" impl_test "else" test]
?impl_test: or_test ("==>" or_test)*
?or_test: and_test ("or" and_test)*
?and_test: not_test ("and" not_test)*
?not_test: "not" not_test -> unot
         | comparison
?comparison: arith_expr [(comp_op | cont_op | eq_op) arith_expr]
?arith_expr: term (add_op term)*
?term: factor (mul_op factor)*
?factor: factor_op factor | power

!comp_op: "<" | ">" | ">=" | "<="
!cont_op: "in" | "not" "in"
!eq_op: "==" | "!="

!add_op: "+" | "-"
!mul_op: "*" | "/" | "%"
!factor_op: "+" | "-"

?power: atom_expr ["**" factor]

?atom_expr: atom_expr "(" arguments ")"  -> funccall
          | atom_expr "[" exchange "]"       -> getitem
          | atom_expr "." NAME           -> getattr
          | atom

?exchange: test ["<->" test]

?atom: "[" [testlist] "]"  -> list
     | "{" [dictlist | testlist] "}"  -> dictset
     | var
     | number
     | float
     | string+ -> strings
     | "(" test ")"
     | "..." -> ellipsis
     | "True"    -> const_true
     | "False"   -> const_false

var: NAME

testlist: test ("," test)* [","]
dictlist: (test ":" test) ("," test ":" test)* [","]

arguments: [argvalue ("," argvalue)*]

?argvalue: test | NAME "=" test

number: DEC_NUMBER | HEX_NUMBER | BIN_NUMBER | OCT_NUMBER
float: FLOAT_NUMBER
string: STRING | LONG_STRING

// Tokens

NAME: /[a-zA-Z_]\w*/
COMMENT: /#(?!@)[^\n]*/
SPEC_MARKER: /#@[\t \f]*/
_NEWLINE: (/\r?\n[\t ]*/ | COMMENT)+

STRING : /b?r?("(?!"").*?(?<!\\)(\\\\)*?"|'(?!'').*?(?<!\\)(\\\\)*?')/i
LONG_STRING: /b?r?(""".*?(?<!\\)(\\\\)*?"""|'''.*?(?<!\\)(\\\\)*?''')/is

DEC_NUMBER: /0(_?0)*|[1-9](_?\d)*/i
HEX_NUMBER.2: /0x(_?[\da-f])+/i
OCT_NUMBER.2: /0o(_?[0-7])+/i
BIN_NUMBER.2 : /0b(_?[0-1])+/i
FLOAT_NUMBER.2: /((\d+\.\d*|\.\d+)(e[-+]?\d+)?|\d+(e[-+]?\d+))/i

%ignore /[\t \f]+/  // WS
%ignore /\\[\t \f]*\r?\n/  // LINE_CONT
%ignore COMMENT
%ignore SPEC_MARKER
%declare _INDENT _DEDENT
