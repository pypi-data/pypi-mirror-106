/*
  Copyright (c) 2021 ETH Zurich
  This Source Code Form is subject to the terms of the Mozilla Public
  License, v. 2.0. If a copy of the MPL was not distributed with this
  file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

domain $Map[$K, $V] {

    function $map_init($v: $V): $Map[$K, $V]

    function $map_eq($m: $Map[$K, $V], $n: $Map[$K, $V]): Bool

    function $map_get($m: $Map[$K, $V], $k: $K): $V

    function $map_set($m: $Map[$K, $V], $k: $K, $v: $V): $Map[$K, $V]

    axiom $map_init_ax {
        forall $v: $V, $k: $K :: { $map_get($map_init($v), $k) } $map_get($map_init($v), $k) == $v
    }

    axiom $map_eq_ax {
        forall $m: $Map[$K, $V], $n: $Map[$K, $V] :: { $map_eq($m, $n) }
            ($map_eq($m, $n) <==> $m == $n) &&
            ($map_eq($m, $n) <==> forall $k: $K :: { $map_get($m, $k), $map_get($n, $k) }
                $map_get($m, $k) == $map_get($n, $k))
    }

    axiom $map_set_ax {
        forall $m: $Map[$K, $V], $k: $K, $v: $V , $kk: $K:: { $map_get($map_set($m, $k, $v), $kk) }
            $map_get($map_set($m, $k, $v), $kk) == ($k == $kk ? $v : $map_get($m, $kk)) 
    }

}

domain $MapInt[$K] {

    function $map_sum($m: $Map[$K, Int]): Int

    axiom $map_sum_init_ax {
        $map_sum($map_init(0)) == 0
    }

    axiom $map_sum_set_ax {
        forall $m: $Map[$K, Int], $k: $K, $v: Int :: { $map_sum($map_set($m, $k, $v)) }
            $map_sum($map_set($m, $k, $v)) == $map_sum($m) - $map_get($m, $k) + $v
    }

}