# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CStatusCore
else:
    import _CStatusCore

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class PluginBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type_query = property(_CStatusCore.PluginBase_type_query_get)

    def __init__(self, *args):
        _CStatusCore.PluginBase_swiginit(self, _CStatusCore.new_PluginBase(*args))
    __swig_destroy__ = _CStatusCore.delete_PluginBase

# Register PluginBase in _CStatusCore:
_CStatusCore.PluginBase_swigregister(PluginBase)

class position_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_CStatusCore.position_type_x_get, _CStatusCore.position_type_x_set)
    y = property(_CStatusCore.position_type_y_get, _CStatusCore.position_type_y_set)
    z = property(_CStatusCore.position_type_z_get, _CStatusCore.position_type_z_set)

    def __init__(self):
        _CStatusCore.position_type_swiginit(self, _CStatusCore.new_position_type())
    __swig_destroy__ = _CStatusCore.delete_position_type

# Register position_type in _CStatusCore:
_CStatusCore.position_type_swigregister(position_type)

class look_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    yaw = property(_CStatusCore.look_type_yaw_get, _CStatusCore.look_type_yaw_set)
    pitch = property(_CStatusCore.look_type_pitch_get, _CStatusCore.look_type_pitch_set)

    def __init__(self):
        _CStatusCore.look_type_swiginit(self, _CStatusCore.new_look_type())
    __swig_destroy__ = _CStatusCore.delete_look_type

# Register look_type in _CStatusCore:
_CStatusCore.look_type_swigregister(look_type)

class position_update_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    position = property(_CStatusCore.position_update_type_position_get, _CStatusCore.position_update_type_position_set)
    look = property(_CStatusCore.position_update_type_look_get, _CStatusCore.position_update_type_look_set)

    def __init__(self):
        _CStatusCore.position_update_type_swiginit(self, _CStatusCore.new_position_update_type())
    __swig_destroy__ = _CStatusCore.delete_position_update_type

# Register position_update_type in _CStatusCore:
_CStatusCore.position_update_type_swigregister(position_update_type)

class StatusCore(PluginBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    position = property(_CStatusCore.StatusCore_position_get, _CStatusCore.StatusCore_position_set)
    look = property(_CStatusCore.StatusCore_look_get, _CStatusCore.StatusCore_look_set)
    on_ground = property(_CStatusCore.StatusCore_on_ground_get, _CStatusCore.StatusCore_on_ground_set)

    def __init__(self, ploader: "rkr::PluginLoader &", ownership: "bool"=False):
        _CStatusCore.StatusCore_swiginit(self, _CStatusCore.new_StatusCore(ploader, ownership))
    __swig_destroy__ = _CStatusCore.delete_StatusCore

# Register StatusCore in _CStatusCore:
_CStatusCore.StatusCore_swigregister(StatusCore)



