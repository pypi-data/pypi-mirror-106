# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CWorldCore
else:
    import _CWorldCore

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CWorldCore.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _CWorldCore.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _CWorldCore.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _CWorldCore.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _CWorldCore.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _CWorldCore.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _CWorldCore.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _CWorldCore.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _CWorldCore.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _CWorldCore.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _CWorldCore.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        return _CWorldCore.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        return _CWorldCore.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _CWorldCore.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _CWorldCore.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _CWorldCore.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _CWorldCore.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _CWorldCore:
_CWorldCore.SwigPyIterator_swigregister(SwigPyIterator)

class BlockCoord(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_CWorldCore.BlockCoord_x_get, _CWorldCore.BlockCoord_x_set)
    y = property(_CWorldCore.BlockCoord_y_get, _CWorldCore.BlockCoord_y_set)
    z = property(_CWorldCore.BlockCoord_z_get, _CWorldCore.BlockCoord_z_set)

    def __init__(self):
        _CWorldCore.BlockCoord_swiginit(self, _CWorldCore.new_BlockCoord())
    __swig_destroy__ = _CWorldCore.delete_BlockCoord

# Register BlockCoord in _CWorldCore:
_CWorldCore.BlockCoord_swigregister(BlockCoord)

class BlockIdVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CWorldCore.BlockIdVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CWorldCore.BlockIdVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CWorldCore.BlockIdVector___bool__(self)

    def __len__(self) -> "std::vector< unsigned short >::size_type":
        return _CWorldCore.BlockIdVector___len__(self)

    def __getslice__(self, i: "std::vector< unsigned short >::difference_type", j: "std::vector< unsigned short >::difference_type") -> "std::vector< unsigned short,std::allocator< unsigned short > > *":
        return _CWorldCore.BlockIdVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CWorldCore.BlockIdVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< unsigned short >::difference_type", j: "std::vector< unsigned short >::difference_type") -> "void":
        return _CWorldCore.BlockIdVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CWorldCore.BlockIdVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< unsigned short >::value_type const &":
        return _CWorldCore.BlockIdVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CWorldCore.BlockIdVector___setitem__(self, *args)

    def pop(self) -> "std::vector< unsigned short >::value_type":
        return _CWorldCore.BlockIdVector_pop(self)

    def append(self, x: "std::vector< unsigned short >::value_type const &") -> "void":
        return _CWorldCore.BlockIdVector_append(self, x)

    def empty(self) -> "bool":
        return _CWorldCore.BlockIdVector_empty(self)

    def size(self) -> "std::vector< unsigned short >::size_type":
        return _CWorldCore.BlockIdVector_size(self)

    def swap(self, v: "BlockIdVector") -> "void":
        return _CWorldCore.BlockIdVector_swap(self, v)

    def begin(self) -> "std::vector< unsigned short >::iterator":
        return _CWorldCore.BlockIdVector_begin(self)

    def end(self) -> "std::vector< unsigned short >::iterator":
        return _CWorldCore.BlockIdVector_end(self)

    def rbegin(self) -> "std::vector< unsigned short >::reverse_iterator":
        return _CWorldCore.BlockIdVector_rbegin(self)

    def rend(self) -> "std::vector< unsigned short >::reverse_iterator":
        return _CWorldCore.BlockIdVector_rend(self)

    def clear(self) -> "void":
        return _CWorldCore.BlockIdVector_clear(self)

    def get_allocator(self) -> "std::vector< unsigned short >::allocator_type":
        return _CWorldCore.BlockIdVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _CWorldCore.BlockIdVector_pop_back(self)

    def erase(self, *args) -> "std::vector< unsigned short >::iterator":
        return _CWorldCore.BlockIdVector_erase(self, *args)

    def __init__(self, *args):
        _CWorldCore.BlockIdVector_swiginit(self, _CWorldCore.new_BlockIdVector(*args))

    def push_back(self, x: "std::vector< unsigned short >::value_type const &") -> "void":
        return _CWorldCore.BlockIdVector_push_back(self, x)

    def front(self) -> "std::vector< unsigned short >::value_type const &":
        return _CWorldCore.BlockIdVector_front(self)

    def back(self) -> "std::vector< unsigned short >::value_type const &":
        return _CWorldCore.BlockIdVector_back(self)

    def assign(self, n: "std::vector< unsigned short >::size_type", x: "std::vector< unsigned short >::value_type const &") -> "void":
        return _CWorldCore.BlockIdVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _CWorldCore.BlockIdVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _CWorldCore.BlockIdVector_insert(self, *args)

    def reserve(self, n: "std::vector< unsigned short >::size_type") -> "void":
        return _CWorldCore.BlockIdVector_reserve(self, n)

    def capacity(self) -> "std::vector< unsigned short >::size_type":
        return _CWorldCore.BlockIdVector_capacity(self)
    __swig_destroy__ = _CWorldCore.delete_BlockIdVector

# Register BlockIdVector in _CWorldCore:
_CWorldCore.BlockIdVector_swigregister(BlockIdVector)

class PositionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CWorldCore.PositionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CWorldCore.PositionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CWorldCore.PositionVector___bool__(self)

    def __len__(self) -> "std::vector< mcd::mc_position >::size_type":
        return _CWorldCore.PositionVector___len__(self)

    def __getslice__(self, i: "std::vector< mcd::mc_position >::difference_type", j: "std::vector< mcd::mc_position >::difference_type") -> "std::vector< mcd::mc_position,std::allocator< mcd::mc_position > > *":
        return _CWorldCore.PositionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CWorldCore.PositionVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< mcd::mc_position >::difference_type", j: "std::vector< mcd::mc_position >::difference_type") -> "void":
        return _CWorldCore.PositionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CWorldCore.PositionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< mcd::mc_position >::value_type const &":
        return _CWorldCore.PositionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CWorldCore.PositionVector___setitem__(self, *args)

    def pop(self) -> "std::vector< mcd::mc_position >::value_type":
        return _CWorldCore.PositionVector_pop(self)

    def append(self, x: "std::vector< mcd::mc_position >::value_type const &") -> "void":
        return _CWorldCore.PositionVector_append(self, x)

    def empty(self) -> "bool":
        return _CWorldCore.PositionVector_empty(self)

    def size(self) -> "std::vector< mcd::mc_position >::size_type":
        return _CWorldCore.PositionVector_size(self)

    def swap(self, v: "PositionVector") -> "void":
        return _CWorldCore.PositionVector_swap(self, v)

    def begin(self) -> "std::vector< mcd::mc_position >::iterator":
        return _CWorldCore.PositionVector_begin(self)

    def end(self) -> "std::vector< mcd::mc_position >::iterator":
        return _CWorldCore.PositionVector_end(self)

    def rbegin(self) -> "std::vector< mcd::mc_position >::reverse_iterator":
        return _CWorldCore.PositionVector_rbegin(self)

    def rend(self) -> "std::vector< mcd::mc_position >::reverse_iterator":
        return _CWorldCore.PositionVector_rend(self)

    def clear(self) -> "void":
        return _CWorldCore.PositionVector_clear(self)

    def get_allocator(self) -> "std::vector< mcd::mc_position >::allocator_type":
        return _CWorldCore.PositionVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _CWorldCore.PositionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< mcd::mc_position >::iterator":
        return _CWorldCore.PositionVector_erase(self, *args)

    def __init__(self, *args):
        _CWorldCore.PositionVector_swiginit(self, _CWorldCore.new_PositionVector(*args))

    def push_back(self, x: "std::vector< mcd::mc_position >::value_type const &") -> "void":
        return _CWorldCore.PositionVector_push_back(self, x)

    def front(self) -> "std::vector< mcd::mc_position >::value_type const &":
        return _CWorldCore.PositionVector_front(self)

    def back(self) -> "std::vector< mcd::mc_position >::value_type const &":
        return _CWorldCore.PositionVector_back(self)

    def assign(self, n: "std::vector< mcd::mc_position >::size_type", x: "std::vector< mcd::mc_position >::value_type const &") -> "void":
        return _CWorldCore.PositionVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _CWorldCore.PositionVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _CWorldCore.PositionVector_insert(self, *args)

    def reserve(self, n: "std::vector< mcd::mc_position >::size_type") -> "void":
        return _CWorldCore.PositionVector_reserve(self, n)

    def capacity(self) -> "std::vector< mcd::mc_position >::size_type":
        return _CWorldCore.PositionVector_capacity(self)
    __swig_destroy__ = _CWorldCore.delete_PositionVector

# Register PositionVector in _CWorldCore:
_CWorldCore.PositionVector_swigregister(PositionVector)

class PosArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CWorldCore.PosArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CWorldCore.PosArray___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CWorldCore.PosArray___bool__(self)

    def __len__(self) -> "std::array< int,3 >::size_type":
        return _CWorldCore.PosArray___len__(self)

    def __getslice__(self, i: "std::array< int,3 >::difference_type", j: "std::array< int,3 >::difference_type") -> "std::array< std::int32_t,3 > *":
        return _CWorldCore.PosArray___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CWorldCore.PosArray___setslice__(self, *args)

    def __delslice__(self, i: "std::array< int,3 >::difference_type", j: "std::array< int,3 >::difference_type") -> "void":
        return _CWorldCore.PosArray___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CWorldCore.PosArray___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::array< int,3 >::value_type const &":
        return _CWorldCore.PosArray___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CWorldCore.PosArray___setitem__(self, *args)

    def __init__(self, *args):
        _CWorldCore.PosArray_swiginit(self, _CWorldCore.new_PosArray(*args))

    def empty(self) -> "bool":
        return _CWorldCore.PosArray_empty(self)

    def size(self) -> "std::array< int,3 >::size_type":
        return _CWorldCore.PosArray_size(self)

    def swap(self, v: "PosArray") -> "void":
        return _CWorldCore.PosArray_swap(self, v)

    def begin(self) -> "std::array< int,3 >::iterator":
        return _CWorldCore.PosArray_begin(self)

    def end(self) -> "std::array< int,3 >::iterator":
        return _CWorldCore.PosArray_end(self)

    def rbegin(self) -> "std::array< int,3 >::reverse_iterator":
        return _CWorldCore.PosArray_rbegin(self)

    def rend(self) -> "std::array< int,3 >::reverse_iterator":
        return _CWorldCore.PosArray_rend(self)

    def front(self) -> "std::array< int,3 >::value_type const &":
        return _CWorldCore.PosArray_front(self)

    def back(self) -> "std::array< int,3 >::value_type const &":
        return _CWorldCore.PosArray_back(self)

    def fill(self, u: "std::array< int,3 >::value_type const &") -> "void":
        return _CWorldCore.PosArray_fill(self, u)
    __swig_destroy__ = _CWorldCore.delete_PosArray

# Register PosArray in _CWorldCore:
_CWorldCore.PosArray_swigregister(PosArray)

class PosArrayVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _CWorldCore.PosArrayVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _CWorldCore.PosArrayVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _CWorldCore.PosArrayVector___bool__(self)

    def __len__(self) -> "std::vector< std::array< int,3 > >::size_type":
        return _CWorldCore.PosArrayVector___len__(self)

    def __getslice__(self, i: "std::vector< std::array< int,3 > >::difference_type", j: "std::vector< std::array< int,3 > >::difference_type") -> "std::vector< std::array< std::int32_t,3 >,std::allocator< std::array< std::int32_t,3 > > > *":
        return _CWorldCore.PosArrayVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _CWorldCore.PosArrayVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::array< int,3 > >::difference_type", j: "std::vector< std::array< int,3 > >::difference_type") -> "void":
        return _CWorldCore.PosArrayVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _CWorldCore.PosArrayVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::array< int,3 > >::value_type const &":
        return _CWorldCore.PosArrayVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _CWorldCore.PosArrayVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::array< int,3 > >::value_type":
        return _CWorldCore.PosArrayVector_pop(self)

    def append(self, x: "PosArray") -> "void":
        return _CWorldCore.PosArrayVector_append(self, x)

    def empty(self) -> "bool":
        return _CWorldCore.PosArrayVector_empty(self)

    def size(self) -> "std::vector< std::array< int,3 > >::size_type":
        return _CWorldCore.PosArrayVector_size(self)

    def swap(self, v: "PosArrayVector") -> "void":
        return _CWorldCore.PosArrayVector_swap(self, v)

    def begin(self) -> "std::vector< std::array< int,3 > >::iterator":
        return _CWorldCore.PosArrayVector_begin(self)

    def end(self) -> "std::vector< std::array< int,3 > >::iterator":
        return _CWorldCore.PosArrayVector_end(self)

    def rbegin(self) -> "std::vector< std::array< int,3 > >::reverse_iterator":
        return _CWorldCore.PosArrayVector_rbegin(self)

    def rend(self) -> "std::vector< std::array< int,3 > >::reverse_iterator":
        return _CWorldCore.PosArrayVector_rend(self)

    def clear(self) -> "void":
        return _CWorldCore.PosArrayVector_clear(self)

    def get_allocator(self) -> "std::vector< std::array< int,3 > >::allocator_type":
        return _CWorldCore.PosArrayVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _CWorldCore.PosArrayVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::array< int,3 > >::iterator":
        return _CWorldCore.PosArrayVector_erase(self, *args)

    def __init__(self, *args):
        _CWorldCore.PosArrayVector_swiginit(self, _CWorldCore.new_PosArrayVector(*args))

    def push_back(self, x: "PosArray") -> "void":
        return _CWorldCore.PosArrayVector_push_back(self, x)

    def front(self) -> "std::vector< std::array< int,3 > >::value_type const &":
        return _CWorldCore.PosArrayVector_front(self)

    def back(self) -> "std::vector< std::array< int,3 > >::value_type const &":
        return _CWorldCore.PosArrayVector_back(self)

    def assign(self, n: "std::vector< std::array< int,3 > >::size_type", x: "PosArray") -> "void":
        return _CWorldCore.PosArrayVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _CWorldCore.PosArrayVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _CWorldCore.PosArrayVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::array< int,3 > >::size_type") -> "void":
        return _CWorldCore.PosArrayVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::array< int,3 > >::size_type":
        return _CWorldCore.PosArrayVector_capacity(self)
    __swig_destroy__ = _CWorldCore.delete_PosArrayVector

# Register PosArrayVector in _CWorldCore:
_CWorldCore.PosArrayVector_swigregister(PosArrayVector)

class PluginBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type_query = property(_CWorldCore.PluginBase_type_query_get)

    def __init__(self, *args):
        _CWorldCore.PluginBase_swiginit(self, _CWorldCore.new_PluginBase(*args))
    __swig_destroy__ = _CWorldCore.delete_PluginBase

# Register PluginBase in _CWorldCore:
_CWorldCore.PluginBase_swigregister(PluginBase)

class WorldCore(PluginBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, ploader: "rkr::PluginLoader &", ownership: "bool"=False):
        _CWorldCore.WorldCore_swiginit(self, _CWorldCore.new_WorldCore(ploader, ownership))

    def get(self, *args) -> "std::vector< rkr::block_id,std::allocator< rkr::block_id > >":
        return _CWorldCore.WorldCore_get(self, *args)
    __swig_destroy__ = _CWorldCore.delete_WorldCore

# Register WorldCore in _CWorldCore:
_CWorldCore.WorldCore_swigregister(WorldCore)



