function c(T,e,t){return e in T?Object.defineProperty(T,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):T[e]=t,T}import*as _ from"../../../../web_modules/three.js";import m from"../ScatterChart.js";import G from"./fragment.glsl.js";import R from"./vertex.glsl.js";const B=16384,P=16384,u=6;export default class l extends m{constructor(...e){super(...e);c(this,"blending",_.NormalBlending),c(this,"vertexShader",R),c(this,"fragmentShader",G),c(this,"glyphTexture",null),c(this,"mesh",null),c(this,"textWidthInGlyphTexture",[]),c(this,"textPositionInGlyphTexture",[])}get object(){return this.mesh}get defaultColor(){return l.LABEL_BACKGROUND_COLOR_DEFAULT}get hoveredColor(){return l.LABEL_BACKGROUND_COLOR_HOVER}get focusedColor(){return l.LABEL_BACKGROUND_COLOR_FOCUS}get highLightColor(){return l.LABEL_BACKGROUND_COLOR_HIGHLIGHT}createShaderUniforms(e){return{glyphTexture:{value:this.glyphTexture},picking:{value:e}}}convertVertexes(){const e=this.dataCount,t=new Float32Array(e*u*3);for(let o=0;o<e;o++)for(let i=0;i<u;i++)for(let s=0;s<3;s++)t[o*u*3+i*3+s]=this.positions[o*3+s];return t}convertPickingColors(){if(this.pickingColors){const e=this.dataCount,t=new Float32Array(e*u*3);for(let o=0;o<e;o++)for(let i=0;i<u;i++)for(let s=0;s<3;s++)t[o*u*3+i*3+s]=this.pickingColors[o*3+s];return t}return null}convertPositionsToLabelPosition(){const e=this.dataCount,t=new Float32Array(e*u*2),o=1/(700*l.CUBE_LENGTH),i=(l.LABEL_FONT_SIZE+2*l.LABEL_PADDING[0])*o;for(let s=0;s<e;s++){const n=s*u*2,a=this.textWidthInGlyphTexture[s]*o,r=-a,x=-i,d=a,f=i;t[n]=r,t[n+1]=x,t[n+2]=d,t[n+3]=x,t[n+4]=r,t[n+5]=f,t[n+6]=r,t[n+7]=f,t[n+8]=d,t[n+9]=x,t[n+10]=d,t[n+11]=f}return t}convertGlyphTexturePositionsToUV(){const e=this.dataCount,t=new Float32Array(e*u*2);for(let o=0;o<e;o++){const i=o*u*2;let s=0,n=0,a=1,r=1;if(this.textPositionInGlyphTexture[o]){const[x,d]=this.textPositionInGlyphTexture[o];s=x[0],n=1-x[1],a=d[0],r=1-d[1]}t[i]=s,t[i+1]=r,t[i+2]=a,t[i+3]=r,t[i+4]=s,t[i+5]=n,t[i+6]=s,t[i+7]=n,t[i+8]=a,t[i+9]=r,t[i+10]=a,t[i+11]=n}return t}convertVertexColors(){const e=this.dataCount,t=new Float32Array(e*u*3);for(let o=0;o<e;o++){const i=this.getColorByIndex(o);for(let s=0;s<u;s++)t[o*u*3+s*3]=i.r,t[o*u*3+s*3+1]=i.g,t[o*u*3+s*3+2]=i.b}return t}createGlyphTexture(){const e=window.devicePixelRatio,t=this.labels.length,o=l.LABEL_FONT_SIZE*e,i=`bold ${o}px roboto`,[s,n]=l.LABEL_PADDING,a=document.createElement("canvas");a.width=B,a.height=o;const r=a.getContext("2d");let x=0,d=o+2*s;const f=[],E=[];if(r){r.font=i,r.fillStyle=l.LABEL_COLOR.getStyle(),r.textAlign="start",r.textBaseline="top";let A=n,p=s;for(let h=0;h<t;h++){const C=this.labels[h],L=this.labels.indexOf(C);if(L>=0&&h!==L){E.push(E[L]),f.push([[f[L][0][0],f[L][0][1]],[f[L][1][0],f[L][1][1]]]);continue}const O=Math.ceil(r.measureText(C).width);E.push(Math.floor(O/e)+2*n);const y=O+n,v=o+s;if(A+y>B){if(A=n,p+=v,p>P)throw new Error("Texture too large!");d=p+v}f.push([[A-n,p-s],[A+y,p+v]]),A+=y,x<A&&(x=A)}a.width=x,a.height=d,r.fillStyle="#fff",r.fillRect(0,0,x,d),r.font=i,r.fillStyle=l.LABEL_COLOR.getStyle(),r.textAlign="start",r.textBaseline="top";for(let h=0;h<t;h++){const C=this.labels[h],L=this.labels.indexOf(C);if(L>=0&&h!==L)continue;const[O]=f[h];r.fillText(C,O[0]+n,O[1]+s)}f.forEach(h=>{h[0][0]/=x,h[0][1]/=d,h[1][0]/=x,h[1][1]/=d})}const g=new _.CanvasTexture(a);g.needsUpdate=!0,g.minFilter=_.LinearFilter,g.generateMipmaps=!1,g.flipY=!0,this.glyphTexture=g,this.textWidthInGlyphTexture=E,this.textPositionInGlyphTexture=f}setLabelPosition(e){this.setGeometryAttribute("labelPosition",e,2)}setTextureUV(e){this.setGeometryAttribute("uv",e,2)}onRender(){this.colors=this.convertVertexColors()}onSetSize(){}onDataSet(){this.createGlyphTexture();const e=this.convertGlyphTexturePositionsToUV();this.setTextureUV(e);const t=this.convertPositionsToLabelPosition();this.setLabelPosition(t);const o=this.convertVertexes();this.setPosition(o),this.pickingColors=this.convertPickingColors(),this.createMaterial(),this.material&&(this.mesh=new _.Mesh(this.geometry,this.material),this.mesh.frustumCulled=!1)}onDispose(){var e;(e=this.glyphTexture)===null||e===void 0||e.dispose()}}c(l,"LABEL_COLOR",new _.Color(0)),c(l,"LABEL_BACKGROUND_COLOR_DEFAULT",new _.Color(16777215)),c(l,"LABEL_BACKGROUND_COLOR_HOVER",new _.Color(2700001)),c(l,"LABEL_BACKGROUND_COLOR_HIGHLIGHT",new _.Color(2700001)),c(l,"LABEL_BACKGROUND_COLOR_FOCUS",new _.Color(2700001)),c(l,"LABEL_FONT","roboto"),c(l,"LABEL_FONT_SIZE",20),c(l,"LABEL_PADDING",[3,5]);
