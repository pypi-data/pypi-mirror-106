function i(O,t,e){return t in O?Object.defineProperty(O,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):O[t]=e,O}import*as r from"../../../../web_modules/three.js";import _ from"../ScatterChart.js";import m from"../ScatterChartLabel.js";import T from"./fragment.glsl.js";import C from"./vertex.glsl.js";export default class o extends _{get object(){return this.points}get defaultColor(){return o.POINT_COLOR_DEFAULT}get hoveredColor(){return o.POINT_COLOR_HOVER}get focusedColor(){return o.POINT_COLOR_FOCUS}get highLightColor(){return o.POINT_COLOR_HIGHLIGHT}constructor(t,e){super(t,e);i(this,"blending",r.MultiplyBlending),i(this,"depth",!1),i(this,"vertexShader",C),i(this,"fragmentShader",T),i(this,"scaleFactors",null),i(this,"points",null),i(this,"label",void 0),this.label=new m(this.container,{width:this.width,height:this.height}),this.fog=this.initFog()}initFog(){return new r.Fog(this.background)}createShaderUniforms(){const t=this.scene.fog;return{pointSize:{value:200/Math.log(this.dataCount)/Math.log(8)/(this.is3D?1:1.5)},sizeAttenuation:{value:this.is3D},fogColor:{value:t==null?void 0:t.color},fogNear:{value:t==null?void 0:t.near},fogFar:{value:t==null?void 0:t.far}}}setPointsScaleFactor(t){this.setGeometryAttribute("scaleFactor",t,1)}convertPointsColor(){const t=this.dataCount,e=new Float32Array(t*3);for(let s=0;s<t;s++){const n=this.getColorByIndex(s);e[s*3]=n.r,e[s*3+1]=n.g,e[s*3+2]=n.b}return e}convertPointsScaleFactor(){const t=this.dataCount,e=new Float32Array(t);for(let s=0;s<t;s++)this.hoveredDataIndices.includes(s)?e[s]=o.POINT_SCALE_HOVER:this.focusedDataIndices.includes(s)?e[s]=o.POINT_SCALE_FOCUS:this.highLightDataIndices.includes(s)?e[s]=o.POINT_SCALE_HIGHLIGHT:e[s]=o.POINT_SCALE_DEFAULT;return e}updateHoveredLabels(){if(!this.camera||!this.positions.length)return;const t=this.focusedDataIndices.length?this.focusedDataIndices:this.hoveredDataIndices;if(!t.length){this.label.clear();return}const e=window.devicePixelRatio||1,s=this.width,n=this.height,l=t.map(g=>{var h;const c=g*3,u=new r.Vector3(this.positions[c],this.positions[c+1],this.positions[c+2]),a=new r.Vector3().copy(u).project(this.camera),d=[(a.x+1)/2*s*e,-((a.y-1)/2*n)*e];return{text:(h=this.labels[g])!==null&&h!==void 0?h:"",fontSize:40,fillColor:"#000",strokeColor:"#fff",opacity:1,x:d[0]+4,y:d[1]}});this.label.render(l)}updateFog(){const t=this.fog;if(t){if(t.color=new r.Color(this.background),this.is3D&&this.positions.length){const e=this.camera.position,s=this.controls.target;let n=Number.POSITIVE_INFINITY,l=0;const g=new r.Vector3().copy(s).sub(e),h=new r.Vector3().copy(g).normalize(),c=this.positions.length/3;let u=0;const a=new r.Vector3,d=new r.Vector3;for(let I=0;I<c;I++){a.x=this.positions[u++],a.y=this.positions[u++],a.z=this.positions[u++],d.copy(a).sub(e);const f=h.dot(d);f<0||(l=f>l?f:l,n=f<n?f:n)}const p=2-Math.min(c,o.NUM_POINTS_FOG_THRESHOLD)/o.NUM_POINTS_FOG_THRESHOLD;t.near=n,t.far=l*p}else t.near=Number.POSITIVE_INFINITY,t.far=Number.POSITIVE_INFINITY;if(this.points){const e=this.points.material;e.uniforms.fogColor.value=t.color,e.uniforms.fogNear.value=t.near,e.uniforms.fogFar.value=t.far}this.scene.fog=t}}onRender(){this.colors=this.convertPointsColor(),this.updateFog(),this.updateHoveredLabels(),this.scaleFactors=this.convertPointsScaleFactor(),this.setPointsScaleFactor(this.scaleFactors)}onSetSize(t,e){this.label.setSize(t,e)}onDataSet(){this.setPosition(this.positions),this.createMaterial(),this.material&&(this.points=new r.Points(this.geometry,this.material),this.points.frustumCulled=!1)}onDispose(){this.label.dispose()}}i(o,"NUM_POINTS_FOG_THRESHOLD",5e3),i(o,"POINT_COLOR_DEFAULT",new r.Color(8289918)),i(o,"POINT_COLOR_HOVER",new r.Color(2700001)),i(o,"POINT_COLOR_HIGHLIGHT",new r.Color(2700001)),i(o,"POINT_COLOR_FOCUS",new r.Color(2700001)),i(o,"POINT_SCALE_DEFAULT",1),i(o,"POINT_SCALE_HOVER",1.2),i(o,"POINT_SCALE_HIGHLIGHT",1),i(o,"POINT_SCALE_FOCUS",1.2);
