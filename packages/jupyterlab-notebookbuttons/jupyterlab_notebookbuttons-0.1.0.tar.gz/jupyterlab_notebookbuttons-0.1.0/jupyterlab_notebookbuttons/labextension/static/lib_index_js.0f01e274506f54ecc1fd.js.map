{"version":3,"sources":["webpack://jupyterlab_notebookbuttons/./lib/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAwD;AACH;AACE;AACQ;AACnB;AAC5C;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,0DAAO;AAC7B;AACA;AACA;AACA;AACA,YAAY,iFAA+B;AAC3C;AACA;AACA,YAAY,6EAA2B;AACvC;AACA;AACA,YAAY,wEAAsB;AAClC;AACA,oCAAoC,+DAAa;AACjD;AACA;AACA;AACA;AACA,SAAS;AACT,uCAAuC,+DAAa;AACpD;AACA;AACA;AACA;AACA,SAAS;AACT,kCAAkC,+DAAa;AAC/C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kEAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yEAAgB;AAC/B;AACA;AACA,iEAAe,SAAS,EAAC","file":"lib_index_js.0f01e274506f54ecc1fd.js","sourcesContent":["import { DisposableDelegate } from '@lumino/disposable';\nimport { ToolbarButton } from '@jupyterlab/apputils';\nimport { NotebookActions } from '@jupyterlab/notebook';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { toArray } from '@lumino/algorithm';\n/**\n * A notebook widget extension that adds a button to the toolbar.\n */\nexport class ButtonExtension {\n    constructor(setting_registry) {\n        this.setting_registry = setting_registry;\n        console.log('constructor');\n        // read the settings\n        this.setup_settings();\n    }\n    setup_settings() {\n        Promise.all([this.setting_registry.load(extension.id)])\n            .then(([settings]) => {\n            console.log('reading settings');\n            this.settings = settings;\n            // update of settings is done automatically\n            //settings.changed.connect(() => {\n            //  this.update_settings(settings);\n            //});\n        })\n            .catch((reason) => {\n            console.error(reason.message);\n        });\n    }\n    /**\n     * Create a new extension object.\n     */\n    createNew(panel, context) {\n        // read all settings\n        const have_runall = this.settings.get('runall').composite;\n        const have_clearalloutputs = this.settings.get('clearalloutputs').composite;\n        const have_deletecells = this.settings.get('deletecells').composite;\n        let insert_before = this.settings.get('insertbefore').composite.toString();\n        // sanity check, if insert_before doesn't exist use the first element ...\n        const names = toArray(panel.toolbar.names());\n        if (names.includes(insert_before) === false) {\n            insert_before = names[0];\n        }\n        const callback_clearall = () => {\n            NotebookActions.clearAllOutputs(panel.content);\n        };\n        const callback_deletecells = () => {\n            NotebookActions.deleteCells(panel.content);\n        };\n        const callback_runall = () => {\n            NotebookActions.runAll(panel.content, context.sessionContext);\n        };\n        const clearall_button = new ToolbarButton({\n            className: 'jp-nb-buttons',\n            iconClass: 'fa fa-snowplow',\n            onClick: callback_clearall,\n            tooltip: 'Clear All Outputs'\n        });\n        const deletecells_button = new ToolbarButton({\n            className: 'jp-nb-buttons',\n            iconClass: 'fa fa-trash-alt',\n            onClick: callback_deletecells,\n            tooltip: 'Delete Cells'\n        });\n        const runall_button = new ToolbarButton({\n            className: 'jp-nb-buttons',\n            iconClass: 'fa fa-fast-forward',\n            onClick: callback_runall,\n            tooltip: 'Run all'\n        });\n        // start column to append the icons\n        if (have_deletecells === true) {\n            panel.toolbar.insertBefore(insert_before, 'jp-nb-deletecells', deletecells_button);\n        }\n        if (have_runall === true) {\n            panel.toolbar.insertBefore(insert_before, 'jp-nb-runall', runall_button);\n        }\n        if (have_clearalloutputs === true) {\n            panel.toolbar.insertBefore(insert_before, 'jp-nb-cleaarall', clearall_button);\n        }\n        return new DisposableDelegate(() => {\n            if (have_deletecells === true) {\n                deletecells_button.dispose();\n            }\n            if (have_runall === true) {\n                runall_button.dispose();\n            }\n            if (have_clearalloutputs === true) {\n                clearall_button.dispose();\n            }\n        });\n    }\n}\n/**\n * Activate the extension.\n */\nfunction activate(app, setting_registry) {\n    app.docRegistry.addWidgetExtension('Notebook', new ButtonExtension(setting_registry));\n    console.debug('JupyterLab extension jupyterlab_notebookbuttons is activated!');\n}\n/**\n * Initialization data for the jupyterlab_nbgrader extension.\n */\nconst extension = {\n    id: 'jupyterlab_notebookbuttons:plugin',\n    autoStart: true,\n    requires: [ISettingRegistry],\n    activate: activate\n};\nexport default extension;\n"],"sourceRoot":""}