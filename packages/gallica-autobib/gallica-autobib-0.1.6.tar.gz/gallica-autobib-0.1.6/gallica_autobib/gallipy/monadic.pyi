from typing import Any

class Monad:
    @staticmethod
    def pure(x: Any) -> None: ...
    def flat_map(self, f: Any) -> None: ...
    def map(self, f: Any) -> Any: ...

class Option(Monad):
    @staticmethod
    def pure(x: Any) -> Any: ...
    def flat_map(self, f: Any) -> Any: ...

class Some(Option):
    value: Any = ...
    defined: bool = ...
    def __init__(self, value: Any) -> None: ...

class Nil(Option):
    value: Any = ...
    defined: bool = ...
    def __init__(self) -> None: ...

nil: Any

class Either(Monad):
    @staticmethod
    def pure(value: Any) -> Any: ...
    def flat_map(self, f: Any) -> Any: ...

class Left(Either):
    value: Any = ...
    is_left: bool = ...
    def __init__(self, value: Any) -> None: ...

class Right(Either):
    value: Any = ...
    is_left: bool = ...
    def __init__(self, value: Any) -> None: ...

class Future(Monad):
    subscribers: Any = ...
    cache: Any = ...
    semaphore: Any = ...
    def __init__(self, f: Any) -> None: ...
    @staticmethod
    def pure(value: Any) -> Any: ...
    def exec(f: Any, cb: Any) -> None: ...
    def exec_on_thread(f: Any, cb: Any) -> None: ...
    def asyn(f: Any) -> Any: ...
    def flat_map(self, f: Any) -> Any: ...
    def traverse(arr: Any) -> Any: ...
    def callback(self, value: Any) -> None: ...
    def subscribe(self, subscriber: Any) -> None: ...
