# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'AwsInventorySourceAuthenticationArgs',
    'AwsInventorySourceDefaultDateFormatArgs',
    'AwsInventorySourceFilterArgs',
    'AwsInventorySourcePathArgs',
    'AwsInventorySourcePathTagFilterArgs',
    'AwsXraySourceAuthenticationArgs',
    'AwsXraySourceDefaultDateFormatArgs',
    'AwsXraySourceFilterArgs',
    'AwsXraySourcePathArgs',
    'AwsXraySourcePathTagFilterArgs',
    'CloudSyslogSourceDefaultDateFormatArgs',
    'CloudSyslogSourceFilterArgs',
    'CloudfrontSourceAuthenticationArgs',
    'CloudfrontSourceDefaultDateFormatArgs',
    'CloudfrontSourceFilterArgs',
    'CloudfrontSourcePathArgs',
    'CloudfrontSourcePathTagFilterArgs',
    'CloudtrailSourceAuthenticationArgs',
    'CloudtrailSourceDefaultDateFormatArgs',
    'CloudtrailSourceFilterArgs',
    'CloudtrailSourcePathArgs',
    'CloudtrailSourcePathTagFilterArgs',
    'CloudwatchSourceAuthenticationArgs',
    'CloudwatchSourceDefaultDateFormatArgs',
    'CloudwatchSourceFilterArgs',
    'CloudwatchSourcePathArgs',
    'CloudwatchSourcePathTagFilterArgs',
    'DashboardColoringRuleArgs',
    'DashboardColoringRuleColorThresholdArgs',
    'DashboardLayoutArgs',
    'DashboardLayoutGridArgs',
    'DashboardLayoutGridLayoutStructureArgs',
    'DashboardPanelArgs',
    'DashboardPanelSumoSearchPanelArgs',
    'DashboardPanelSumoSearchPanelColoringRuleArgs',
    'DashboardPanelSumoSearchPanelColoringRuleColorThresholdArgs',
    'DashboardPanelSumoSearchPanelLinkedDashboardArgs',
    'DashboardPanelSumoSearchPanelQueryArgs',
    'DashboardPanelSumoSearchPanelQueryMetricsQueryDataArgs',
    'DashboardPanelSumoSearchPanelQueryMetricsQueryDataFilterArgs',
    'DashboardPanelSumoSearchPanelQueryMetricsQueryDataOperatorArgs',
    'DashboardPanelSumoSearchPanelQueryMetricsQueryDataOperatorParameterArgs',
    'DashboardPanelSumoSearchPanelTimeRangeArgs',
    'DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeArgs',
    'DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromArgs',
    'DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromEpochTimeRangeArgs',
    'DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromIso8601TimeRangeArgs',
    'DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromLiteralTimeRangeArgs',
    'DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromRelativeTimeRangeArgs',
    'DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToArgs',
    'DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToEpochTimeRangeArgs',
    'DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToIso8601TimeRangeArgs',
    'DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToLiteralTimeRangeArgs',
    'DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToRelativeTimeRangeArgs',
    'DashboardPanelSumoSearchPanelTimeRangeCompleteLiteralTimeRangeArgs',
    'DashboardPanelTextPanelArgs',
    'DashboardTimeRangeArgs',
    'DashboardTimeRangeBeginBoundedTimeRangeArgs',
    'DashboardTimeRangeBeginBoundedTimeRangeFromArgs',
    'DashboardTimeRangeBeginBoundedTimeRangeFromEpochTimeRangeArgs',
    'DashboardTimeRangeBeginBoundedTimeRangeFromIso8601TimeRangeArgs',
    'DashboardTimeRangeBeginBoundedTimeRangeFromLiteralTimeRangeArgs',
    'DashboardTimeRangeBeginBoundedTimeRangeFromRelativeTimeRangeArgs',
    'DashboardTimeRangeBeginBoundedTimeRangeToArgs',
    'DashboardTimeRangeBeginBoundedTimeRangeToEpochTimeRangeArgs',
    'DashboardTimeRangeBeginBoundedTimeRangeToIso8601TimeRangeArgs',
    'DashboardTimeRangeBeginBoundedTimeRangeToLiteralTimeRangeArgs',
    'DashboardTimeRangeBeginBoundedTimeRangeToRelativeTimeRangeArgs',
    'DashboardTimeRangeCompleteLiteralTimeRangeArgs',
    'DashboardTopologyLabelMapArgs',
    'DashboardTopologyLabelMapDataArgs',
    'DashboardVariableArgs',
    'DashboardVariableSourceDefinitionArgs',
    'DashboardVariableSourceDefinitionCsvVariableSourceDefinitionArgs',
    'DashboardVariableSourceDefinitionLogQueryVariableSourceDefinitionArgs',
    'DashboardVariableSourceDefinitionMetadataVariableSourceDefinitionArgs',
    'ElbSourceAuthenticationArgs',
    'ElbSourceDefaultDateFormatArgs',
    'ElbSourceFilterArgs',
    'ElbSourcePathArgs',
    'ElbSourcePathTagFilterArgs',
    'GcpSourceAuthenticationArgs',
    'GcpSourceDefaultDateFormatArgs',
    'GcpSourceFilterArgs',
    'GcpSourcePathArgs',
    'HttpSourceDefaultDateFormatArgs',
    'HttpSourceFilterArgs',
    'KinesisMetricsSourceAuthenticationArgs',
    'KinesisMetricsSourceDefaultDateFormatArgs',
    'KinesisMetricsSourceFilterArgs',
    'KinesisMetricsSourcePathArgs',
    'KinesisMetricsSourcePathTagFilterArgs',
    'LookupTableFieldArgs',
    'MetadataSourceAuthenticationArgs',
    'MetadataSourceDefaultDateFormatArgs',
    'MetadataSourceFilterArgs',
    'MetadataSourcePathArgs',
    'MonitorNotificationArgs',
    'MonitorNotificationNotificationArgs',
    'MonitorQueryArgs',
    'MonitorTriggerArgs',
    'PollingSourceAuthenticationArgs',
    'PollingSourceDefaultDateFormatArgs',
    'PollingSourceFilterArgs',
    'PollingSourcePathArgs',
    'PollingSourcePathTagFilterArgs',
    'S3AuditSourceAuthenticationArgs',
    'S3AuditSourceDefaultDateFormatArgs',
    'S3AuditSourceFilterArgs',
    'S3AuditSourcePathArgs',
    'S3AuditSourcePathTagFilterArgs',
    'S3SourceAuthenticationArgs',
    'S3SourceDefaultDateFormatArgs',
    'S3SourceFilterArgs',
    'S3SourcePathArgs',
    'S3SourcePathTagFilterArgs',
    'SamlConfigurationOnDemandProvisioningEnabledArgs',
]

@pulumi.input_type
class AwsInventorySourceAuthenticationArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 access_key: Optional[pulumi.Input[str]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)


@pulumi.input_type
class AwsInventorySourceDefaultDateFormatArgs:
    def __init__(__self__, *,
                 format: pulumi.Input[str],
                 locator: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "format", format)
        if locator is not None:
            pulumi.set(__self__, "locator", locator)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def locator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "locator")

    @locator.setter
    def locator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "locator", value)


@pulumi.input_type
class AwsInventorySourceFilterArgs:
    def __init__(__self__, *,
                 filter_type: pulumi.Input[str],
                 name: pulumi.Input[str],
                 regexp: pulumi.Input[str],
                 mask: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "regexp", regexp)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def regexp(self) -> pulumi.Input[str]:
        return pulumi.get(self, "regexp")

    @regexp.setter
    def regexp(self, value: pulumi.Input[str]):
        pulumi.set(self, "regexp", value)

    @property
    @pulumi.getter
    def mask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mask")

    @mask.setter
    def mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mask", value)


@pulumi.input_type
class AwsInventorySourcePathArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 bucket_name: Optional[pulumi.Input[str]] = None,
                 limit_to_namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit_to_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 path_expression: Optional[pulumi.Input[str]] = None,
                 tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input['AwsInventorySourcePathTagFilterArgs']]]] = None):
        pulumi.set(__self__, "type", type)
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if limit_to_namespaces is not None:
            pulumi.set(__self__, "limit_to_namespaces", limit_to_namespaces)
        if limit_to_regions is not None:
            pulumi.set(__self__, "limit_to_regions", limit_to_regions)
        if path_expression is not None:
            pulumi.set(__self__, "path_expression", path_expression)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter(name="limitToNamespaces")
    def limit_to_namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "limit_to_namespaces")

    @limit_to_namespaces.setter
    def limit_to_namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "limit_to_namespaces", value)

    @property
    @pulumi.getter(name="limitToRegions")
    def limit_to_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "limit_to_regions")

    @limit_to_regions.setter
    def limit_to_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "limit_to_regions", value)

    @property
    @pulumi.getter(name="pathExpression")
    def path_expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path_expression")

    @path_expression.setter
    def path_expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path_expression", value)

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AwsInventorySourcePathTagFilterArgs']]]]:
        return pulumi.get(self, "tag_filters")

    @tag_filters.setter
    def tag_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AwsInventorySourcePathTagFilterArgs']]]]):
        pulumi.set(self, "tag_filters", value)


@pulumi.input_type
class AwsInventorySourcePathTagFilterArgs:
    def __init__(__self__, *,
                 namespace: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class AwsXraySourceAuthenticationArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 access_key: Optional[pulumi.Input[str]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)


@pulumi.input_type
class AwsXraySourceDefaultDateFormatArgs:
    def __init__(__self__, *,
                 format: pulumi.Input[str],
                 locator: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "format", format)
        if locator is not None:
            pulumi.set(__self__, "locator", locator)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def locator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "locator")

    @locator.setter
    def locator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "locator", value)


@pulumi.input_type
class AwsXraySourceFilterArgs:
    def __init__(__self__, *,
                 filter_type: pulumi.Input[str],
                 name: pulumi.Input[str],
                 regexp: pulumi.Input[str],
                 mask: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "regexp", regexp)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def regexp(self) -> pulumi.Input[str]:
        return pulumi.get(self, "regexp")

    @regexp.setter
    def regexp(self, value: pulumi.Input[str]):
        pulumi.set(self, "regexp", value)

    @property
    @pulumi.getter
    def mask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mask")

    @mask.setter
    def mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mask", value)


@pulumi.input_type
class AwsXraySourcePathArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 bucket_name: Optional[pulumi.Input[str]] = None,
                 limit_to_namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit_to_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 path_expression: Optional[pulumi.Input[str]] = None,
                 tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input['AwsXraySourcePathTagFilterArgs']]]] = None):
        pulumi.set(__self__, "type", type)
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if limit_to_namespaces is not None:
            pulumi.set(__self__, "limit_to_namespaces", limit_to_namespaces)
        if limit_to_regions is not None:
            pulumi.set(__self__, "limit_to_regions", limit_to_regions)
        if path_expression is not None:
            pulumi.set(__self__, "path_expression", path_expression)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter(name="limitToNamespaces")
    def limit_to_namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "limit_to_namespaces")

    @limit_to_namespaces.setter
    def limit_to_namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "limit_to_namespaces", value)

    @property
    @pulumi.getter(name="limitToRegions")
    def limit_to_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "limit_to_regions")

    @limit_to_regions.setter
    def limit_to_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "limit_to_regions", value)

    @property
    @pulumi.getter(name="pathExpression")
    def path_expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path_expression")

    @path_expression.setter
    def path_expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path_expression", value)

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AwsXraySourcePathTagFilterArgs']]]]:
        return pulumi.get(self, "tag_filters")

    @tag_filters.setter
    def tag_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AwsXraySourcePathTagFilterArgs']]]]):
        pulumi.set(self, "tag_filters", value)


@pulumi.input_type
class AwsXraySourcePathTagFilterArgs:
    def __init__(__self__, *,
                 namespace: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class CloudSyslogSourceDefaultDateFormatArgs:
    def __init__(__self__, *,
                 format: pulumi.Input[str],
                 locator: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "format", format)
        if locator is not None:
            pulumi.set(__self__, "locator", locator)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def locator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "locator")

    @locator.setter
    def locator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "locator", value)


@pulumi.input_type
class CloudSyslogSourceFilterArgs:
    def __init__(__self__, *,
                 filter_type: pulumi.Input[str],
                 name: pulumi.Input[str],
                 regexp: pulumi.Input[str],
                 mask: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "regexp", regexp)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def regexp(self) -> pulumi.Input[str]:
        return pulumi.get(self, "regexp")

    @regexp.setter
    def regexp(self, value: pulumi.Input[str]):
        pulumi.set(self, "regexp", value)

    @property
    @pulumi.getter
    def mask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mask")

    @mask.setter
    def mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mask", value)


@pulumi.input_type
class CloudfrontSourceAuthenticationArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 access_key: Optional[pulumi.Input[str]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)


@pulumi.input_type
class CloudfrontSourceDefaultDateFormatArgs:
    def __init__(__self__, *,
                 format: pulumi.Input[str],
                 locator: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "format", format)
        if locator is not None:
            pulumi.set(__self__, "locator", locator)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def locator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "locator")

    @locator.setter
    def locator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "locator", value)


@pulumi.input_type
class CloudfrontSourceFilterArgs:
    def __init__(__self__, *,
                 filter_type: pulumi.Input[str],
                 name: pulumi.Input[str],
                 regexp: pulumi.Input[str],
                 mask: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "regexp", regexp)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def regexp(self) -> pulumi.Input[str]:
        return pulumi.get(self, "regexp")

    @regexp.setter
    def regexp(self, value: pulumi.Input[str]):
        pulumi.set(self, "regexp", value)

    @property
    @pulumi.getter
    def mask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mask")

    @mask.setter
    def mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mask", value)


@pulumi.input_type
class CloudfrontSourcePathArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 bucket_name: Optional[pulumi.Input[str]] = None,
                 limit_to_namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit_to_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 path_expression: Optional[pulumi.Input[str]] = None,
                 tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input['CloudfrontSourcePathTagFilterArgs']]]] = None):
        pulumi.set(__self__, "type", type)
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if limit_to_namespaces is not None:
            pulumi.set(__self__, "limit_to_namespaces", limit_to_namespaces)
        if limit_to_regions is not None:
            pulumi.set(__self__, "limit_to_regions", limit_to_regions)
        if path_expression is not None:
            pulumi.set(__self__, "path_expression", path_expression)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter(name="limitToNamespaces")
    def limit_to_namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "limit_to_namespaces")

    @limit_to_namespaces.setter
    def limit_to_namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "limit_to_namespaces", value)

    @property
    @pulumi.getter(name="limitToRegions")
    def limit_to_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "limit_to_regions")

    @limit_to_regions.setter
    def limit_to_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "limit_to_regions", value)

    @property
    @pulumi.getter(name="pathExpression")
    def path_expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path_expression")

    @path_expression.setter
    def path_expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path_expression", value)

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CloudfrontSourcePathTagFilterArgs']]]]:
        return pulumi.get(self, "tag_filters")

    @tag_filters.setter
    def tag_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CloudfrontSourcePathTagFilterArgs']]]]):
        pulumi.set(self, "tag_filters", value)


@pulumi.input_type
class CloudfrontSourcePathTagFilterArgs:
    def __init__(__self__, *,
                 namespace: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class CloudtrailSourceAuthenticationArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 access_key: Optional[pulumi.Input[str]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)


@pulumi.input_type
class CloudtrailSourceDefaultDateFormatArgs:
    def __init__(__self__, *,
                 format: pulumi.Input[str],
                 locator: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "format", format)
        if locator is not None:
            pulumi.set(__self__, "locator", locator)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def locator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "locator")

    @locator.setter
    def locator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "locator", value)


@pulumi.input_type
class CloudtrailSourceFilterArgs:
    def __init__(__self__, *,
                 filter_type: pulumi.Input[str],
                 name: pulumi.Input[str],
                 regexp: pulumi.Input[str],
                 mask: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "regexp", regexp)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def regexp(self) -> pulumi.Input[str]:
        return pulumi.get(self, "regexp")

    @regexp.setter
    def regexp(self, value: pulumi.Input[str]):
        pulumi.set(self, "regexp", value)

    @property
    @pulumi.getter
    def mask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mask")

    @mask.setter
    def mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mask", value)


@pulumi.input_type
class CloudtrailSourcePathArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 bucket_name: Optional[pulumi.Input[str]] = None,
                 limit_to_namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit_to_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 path_expression: Optional[pulumi.Input[str]] = None,
                 tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input['CloudtrailSourcePathTagFilterArgs']]]] = None):
        pulumi.set(__self__, "type", type)
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if limit_to_namespaces is not None:
            pulumi.set(__self__, "limit_to_namespaces", limit_to_namespaces)
        if limit_to_regions is not None:
            pulumi.set(__self__, "limit_to_regions", limit_to_regions)
        if path_expression is not None:
            pulumi.set(__self__, "path_expression", path_expression)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter(name="limitToNamespaces")
    def limit_to_namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "limit_to_namespaces")

    @limit_to_namespaces.setter
    def limit_to_namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "limit_to_namespaces", value)

    @property
    @pulumi.getter(name="limitToRegions")
    def limit_to_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "limit_to_regions")

    @limit_to_regions.setter
    def limit_to_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "limit_to_regions", value)

    @property
    @pulumi.getter(name="pathExpression")
    def path_expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path_expression")

    @path_expression.setter
    def path_expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path_expression", value)

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CloudtrailSourcePathTagFilterArgs']]]]:
        return pulumi.get(self, "tag_filters")

    @tag_filters.setter
    def tag_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CloudtrailSourcePathTagFilterArgs']]]]):
        pulumi.set(self, "tag_filters", value)


@pulumi.input_type
class CloudtrailSourcePathTagFilterArgs:
    def __init__(__self__, *,
                 namespace: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class CloudwatchSourceAuthenticationArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 access_key: Optional[pulumi.Input[str]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)


@pulumi.input_type
class CloudwatchSourceDefaultDateFormatArgs:
    def __init__(__self__, *,
                 format: pulumi.Input[str],
                 locator: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "format", format)
        if locator is not None:
            pulumi.set(__self__, "locator", locator)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def locator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "locator")

    @locator.setter
    def locator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "locator", value)


@pulumi.input_type
class CloudwatchSourceFilterArgs:
    def __init__(__self__, *,
                 filter_type: pulumi.Input[str],
                 name: pulumi.Input[str],
                 regexp: pulumi.Input[str],
                 mask: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "regexp", regexp)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def regexp(self) -> pulumi.Input[str]:
        return pulumi.get(self, "regexp")

    @regexp.setter
    def regexp(self, value: pulumi.Input[str]):
        pulumi.set(self, "regexp", value)

    @property
    @pulumi.getter
    def mask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mask")

    @mask.setter
    def mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mask", value)


@pulumi.input_type
class CloudwatchSourcePathArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 bucket_name: Optional[pulumi.Input[str]] = None,
                 limit_to_namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit_to_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 path_expression: Optional[pulumi.Input[str]] = None,
                 tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input['CloudwatchSourcePathTagFilterArgs']]]] = None):
        pulumi.set(__self__, "type", type)
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if limit_to_namespaces is not None:
            pulumi.set(__self__, "limit_to_namespaces", limit_to_namespaces)
        if limit_to_regions is not None:
            pulumi.set(__self__, "limit_to_regions", limit_to_regions)
        if path_expression is not None:
            pulumi.set(__self__, "path_expression", path_expression)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter(name="limitToNamespaces")
    def limit_to_namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "limit_to_namespaces")

    @limit_to_namespaces.setter
    def limit_to_namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "limit_to_namespaces", value)

    @property
    @pulumi.getter(name="limitToRegions")
    def limit_to_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "limit_to_regions")

    @limit_to_regions.setter
    def limit_to_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "limit_to_regions", value)

    @property
    @pulumi.getter(name="pathExpression")
    def path_expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path_expression")

    @path_expression.setter
    def path_expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path_expression", value)

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CloudwatchSourcePathTagFilterArgs']]]]:
        return pulumi.get(self, "tag_filters")

    @tag_filters.setter
    def tag_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CloudwatchSourcePathTagFilterArgs']]]]):
        pulumi.set(self, "tag_filters", value)


@pulumi.input_type
class CloudwatchSourcePathTagFilterArgs:
    def __init__(__self__, *,
                 namespace: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DashboardColoringRuleArgs:
    def __init__(__self__, *,
                 multiple_series_aggregate_function: pulumi.Input[str],
                 scope: pulumi.Input[str],
                 single_series_aggregate_function: pulumi.Input[str],
                 color_thresholds: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColoringRuleColorThresholdArgs']]]] = None):
        pulumi.set(__self__, "multiple_series_aggregate_function", multiple_series_aggregate_function)
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "single_series_aggregate_function", single_series_aggregate_function)
        if color_thresholds is not None:
            pulumi.set(__self__, "color_thresholds", color_thresholds)

    @property
    @pulumi.getter(name="multipleSeriesAggregateFunction")
    def multiple_series_aggregate_function(self) -> pulumi.Input[str]:
        return pulumi.get(self, "multiple_series_aggregate_function")

    @multiple_series_aggregate_function.setter
    def multiple_series_aggregate_function(self, value: pulumi.Input[str]):
        pulumi.set(self, "multiple_series_aggregate_function", value)

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Input[str]:
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: pulumi.Input[str]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="singleSeriesAggregateFunction")
    def single_series_aggregate_function(self) -> pulumi.Input[str]:
        return pulumi.get(self, "single_series_aggregate_function")

    @single_series_aggregate_function.setter
    def single_series_aggregate_function(self, value: pulumi.Input[str]):
        pulumi.set(self, "single_series_aggregate_function", value)

    @property
    @pulumi.getter(name="colorThresholds")
    def color_thresholds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColoringRuleColorThresholdArgs']]]]:
        return pulumi.get(self, "color_thresholds")

    @color_thresholds.setter
    def color_thresholds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColoringRuleColorThresholdArgs']]]]):
        pulumi.set(self, "color_thresholds", value)


@pulumi.input_type
class DashboardColoringRuleColorThresholdArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[str],
                 max: Optional[pulumi.Input[float]] = None,
                 min: Optional[pulumi.Input[float]] = None):
        pulumi.set(__self__, "color", color)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "min", value)


@pulumi.input_type
class DashboardLayoutArgs:
    def __init__(__self__, *,
                 grid: Optional[pulumi.Input['DashboardLayoutGridArgs']] = None):
        if grid is not None:
            pulumi.set(__self__, "grid", grid)

    @property
    @pulumi.getter
    def grid(self) -> Optional[pulumi.Input['DashboardLayoutGridArgs']]:
        return pulumi.get(self, "grid")

    @grid.setter
    def grid(self, value: Optional[pulumi.Input['DashboardLayoutGridArgs']]):
        pulumi.set(self, "grid", value)


@pulumi.input_type
class DashboardLayoutGridArgs:
    def __init__(__self__, *,
                 layout_structures: pulumi.Input[Sequence[pulumi.Input['DashboardLayoutGridLayoutStructureArgs']]]):
        pulumi.set(__self__, "layout_structures", layout_structures)

    @property
    @pulumi.getter(name="layoutStructures")
    def layout_structures(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardLayoutGridLayoutStructureArgs']]]:
        return pulumi.get(self, "layout_structures")

    @layout_structures.setter
    def layout_structures(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardLayoutGridLayoutStructureArgs']]]):
        pulumi.set(self, "layout_structures", value)


@pulumi.input_type
class DashboardLayoutGridLayoutStructureArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 structure: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "structure", structure)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def structure(self) -> pulumi.Input[str]:
        return pulumi.get(self, "structure")

    @structure.setter
    def structure(self, value: pulumi.Input[str]):
        pulumi.set(self, "structure", value)


@pulumi.input_type
class DashboardPanelArgs:
    def __init__(__self__, *,
                 sumo_search_panel: Optional[pulumi.Input['DashboardPanelSumoSearchPanelArgs']] = None,
                 text_panel: Optional[pulumi.Input['DashboardPanelTextPanelArgs']] = None):
        if sumo_search_panel is not None:
            pulumi.set(__self__, "sumo_search_panel", sumo_search_panel)
        if text_panel is not None:
            pulumi.set(__self__, "text_panel", text_panel)

    @property
    @pulumi.getter(name="sumoSearchPanel")
    def sumo_search_panel(self) -> Optional[pulumi.Input['DashboardPanelSumoSearchPanelArgs']]:
        return pulumi.get(self, "sumo_search_panel")

    @sumo_search_panel.setter
    def sumo_search_panel(self, value: Optional[pulumi.Input['DashboardPanelSumoSearchPanelArgs']]):
        pulumi.set(self, "sumo_search_panel", value)

    @property
    @pulumi.getter(name="textPanel")
    def text_panel(self) -> Optional[pulumi.Input['DashboardPanelTextPanelArgs']]:
        return pulumi.get(self, "text_panel")

    @text_panel.setter
    def text_panel(self, value: Optional[pulumi.Input['DashboardPanelTextPanelArgs']]):
        pulumi.set(self, "text_panel", value)


@pulumi.input_type
class DashboardPanelSumoSearchPanelArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 coloring_rule: Optional[pulumi.Input['DashboardPanelSumoSearchPanelColoringRuleArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 keep_visual_settings_consistent_with_parent: Optional[pulumi.Input[bool]] = None,
                 linked_dashboard: Optional[pulumi.Input['DashboardPanelSumoSearchPanelLinkedDashboardArgs']] = None,
                 queries: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPanelSumoSearchPanelQueryArgs']]]] = None,
                 time_range: Optional[pulumi.Input['DashboardPanelSumoSearchPanelTimeRangeArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 visual_settings: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        if coloring_rule is not None:
            pulumi.set(__self__, "coloring_rule", coloring_rule)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if keep_visual_settings_consistent_with_parent is not None:
            pulumi.set(__self__, "keep_visual_settings_consistent_with_parent", keep_visual_settings_consistent_with_parent)
        if linked_dashboard is not None:
            pulumi.set(__self__, "linked_dashboard", linked_dashboard)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if time_range is not None:
            pulumi.set(__self__, "time_range", time_range)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if visual_settings is not None:
            pulumi.set(__self__, "visual_settings", visual_settings)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="coloringRule")
    def coloring_rule(self) -> Optional[pulumi.Input['DashboardPanelSumoSearchPanelColoringRuleArgs']]:
        return pulumi.get(self, "coloring_rule")

    @coloring_rule.setter
    def coloring_rule(self, value: Optional[pulumi.Input['DashboardPanelSumoSearchPanelColoringRuleArgs']]):
        pulumi.set(self, "coloring_rule", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="keepVisualSettingsConsistentWithParent")
    def keep_visual_settings_consistent_with_parent(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "keep_visual_settings_consistent_with_parent")

    @keep_visual_settings_consistent_with_parent.setter
    def keep_visual_settings_consistent_with_parent(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "keep_visual_settings_consistent_with_parent", value)

    @property
    @pulumi.getter(name="linkedDashboard")
    def linked_dashboard(self) -> Optional[pulumi.Input['DashboardPanelSumoSearchPanelLinkedDashboardArgs']]:
        return pulumi.get(self, "linked_dashboard")

    @linked_dashboard.setter
    def linked_dashboard(self, value: Optional[pulumi.Input['DashboardPanelSumoSearchPanelLinkedDashboardArgs']]):
        pulumi.set(self, "linked_dashboard", value)

    @property
    @pulumi.getter
    def queries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPanelSumoSearchPanelQueryArgs']]]]:
        return pulumi.get(self, "queries")

    @queries.setter
    def queries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPanelSumoSearchPanelQueryArgs']]]]):
        pulumi.set(self, "queries", value)

    @property
    @pulumi.getter(name="timeRange")
    def time_range(self) -> Optional[pulumi.Input['DashboardPanelSumoSearchPanelTimeRangeArgs']]:
        return pulumi.get(self, "time_range")

    @time_range.setter
    def time_range(self, value: Optional[pulumi.Input['DashboardPanelSumoSearchPanelTimeRangeArgs']]):
        pulumi.set(self, "time_range", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="visualSettings")
    def visual_settings(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "visual_settings")

    @visual_settings.setter
    def visual_settings(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visual_settings", value)


@pulumi.input_type
class DashboardPanelSumoSearchPanelColoringRuleArgs:
    def __init__(__self__, *,
                 multiple_series_aggregate_function: pulumi.Input[str],
                 scope: pulumi.Input[str],
                 single_series_aggregate_function: pulumi.Input[str],
                 color_thresholds: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPanelSumoSearchPanelColoringRuleColorThresholdArgs']]]] = None):
        pulumi.set(__self__, "multiple_series_aggregate_function", multiple_series_aggregate_function)
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "single_series_aggregate_function", single_series_aggregate_function)
        if color_thresholds is not None:
            pulumi.set(__self__, "color_thresholds", color_thresholds)

    @property
    @pulumi.getter(name="multipleSeriesAggregateFunction")
    def multiple_series_aggregate_function(self) -> pulumi.Input[str]:
        return pulumi.get(self, "multiple_series_aggregate_function")

    @multiple_series_aggregate_function.setter
    def multiple_series_aggregate_function(self, value: pulumi.Input[str]):
        pulumi.set(self, "multiple_series_aggregate_function", value)

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Input[str]:
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: pulumi.Input[str]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="singleSeriesAggregateFunction")
    def single_series_aggregate_function(self) -> pulumi.Input[str]:
        return pulumi.get(self, "single_series_aggregate_function")

    @single_series_aggregate_function.setter
    def single_series_aggregate_function(self, value: pulumi.Input[str]):
        pulumi.set(self, "single_series_aggregate_function", value)

    @property
    @pulumi.getter(name="colorThresholds")
    def color_thresholds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPanelSumoSearchPanelColoringRuleColorThresholdArgs']]]]:
        return pulumi.get(self, "color_thresholds")

    @color_thresholds.setter
    def color_thresholds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPanelSumoSearchPanelColoringRuleColorThresholdArgs']]]]):
        pulumi.set(self, "color_thresholds", value)


@pulumi.input_type
class DashboardPanelSumoSearchPanelColoringRuleColorThresholdArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[str],
                 max: Optional[pulumi.Input[float]] = None,
                 min: Optional[pulumi.Input[float]] = None):
        pulumi.set(__self__, "color", color)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "min", value)


@pulumi.input_type
class DashboardPanelSumoSearchPanelLinkedDashboardArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 include_time_range: Optional[pulumi.Input[bool]] = None,
                 include_variables: Optional[pulumi.Input[bool]] = None,
                 relative_path: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "id", id)
        if include_time_range is not None:
            pulumi.set(__self__, "include_time_range", include_time_range)
        if include_variables is not None:
            pulumi.set(__self__, "include_variables", include_variables)
        if relative_path is not None:
            pulumi.set(__self__, "relative_path", relative_path)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="includeTimeRange")
    def include_time_range(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_time_range")

    @include_time_range.setter
    def include_time_range(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_time_range", value)

    @property
    @pulumi.getter(name="includeVariables")
    def include_variables(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_variables")

    @include_variables.setter
    def include_variables(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_variables", value)

    @property
    @pulumi.getter(name="relativePath")
    def relative_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "relative_path")

    @relative_path.setter
    def relative_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "relative_path", value)


@pulumi.input_type
class DashboardPanelSumoSearchPanelQueryArgs:
    def __init__(__self__, *,
                 query_key: pulumi.Input[str],
                 query_string: pulumi.Input[str],
                 query_type: pulumi.Input[str],
                 metrics_query_data: Optional[pulumi.Input['DashboardPanelSumoSearchPanelQueryMetricsQueryDataArgs']] = None,
                 metrics_query_mode: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "query_key", query_key)
        pulumi.set(__self__, "query_string", query_string)
        pulumi.set(__self__, "query_type", query_type)
        if metrics_query_data is not None:
            pulumi.set(__self__, "metrics_query_data", metrics_query_data)
        if metrics_query_mode is not None:
            pulumi.set(__self__, "metrics_query_mode", metrics_query_mode)

    @property
    @pulumi.getter(name="queryKey")
    def query_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query_key")

    @query_key.setter
    def query_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "query_key", value)

    @property
    @pulumi.getter(name="queryString")
    def query_string(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query_string")

    @query_string.setter
    def query_string(self, value: pulumi.Input[str]):
        pulumi.set(self, "query_string", value)

    @property
    @pulumi.getter(name="queryType")
    def query_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query_type")

    @query_type.setter
    def query_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "query_type", value)

    @property
    @pulumi.getter(name="metricsQueryData")
    def metrics_query_data(self) -> Optional[pulumi.Input['DashboardPanelSumoSearchPanelQueryMetricsQueryDataArgs']]:
        return pulumi.get(self, "metrics_query_data")

    @metrics_query_data.setter
    def metrics_query_data(self, value: Optional[pulumi.Input['DashboardPanelSumoSearchPanelQueryMetricsQueryDataArgs']]):
        pulumi.set(self, "metrics_query_data", value)

    @property
    @pulumi.getter(name="metricsQueryMode")
    def metrics_query_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "metrics_query_mode")

    @metrics_query_mode.setter
    def metrics_query_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metrics_query_mode", value)


@pulumi.input_type
class DashboardPanelSumoSearchPanelQueryMetricsQueryDataArgs:
    def __init__(__self__, *,
                 filters: pulumi.Input[Sequence[pulumi.Input['DashboardPanelSumoSearchPanelQueryMetricsQueryDataFilterArgs']]],
                 metric: pulumi.Input[str],
                 aggregation_type: Optional[pulumi.Input[str]] = None,
                 group_by: Optional[pulumi.Input[str]] = None,
                 operators: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPanelSumoSearchPanelQueryMetricsQueryDataOperatorArgs']]]] = None):
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "metric", metric)
        if aggregation_type is not None:
            pulumi.set(__self__, "aggregation_type", aggregation_type)
        if group_by is not None:
            pulumi.set(__self__, "group_by", group_by)
        if operators is not None:
            pulumi.set(__self__, "operators", operators)

    @property
    @pulumi.getter
    def filters(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardPanelSumoSearchPanelQueryMetricsQueryDataFilterArgs']]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardPanelSumoSearchPanelQueryMetricsQueryDataFilterArgs']]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="aggregationType")
    def aggregation_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aggregation_type")

    @aggregation_type.setter
    def aggregation_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregation_type", value)

    @property
    @pulumi.getter(name="groupBy")
    def group_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_by")

    @group_by.setter
    def group_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_by", value)

    @property
    @pulumi.getter
    def operators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPanelSumoSearchPanelQueryMetricsQueryDataOperatorArgs']]]]:
        return pulumi.get(self, "operators")

    @operators.setter
    def operators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPanelSumoSearchPanelQueryMetricsQueryDataOperatorArgs']]]]):
        pulumi.set(self, "operators", value)


@pulumi.input_type
class DashboardPanelSumoSearchPanelQueryMetricsQueryDataFilterArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str],
                 negation: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)
        if negation is not None:
            pulumi.set(__self__, "negation", negation)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def negation(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negation")

    @negation.setter
    def negation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negation", value)


@pulumi.input_type
class DashboardPanelSumoSearchPanelQueryMetricsQueryDataOperatorArgs:
    def __init__(__self__, *,
                 operator_name: pulumi.Input[str],
                 parameters: pulumi.Input[Sequence[pulumi.Input['DashboardPanelSumoSearchPanelQueryMetricsQueryDataOperatorParameterArgs']]]):
        pulumi.set(__self__, "operator_name", operator_name)
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter(name="operatorName")
    def operator_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator_name")

    @operator_name.setter
    def operator_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator_name", value)

    @property
    @pulumi.getter
    def parameters(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardPanelSumoSearchPanelQueryMetricsQueryDataOperatorParameterArgs']]]:
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardPanelSumoSearchPanelQueryMetricsQueryDataOperatorParameterArgs']]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class DashboardPanelSumoSearchPanelQueryMetricsQueryDataOperatorParameterArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DashboardPanelSumoSearchPanelTimeRangeArgs:
    def __init__(__self__, *,
                 begin_bounded_time_range: Optional[pulumi.Input['DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeArgs']] = None,
                 complete_literal_time_range: Optional[pulumi.Input['DashboardPanelSumoSearchPanelTimeRangeCompleteLiteralTimeRangeArgs']] = None):
        if begin_bounded_time_range is not None:
            pulumi.set(__self__, "begin_bounded_time_range", begin_bounded_time_range)
        if complete_literal_time_range is not None:
            pulumi.set(__self__, "complete_literal_time_range", complete_literal_time_range)

    @property
    @pulumi.getter(name="beginBoundedTimeRange")
    def begin_bounded_time_range(self) -> Optional[pulumi.Input['DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeArgs']]:
        return pulumi.get(self, "begin_bounded_time_range")

    @begin_bounded_time_range.setter
    def begin_bounded_time_range(self, value: Optional[pulumi.Input['DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeArgs']]):
        pulumi.set(self, "begin_bounded_time_range", value)

    @property
    @pulumi.getter(name="completeLiteralTimeRange")
    def complete_literal_time_range(self) -> Optional[pulumi.Input['DashboardPanelSumoSearchPanelTimeRangeCompleteLiteralTimeRangeArgs']]:
        return pulumi.get(self, "complete_literal_time_range")

    @complete_literal_time_range.setter
    def complete_literal_time_range(self, value: Optional[pulumi.Input['DashboardPanelSumoSearchPanelTimeRangeCompleteLiteralTimeRangeArgs']]):
        pulumi.set(self, "complete_literal_time_range", value)


@pulumi.input_type
class DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeArgs:
    def __init__(__self__, *,
                 from_: pulumi.Input['DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromArgs'],
                 to: Optional[pulumi.Input['DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToArgs']] = None):
        pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> pulumi.Input['DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromArgs']:
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: pulumi.Input['DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromArgs']):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[pulumi.Input['DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToArgs']]:
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[pulumi.Input['DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToArgs']]):
        pulumi.set(self, "to", value)


@pulumi.input_type
class DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromArgs:
    def __init__(__self__, *,
                 epoch_time_range: Optional[pulumi.Input['DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromEpochTimeRangeArgs']] = None,
                 iso8601_time_range: Optional[pulumi.Input['DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromIso8601TimeRangeArgs']] = None,
                 literal_time_range: Optional[pulumi.Input['DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromLiteralTimeRangeArgs']] = None,
                 relative_time_range: Optional[pulumi.Input['DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromRelativeTimeRangeArgs']] = None):
        if epoch_time_range is not None:
            pulumi.set(__self__, "epoch_time_range", epoch_time_range)
        if iso8601_time_range is not None:
            pulumi.set(__self__, "iso8601_time_range", iso8601_time_range)
        if literal_time_range is not None:
            pulumi.set(__self__, "literal_time_range", literal_time_range)
        if relative_time_range is not None:
            pulumi.set(__self__, "relative_time_range", relative_time_range)

    @property
    @pulumi.getter(name="epochTimeRange")
    def epoch_time_range(self) -> Optional[pulumi.Input['DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromEpochTimeRangeArgs']]:
        return pulumi.get(self, "epoch_time_range")

    @epoch_time_range.setter
    def epoch_time_range(self, value: Optional[pulumi.Input['DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromEpochTimeRangeArgs']]):
        pulumi.set(self, "epoch_time_range", value)

    @property
    @pulumi.getter(name="iso8601TimeRange")
    def iso8601_time_range(self) -> Optional[pulumi.Input['DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromIso8601TimeRangeArgs']]:
        return pulumi.get(self, "iso8601_time_range")

    @iso8601_time_range.setter
    def iso8601_time_range(self, value: Optional[pulumi.Input['DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromIso8601TimeRangeArgs']]):
        pulumi.set(self, "iso8601_time_range", value)

    @property
    @pulumi.getter(name="literalTimeRange")
    def literal_time_range(self) -> Optional[pulumi.Input['DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromLiteralTimeRangeArgs']]:
        return pulumi.get(self, "literal_time_range")

    @literal_time_range.setter
    def literal_time_range(self, value: Optional[pulumi.Input['DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromLiteralTimeRangeArgs']]):
        pulumi.set(self, "literal_time_range", value)

    @property
    @pulumi.getter(name="relativeTimeRange")
    def relative_time_range(self) -> Optional[pulumi.Input['DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromRelativeTimeRangeArgs']]:
        return pulumi.get(self, "relative_time_range")

    @relative_time_range.setter
    def relative_time_range(self, value: Optional[pulumi.Input['DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromRelativeTimeRangeArgs']]):
        pulumi.set(self, "relative_time_range", value)


@pulumi.input_type
class DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromEpochTimeRangeArgs:
    def __init__(__self__, *,
                 epoch_millis: pulumi.Input[int]):
        pulumi.set(__self__, "epoch_millis", epoch_millis)

    @property
    @pulumi.getter(name="epochMillis")
    def epoch_millis(self) -> pulumi.Input[int]:
        return pulumi.get(self, "epoch_millis")

    @epoch_millis.setter
    def epoch_millis(self, value: pulumi.Input[int]):
        pulumi.set(self, "epoch_millis", value)


@pulumi.input_type
class DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromIso8601TimeRangeArgs:
    def __init__(__self__, *,
                 iso8601_time: pulumi.Input[str]):
        pulumi.set(__self__, "iso8601_time", iso8601_time)

    @property
    @pulumi.getter(name="iso8601Time")
    def iso8601_time(self) -> pulumi.Input[str]:
        return pulumi.get(self, "iso8601_time")

    @iso8601_time.setter
    def iso8601_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "iso8601_time", value)


@pulumi.input_type
class DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromLiteralTimeRangeArgs:
    def __init__(__self__, *,
                 range_name: pulumi.Input[str]):
        pulumi.set(__self__, "range_name", range_name)

    @property
    @pulumi.getter(name="rangeName")
    def range_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "range_name")

    @range_name.setter
    def range_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "range_name", value)


@pulumi.input_type
class DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromRelativeTimeRangeArgs:
    def __init__(__self__, *,
                 relative_time: pulumi.Input[str]):
        pulumi.set(__self__, "relative_time", relative_time)

    @property
    @pulumi.getter(name="relativeTime")
    def relative_time(self) -> pulumi.Input[str]:
        return pulumi.get(self, "relative_time")

    @relative_time.setter
    def relative_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "relative_time", value)


@pulumi.input_type
class DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToArgs:
    def __init__(__self__, *,
                 epoch_time_range: Optional[pulumi.Input['DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToEpochTimeRangeArgs']] = None,
                 iso8601_time_range: Optional[pulumi.Input['DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToIso8601TimeRangeArgs']] = None,
                 literal_time_range: Optional[pulumi.Input['DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToLiteralTimeRangeArgs']] = None,
                 relative_time_range: Optional[pulumi.Input['DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToRelativeTimeRangeArgs']] = None):
        if epoch_time_range is not None:
            pulumi.set(__self__, "epoch_time_range", epoch_time_range)
        if iso8601_time_range is not None:
            pulumi.set(__self__, "iso8601_time_range", iso8601_time_range)
        if literal_time_range is not None:
            pulumi.set(__self__, "literal_time_range", literal_time_range)
        if relative_time_range is not None:
            pulumi.set(__self__, "relative_time_range", relative_time_range)

    @property
    @pulumi.getter(name="epochTimeRange")
    def epoch_time_range(self) -> Optional[pulumi.Input['DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToEpochTimeRangeArgs']]:
        return pulumi.get(self, "epoch_time_range")

    @epoch_time_range.setter
    def epoch_time_range(self, value: Optional[pulumi.Input['DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToEpochTimeRangeArgs']]):
        pulumi.set(self, "epoch_time_range", value)

    @property
    @pulumi.getter(name="iso8601TimeRange")
    def iso8601_time_range(self) -> Optional[pulumi.Input['DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToIso8601TimeRangeArgs']]:
        return pulumi.get(self, "iso8601_time_range")

    @iso8601_time_range.setter
    def iso8601_time_range(self, value: Optional[pulumi.Input['DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToIso8601TimeRangeArgs']]):
        pulumi.set(self, "iso8601_time_range", value)

    @property
    @pulumi.getter(name="literalTimeRange")
    def literal_time_range(self) -> Optional[pulumi.Input['DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToLiteralTimeRangeArgs']]:
        return pulumi.get(self, "literal_time_range")

    @literal_time_range.setter
    def literal_time_range(self, value: Optional[pulumi.Input['DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToLiteralTimeRangeArgs']]):
        pulumi.set(self, "literal_time_range", value)

    @property
    @pulumi.getter(name="relativeTimeRange")
    def relative_time_range(self) -> Optional[pulumi.Input['DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToRelativeTimeRangeArgs']]:
        return pulumi.get(self, "relative_time_range")

    @relative_time_range.setter
    def relative_time_range(self, value: Optional[pulumi.Input['DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToRelativeTimeRangeArgs']]):
        pulumi.set(self, "relative_time_range", value)


@pulumi.input_type
class DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToEpochTimeRangeArgs:
    def __init__(__self__, *,
                 epoch_millis: pulumi.Input[int]):
        pulumi.set(__self__, "epoch_millis", epoch_millis)

    @property
    @pulumi.getter(name="epochMillis")
    def epoch_millis(self) -> pulumi.Input[int]:
        return pulumi.get(self, "epoch_millis")

    @epoch_millis.setter
    def epoch_millis(self, value: pulumi.Input[int]):
        pulumi.set(self, "epoch_millis", value)


@pulumi.input_type
class DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToIso8601TimeRangeArgs:
    def __init__(__self__, *,
                 iso8601_time: pulumi.Input[str]):
        pulumi.set(__self__, "iso8601_time", iso8601_time)

    @property
    @pulumi.getter(name="iso8601Time")
    def iso8601_time(self) -> pulumi.Input[str]:
        return pulumi.get(self, "iso8601_time")

    @iso8601_time.setter
    def iso8601_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "iso8601_time", value)


@pulumi.input_type
class DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToLiteralTimeRangeArgs:
    def __init__(__self__, *,
                 range_name: pulumi.Input[str]):
        pulumi.set(__self__, "range_name", range_name)

    @property
    @pulumi.getter(name="rangeName")
    def range_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "range_name")

    @range_name.setter
    def range_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "range_name", value)


@pulumi.input_type
class DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToRelativeTimeRangeArgs:
    def __init__(__self__, *,
                 relative_time: pulumi.Input[str]):
        pulumi.set(__self__, "relative_time", relative_time)

    @property
    @pulumi.getter(name="relativeTime")
    def relative_time(self) -> pulumi.Input[str]:
        return pulumi.get(self, "relative_time")

    @relative_time.setter
    def relative_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "relative_time", value)


@pulumi.input_type
class DashboardPanelSumoSearchPanelTimeRangeCompleteLiteralTimeRangeArgs:
    def __init__(__self__, *,
                 range_name: pulumi.Input[str]):
        pulumi.set(__self__, "range_name", range_name)

    @property
    @pulumi.getter(name="rangeName")
    def range_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "range_name")

    @range_name.setter
    def range_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "range_name", value)


@pulumi.input_type
class DashboardPanelTextPanelArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 id: Optional[pulumi.Input[str]] = None,
                 keep_visual_settings_consistent_with_parent: Optional[pulumi.Input[bool]] = None,
                 text: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 visual_settings: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if keep_visual_settings_consistent_with_parent is not None:
            pulumi.set(__self__, "keep_visual_settings_consistent_with_parent", keep_visual_settings_consistent_with_parent)
        if text is not None:
            pulumi.set(__self__, "text", text)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if visual_settings is not None:
            pulumi.set(__self__, "visual_settings", visual_settings)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="keepVisualSettingsConsistentWithParent")
    def keep_visual_settings_consistent_with_parent(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "keep_visual_settings_consistent_with_parent")

    @keep_visual_settings_consistent_with_parent.setter
    def keep_visual_settings_consistent_with_parent(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "keep_visual_settings_consistent_with_parent", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="visualSettings")
    def visual_settings(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "visual_settings")

    @visual_settings.setter
    def visual_settings(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visual_settings", value)


@pulumi.input_type
class DashboardTimeRangeArgs:
    def __init__(__self__, *,
                 begin_bounded_time_range: Optional[pulumi.Input['DashboardTimeRangeBeginBoundedTimeRangeArgs']] = None,
                 complete_literal_time_range: Optional[pulumi.Input['DashboardTimeRangeCompleteLiteralTimeRangeArgs']] = None):
        if begin_bounded_time_range is not None:
            pulumi.set(__self__, "begin_bounded_time_range", begin_bounded_time_range)
        if complete_literal_time_range is not None:
            pulumi.set(__self__, "complete_literal_time_range", complete_literal_time_range)

    @property
    @pulumi.getter(name="beginBoundedTimeRange")
    def begin_bounded_time_range(self) -> Optional[pulumi.Input['DashboardTimeRangeBeginBoundedTimeRangeArgs']]:
        return pulumi.get(self, "begin_bounded_time_range")

    @begin_bounded_time_range.setter
    def begin_bounded_time_range(self, value: Optional[pulumi.Input['DashboardTimeRangeBeginBoundedTimeRangeArgs']]):
        pulumi.set(self, "begin_bounded_time_range", value)

    @property
    @pulumi.getter(name="completeLiteralTimeRange")
    def complete_literal_time_range(self) -> Optional[pulumi.Input['DashboardTimeRangeCompleteLiteralTimeRangeArgs']]:
        return pulumi.get(self, "complete_literal_time_range")

    @complete_literal_time_range.setter
    def complete_literal_time_range(self, value: Optional[pulumi.Input['DashboardTimeRangeCompleteLiteralTimeRangeArgs']]):
        pulumi.set(self, "complete_literal_time_range", value)


@pulumi.input_type
class DashboardTimeRangeBeginBoundedTimeRangeArgs:
    def __init__(__self__, *,
                 from_: pulumi.Input['DashboardTimeRangeBeginBoundedTimeRangeFromArgs'],
                 to: Optional[pulumi.Input['DashboardTimeRangeBeginBoundedTimeRangeToArgs']] = None):
        pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> pulumi.Input['DashboardTimeRangeBeginBoundedTimeRangeFromArgs']:
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: pulumi.Input['DashboardTimeRangeBeginBoundedTimeRangeFromArgs']):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[pulumi.Input['DashboardTimeRangeBeginBoundedTimeRangeToArgs']]:
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[pulumi.Input['DashboardTimeRangeBeginBoundedTimeRangeToArgs']]):
        pulumi.set(self, "to", value)


@pulumi.input_type
class DashboardTimeRangeBeginBoundedTimeRangeFromArgs:
    def __init__(__self__, *,
                 epoch_time_range: Optional[pulumi.Input['DashboardTimeRangeBeginBoundedTimeRangeFromEpochTimeRangeArgs']] = None,
                 iso8601_time_range: Optional[pulumi.Input['DashboardTimeRangeBeginBoundedTimeRangeFromIso8601TimeRangeArgs']] = None,
                 literal_time_range: Optional[pulumi.Input['DashboardTimeRangeBeginBoundedTimeRangeFromLiteralTimeRangeArgs']] = None,
                 relative_time_range: Optional[pulumi.Input['DashboardTimeRangeBeginBoundedTimeRangeFromRelativeTimeRangeArgs']] = None):
        if epoch_time_range is not None:
            pulumi.set(__self__, "epoch_time_range", epoch_time_range)
        if iso8601_time_range is not None:
            pulumi.set(__self__, "iso8601_time_range", iso8601_time_range)
        if literal_time_range is not None:
            pulumi.set(__self__, "literal_time_range", literal_time_range)
        if relative_time_range is not None:
            pulumi.set(__self__, "relative_time_range", relative_time_range)

    @property
    @pulumi.getter(name="epochTimeRange")
    def epoch_time_range(self) -> Optional[pulumi.Input['DashboardTimeRangeBeginBoundedTimeRangeFromEpochTimeRangeArgs']]:
        return pulumi.get(self, "epoch_time_range")

    @epoch_time_range.setter
    def epoch_time_range(self, value: Optional[pulumi.Input['DashboardTimeRangeBeginBoundedTimeRangeFromEpochTimeRangeArgs']]):
        pulumi.set(self, "epoch_time_range", value)

    @property
    @pulumi.getter(name="iso8601TimeRange")
    def iso8601_time_range(self) -> Optional[pulumi.Input['DashboardTimeRangeBeginBoundedTimeRangeFromIso8601TimeRangeArgs']]:
        return pulumi.get(self, "iso8601_time_range")

    @iso8601_time_range.setter
    def iso8601_time_range(self, value: Optional[pulumi.Input['DashboardTimeRangeBeginBoundedTimeRangeFromIso8601TimeRangeArgs']]):
        pulumi.set(self, "iso8601_time_range", value)

    @property
    @pulumi.getter(name="literalTimeRange")
    def literal_time_range(self) -> Optional[pulumi.Input['DashboardTimeRangeBeginBoundedTimeRangeFromLiteralTimeRangeArgs']]:
        return pulumi.get(self, "literal_time_range")

    @literal_time_range.setter
    def literal_time_range(self, value: Optional[pulumi.Input['DashboardTimeRangeBeginBoundedTimeRangeFromLiteralTimeRangeArgs']]):
        pulumi.set(self, "literal_time_range", value)

    @property
    @pulumi.getter(name="relativeTimeRange")
    def relative_time_range(self) -> Optional[pulumi.Input['DashboardTimeRangeBeginBoundedTimeRangeFromRelativeTimeRangeArgs']]:
        return pulumi.get(self, "relative_time_range")

    @relative_time_range.setter
    def relative_time_range(self, value: Optional[pulumi.Input['DashboardTimeRangeBeginBoundedTimeRangeFromRelativeTimeRangeArgs']]):
        pulumi.set(self, "relative_time_range", value)


@pulumi.input_type
class DashboardTimeRangeBeginBoundedTimeRangeFromEpochTimeRangeArgs:
    def __init__(__self__, *,
                 epoch_millis: pulumi.Input[int]):
        pulumi.set(__self__, "epoch_millis", epoch_millis)

    @property
    @pulumi.getter(name="epochMillis")
    def epoch_millis(self) -> pulumi.Input[int]:
        return pulumi.get(self, "epoch_millis")

    @epoch_millis.setter
    def epoch_millis(self, value: pulumi.Input[int]):
        pulumi.set(self, "epoch_millis", value)


@pulumi.input_type
class DashboardTimeRangeBeginBoundedTimeRangeFromIso8601TimeRangeArgs:
    def __init__(__self__, *,
                 iso8601_time: pulumi.Input[str]):
        pulumi.set(__self__, "iso8601_time", iso8601_time)

    @property
    @pulumi.getter(name="iso8601Time")
    def iso8601_time(self) -> pulumi.Input[str]:
        return pulumi.get(self, "iso8601_time")

    @iso8601_time.setter
    def iso8601_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "iso8601_time", value)


@pulumi.input_type
class DashboardTimeRangeBeginBoundedTimeRangeFromLiteralTimeRangeArgs:
    def __init__(__self__, *,
                 range_name: pulumi.Input[str]):
        pulumi.set(__self__, "range_name", range_name)

    @property
    @pulumi.getter(name="rangeName")
    def range_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "range_name")

    @range_name.setter
    def range_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "range_name", value)


@pulumi.input_type
class DashboardTimeRangeBeginBoundedTimeRangeFromRelativeTimeRangeArgs:
    def __init__(__self__, *,
                 relative_time: pulumi.Input[str]):
        pulumi.set(__self__, "relative_time", relative_time)

    @property
    @pulumi.getter(name="relativeTime")
    def relative_time(self) -> pulumi.Input[str]:
        return pulumi.get(self, "relative_time")

    @relative_time.setter
    def relative_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "relative_time", value)


@pulumi.input_type
class DashboardTimeRangeBeginBoundedTimeRangeToArgs:
    def __init__(__self__, *,
                 epoch_time_range: Optional[pulumi.Input['DashboardTimeRangeBeginBoundedTimeRangeToEpochTimeRangeArgs']] = None,
                 iso8601_time_range: Optional[pulumi.Input['DashboardTimeRangeBeginBoundedTimeRangeToIso8601TimeRangeArgs']] = None,
                 literal_time_range: Optional[pulumi.Input['DashboardTimeRangeBeginBoundedTimeRangeToLiteralTimeRangeArgs']] = None,
                 relative_time_range: Optional[pulumi.Input['DashboardTimeRangeBeginBoundedTimeRangeToRelativeTimeRangeArgs']] = None):
        if epoch_time_range is not None:
            pulumi.set(__self__, "epoch_time_range", epoch_time_range)
        if iso8601_time_range is not None:
            pulumi.set(__self__, "iso8601_time_range", iso8601_time_range)
        if literal_time_range is not None:
            pulumi.set(__self__, "literal_time_range", literal_time_range)
        if relative_time_range is not None:
            pulumi.set(__self__, "relative_time_range", relative_time_range)

    @property
    @pulumi.getter(name="epochTimeRange")
    def epoch_time_range(self) -> Optional[pulumi.Input['DashboardTimeRangeBeginBoundedTimeRangeToEpochTimeRangeArgs']]:
        return pulumi.get(self, "epoch_time_range")

    @epoch_time_range.setter
    def epoch_time_range(self, value: Optional[pulumi.Input['DashboardTimeRangeBeginBoundedTimeRangeToEpochTimeRangeArgs']]):
        pulumi.set(self, "epoch_time_range", value)

    @property
    @pulumi.getter(name="iso8601TimeRange")
    def iso8601_time_range(self) -> Optional[pulumi.Input['DashboardTimeRangeBeginBoundedTimeRangeToIso8601TimeRangeArgs']]:
        return pulumi.get(self, "iso8601_time_range")

    @iso8601_time_range.setter
    def iso8601_time_range(self, value: Optional[pulumi.Input['DashboardTimeRangeBeginBoundedTimeRangeToIso8601TimeRangeArgs']]):
        pulumi.set(self, "iso8601_time_range", value)

    @property
    @pulumi.getter(name="literalTimeRange")
    def literal_time_range(self) -> Optional[pulumi.Input['DashboardTimeRangeBeginBoundedTimeRangeToLiteralTimeRangeArgs']]:
        return pulumi.get(self, "literal_time_range")

    @literal_time_range.setter
    def literal_time_range(self, value: Optional[pulumi.Input['DashboardTimeRangeBeginBoundedTimeRangeToLiteralTimeRangeArgs']]):
        pulumi.set(self, "literal_time_range", value)

    @property
    @pulumi.getter(name="relativeTimeRange")
    def relative_time_range(self) -> Optional[pulumi.Input['DashboardTimeRangeBeginBoundedTimeRangeToRelativeTimeRangeArgs']]:
        return pulumi.get(self, "relative_time_range")

    @relative_time_range.setter
    def relative_time_range(self, value: Optional[pulumi.Input['DashboardTimeRangeBeginBoundedTimeRangeToRelativeTimeRangeArgs']]):
        pulumi.set(self, "relative_time_range", value)


@pulumi.input_type
class DashboardTimeRangeBeginBoundedTimeRangeToEpochTimeRangeArgs:
    def __init__(__self__, *,
                 epoch_millis: pulumi.Input[int]):
        pulumi.set(__self__, "epoch_millis", epoch_millis)

    @property
    @pulumi.getter(name="epochMillis")
    def epoch_millis(self) -> pulumi.Input[int]:
        return pulumi.get(self, "epoch_millis")

    @epoch_millis.setter
    def epoch_millis(self, value: pulumi.Input[int]):
        pulumi.set(self, "epoch_millis", value)


@pulumi.input_type
class DashboardTimeRangeBeginBoundedTimeRangeToIso8601TimeRangeArgs:
    def __init__(__self__, *,
                 iso8601_time: pulumi.Input[str]):
        pulumi.set(__self__, "iso8601_time", iso8601_time)

    @property
    @pulumi.getter(name="iso8601Time")
    def iso8601_time(self) -> pulumi.Input[str]:
        return pulumi.get(self, "iso8601_time")

    @iso8601_time.setter
    def iso8601_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "iso8601_time", value)


@pulumi.input_type
class DashboardTimeRangeBeginBoundedTimeRangeToLiteralTimeRangeArgs:
    def __init__(__self__, *,
                 range_name: pulumi.Input[str]):
        pulumi.set(__self__, "range_name", range_name)

    @property
    @pulumi.getter(name="rangeName")
    def range_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "range_name")

    @range_name.setter
    def range_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "range_name", value)


@pulumi.input_type
class DashboardTimeRangeBeginBoundedTimeRangeToRelativeTimeRangeArgs:
    def __init__(__self__, *,
                 relative_time: pulumi.Input[str]):
        pulumi.set(__self__, "relative_time", relative_time)

    @property
    @pulumi.getter(name="relativeTime")
    def relative_time(self) -> pulumi.Input[str]:
        return pulumi.get(self, "relative_time")

    @relative_time.setter
    def relative_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "relative_time", value)


@pulumi.input_type
class DashboardTimeRangeCompleteLiteralTimeRangeArgs:
    def __init__(__self__, *,
                 range_name: pulumi.Input[str]):
        pulumi.set(__self__, "range_name", range_name)

    @property
    @pulumi.getter(name="rangeName")
    def range_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "range_name")

    @range_name.setter
    def range_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "range_name", value)


@pulumi.input_type
class DashboardTopologyLabelMapArgs:
    def __init__(__self__, *,
                 datas: pulumi.Input[Sequence[pulumi.Input['DashboardTopologyLabelMapDataArgs']]]):
        pulumi.set(__self__, "datas", datas)

    @property
    @pulumi.getter
    def datas(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardTopologyLabelMapDataArgs']]]:
        return pulumi.get(self, "datas")

    @datas.setter
    def datas(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardTopologyLabelMapDataArgs']]]):
        pulumi.set(self, "datas", value)


@pulumi.input_type
class DashboardTopologyLabelMapDataArgs:
    def __init__(__self__, *,
                 label: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DashboardVariableArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 source_definition: pulumi.Input['DashboardVariableSourceDefinitionArgs'],
                 allow_multi_select: Optional[pulumi.Input[bool]] = None,
                 default_value: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 hide_from_ui: Optional[pulumi.Input[bool]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 include_all_option: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "source_definition", source_definition)
        if allow_multi_select is not None:
            pulumi.set(__self__, "allow_multi_select", allow_multi_select)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if hide_from_ui is not None:
            pulumi.set(__self__, "hide_from_ui", hide_from_ui)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if include_all_option is not None:
            pulumi.set(__self__, "include_all_option", include_all_option)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sourceDefinition")
    def source_definition(self) -> pulumi.Input['DashboardVariableSourceDefinitionArgs']:
        return pulumi.get(self, "source_definition")

    @source_definition.setter
    def source_definition(self, value: pulumi.Input['DashboardVariableSourceDefinitionArgs']):
        pulumi.set(self, "source_definition", value)

    @property
    @pulumi.getter(name="allowMultiSelect")
    def allow_multi_select(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_multi_select")

    @allow_multi_select.setter
    def allow_multi_select(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_multi_select", value)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_value", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="hideFromUi")
    def hide_from_ui(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "hide_from_ui")

    @hide_from_ui.setter
    def hide_from_ui(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_from_ui", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="includeAllOption")
    def include_all_option(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_all_option")

    @include_all_option.setter
    def include_all_option(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_all_option", value)


@pulumi.input_type
class DashboardVariableSourceDefinitionArgs:
    def __init__(__self__, *,
                 csv_variable_source_definition: Optional[pulumi.Input['DashboardVariableSourceDefinitionCsvVariableSourceDefinitionArgs']] = None,
                 log_query_variable_source_definition: Optional[pulumi.Input['DashboardVariableSourceDefinitionLogQueryVariableSourceDefinitionArgs']] = None,
                 metadata_variable_source_definition: Optional[pulumi.Input['DashboardVariableSourceDefinitionMetadataVariableSourceDefinitionArgs']] = None):
        if csv_variable_source_definition is not None:
            pulumi.set(__self__, "csv_variable_source_definition", csv_variable_source_definition)
        if log_query_variable_source_definition is not None:
            pulumi.set(__self__, "log_query_variable_source_definition", log_query_variable_source_definition)
        if metadata_variable_source_definition is not None:
            pulumi.set(__self__, "metadata_variable_source_definition", metadata_variable_source_definition)

    @property
    @pulumi.getter(name="csvVariableSourceDefinition")
    def csv_variable_source_definition(self) -> Optional[pulumi.Input['DashboardVariableSourceDefinitionCsvVariableSourceDefinitionArgs']]:
        return pulumi.get(self, "csv_variable_source_definition")

    @csv_variable_source_definition.setter
    def csv_variable_source_definition(self, value: Optional[pulumi.Input['DashboardVariableSourceDefinitionCsvVariableSourceDefinitionArgs']]):
        pulumi.set(self, "csv_variable_source_definition", value)

    @property
    @pulumi.getter(name="logQueryVariableSourceDefinition")
    def log_query_variable_source_definition(self) -> Optional[pulumi.Input['DashboardVariableSourceDefinitionLogQueryVariableSourceDefinitionArgs']]:
        return pulumi.get(self, "log_query_variable_source_definition")

    @log_query_variable_source_definition.setter
    def log_query_variable_source_definition(self, value: Optional[pulumi.Input['DashboardVariableSourceDefinitionLogQueryVariableSourceDefinitionArgs']]):
        pulumi.set(self, "log_query_variable_source_definition", value)

    @property
    @pulumi.getter(name="metadataVariableSourceDefinition")
    def metadata_variable_source_definition(self) -> Optional[pulumi.Input['DashboardVariableSourceDefinitionMetadataVariableSourceDefinitionArgs']]:
        return pulumi.get(self, "metadata_variable_source_definition")

    @metadata_variable_source_definition.setter
    def metadata_variable_source_definition(self, value: Optional[pulumi.Input['DashboardVariableSourceDefinitionMetadataVariableSourceDefinitionArgs']]):
        pulumi.set(self, "metadata_variable_source_definition", value)


@pulumi.input_type
class DashboardVariableSourceDefinitionCsvVariableSourceDefinitionArgs:
    def __init__(__self__, *,
                 values: pulumi.Input[str]):
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DashboardVariableSourceDefinitionLogQueryVariableSourceDefinitionArgs:
    def __init__(__self__, *,
                 field: pulumi.Input[str],
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "field", field)
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def field(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: pulumi.Input[str]):
        pulumi.set(self, "field", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardVariableSourceDefinitionMetadataVariableSourceDefinitionArgs:
    def __init__(__self__, *,
                 filter: pulumi.Input[str],
                 key: pulumi.Input[str]):
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def filter(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class ElbSourceAuthenticationArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 access_key: Optional[pulumi.Input[str]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)


@pulumi.input_type
class ElbSourceDefaultDateFormatArgs:
    def __init__(__self__, *,
                 format: pulumi.Input[str],
                 locator: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "format", format)
        if locator is not None:
            pulumi.set(__self__, "locator", locator)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def locator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "locator")

    @locator.setter
    def locator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "locator", value)


@pulumi.input_type
class ElbSourceFilterArgs:
    def __init__(__self__, *,
                 filter_type: pulumi.Input[str],
                 name: pulumi.Input[str],
                 regexp: pulumi.Input[str],
                 mask: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "regexp", regexp)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def regexp(self) -> pulumi.Input[str]:
        return pulumi.get(self, "regexp")

    @regexp.setter
    def regexp(self, value: pulumi.Input[str]):
        pulumi.set(self, "regexp", value)

    @property
    @pulumi.getter
    def mask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mask")

    @mask.setter
    def mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mask", value)


@pulumi.input_type
class ElbSourcePathArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 bucket_name: Optional[pulumi.Input[str]] = None,
                 limit_to_namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit_to_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 path_expression: Optional[pulumi.Input[str]] = None,
                 tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input['ElbSourcePathTagFilterArgs']]]] = None):
        pulumi.set(__self__, "type", type)
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if limit_to_namespaces is not None:
            pulumi.set(__self__, "limit_to_namespaces", limit_to_namespaces)
        if limit_to_regions is not None:
            pulumi.set(__self__, "limit_to_regions", limit_to_regions)
        if path_expression is not None:
            pulumi.set(__self__, "path_expression", path_expression)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter(name="limitToNamespaces")
    def limit_to_namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "limit_to_namespaces")

    @limit_to_namespaces.setter
    def limit_to_namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "limit_to_namespaces", value)

    @property
    @pulumi.getter(name="limitToRegions")
    def limit_to_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "limit_to_regions")

    @limit_to_regions.setter
    def limit_to_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "limit_to_regions", value)

    @property
    @pulumi.getter(name="pathExpression")
    def path_expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path_expression")

    @path_expression.setter
    def path_expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path_expression", value)

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ElbSourcePathTagFilterArgs']]]]:
        return pulumi.get(self, "tag_filters")

    @tag_filters.setter
    def tag_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ElbSourcePathTagFilterArgs']]]]):
        pulumi.set(self, "tag_filters", value)


@pulumi.input_type
class ElbSourcePathTagFilterArgs:
    def __init__(__self__, *,
                 namespace: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class GcpSourceAuthenticationArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[str]] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class GcpSourceDefaultDateFormatArgs:
    def __init__(__self__, *,
                 format: pulumi.Input[str],
                 locator: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "format", format)
        if locator is not None:
            pulumi.set(__self__, "locator", locator)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def locator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "locator")

    @locator.setter
    def locator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "locator", value)


@pulumi.input_type
class GcpSourceFilterArgs:
    def __init__(__self__, *,
                 filter_type: pulumi.Input[str],
                 name: pulumi.Input[str],
                 regexp: pulumi.Input[str],
                 mask: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "regexp", regexp)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def regexp(self) -> pulumi.Input[str]:
        return pulumi.get(self, "regexp")

    @regexp.setter
    def regexp(self, value: pulumi.Input[str]):
        pulumi.set(self, "regexp", value)

    @property
    @pulumi.getter
    def mask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mask")

    @mask.setter
    def mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mask", value)


@pulumi.input_type
class GcpSourcePathArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[str]] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class HttpSourceDefaultDateFormatArgs:
    def __init__(__self__, *,
                 format: pulumi.Input[str],
                 locator: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "format", format)
        if locator is not None:
            pulumi.set(__self__, "locator", locator)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def locator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "locator")

    @locator.setter
    def locator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "locator", value)


@pulumi.input_type
class HttpSourceFilterArgs:
    def __init__(__self__, *,
                 filter_type: pulumi.Input[str],
                 name: pulumi.Input[str],
                 regexp: pulumi.Input[str],
                 mask: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "regexp", regexp)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def regexp(self) -> pulumi.Input[str]:
        return pulumi.get(self, "regexp")

    @regexp.setter
    def regexp(self, value: pulumi.Input[str]):
        pulumi.set(self, "regexp", value)

    @property
    @pulumi.getter
    def mask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mask")

    @mask.setter
    def mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mask", value)


@pulumi.input_type
class KinesisMetricsSourceAuthenticationArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 access_key: Optional[pulumi.Input[str]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)


@pulumi.input_type
class KinesisMetricsSourceDefaultDateFormatArgs:
    def __init__(__self__, *,
                 format: pulumi.Input[str],
                 locator: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "format", format)
        if locator is not None:
            pulumi.set(__self__, "locator", locator)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def locator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "locator")

    @locator.setter
    def locator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "locator", value)


@pulumi.input_type
class KinesisMetricsSourceFilterArgs:
    def __init__(__self__, *,
                 filter_type: pulumi.Input[str],
                 name: pulumi.Input[str],
                 regexp: pulumi.Input[str],
                 mask: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "regexp", regexp)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def regexp(self) -> pulumi.Input[str]:
        return pulumi.get(self, "regexp")

    @regexp.setter
    def regexp(self, value: pulumi.Input[str]):
        pulumi.set(self, "regexp", value)

    @property
    @pulumi.getter
    def mask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mask")

    @mask.setter
    def mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mask", value)


@pulumi.input_type
class KinesisMetricsSourcePathArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input['KinesisMetricsSourcePathTagFilterArgs']]]] = None):
        pulumi.set(__self__, "type", type)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KinesisMetricsSourcePathTagFilterArgs']]]]:
        return pulumi.get(self, "tag_filters")

    @tag_filters.setter
    def tag_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KinesisMetricsSourcePathTagFilterArgs']]]]):
        pulumi.set(self, "tag_filters", value)


@pulumi.input_type
class KinesisMetricsSourcePathTagFilterArgs:
    def __init__(__self__, *,
                 namespace: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class LookupTableFieldArgs:
    def __init__(__self__, *,
                 field_name: pulumi.Input[str],
                 field_type: pulumi.Input[str]):
        pulumi.set(__self__, "field_name", field_name)
        pulumi.set(__self__, "field_type", field_type)

    @property
    @pulumi.getter(name="fieldName")
    def field_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_name")

    @field_name.setter
    def field_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_name", value)

    @property
    @pulumi.getter(name="fieldType")
    def field_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_type")

    @field_type.setter
    def field_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_type", value)


@pulumi.input_type
class MetadataSourceAuthenticationArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 access_key: Optional[pulumi.Input[str]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)


@pulumi.input_type
class MetadataSourceDefaultDateFormatArgs:
    def __init__(__self__, *,
                 format: pulumi.Input[str],
                 locator: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "format", format)
        if locator is not None:
            pulumi.set(__self__, "locator", locator)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def locator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "locator")

    @locator.setter
    def locator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "locator", value)


@pulumi.input_type
class MetadataSourceFilterArgs:
    def __init__(__self__, *,
                 filter_type: pulumi.Input[str],
                 name: pulumi.Input[str],
                 regexp: pulumi.Input[str],
                 mask: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "regexp", regexp)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def regexp(self) -> pulumi.Input[str]:
        return pulumi.get(self, "regexp")

    @regexp.setter
    def regexp(self, value: pulumi.Input[str]):
        pulumi.set(self, "regexp", value)

    @property
    @pulumi.getter
    def mask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mask")

    @mask.setter
    def mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mask", value)


@pulumi.input_type
class MetadataSourcePathArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 limit_to_namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit_to_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "type", type)
        if limit_to_namespaces is not None:
            pulumi.set(__self__, "limit_to_namespaces", limit_to_namespaces)
        if limit_to_regions is not None:
            pulumi.set(__self__, "limit_to_regions", limit_to_regions)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="limitToNamespaces")
    def limit_to_namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "limit_to_namespaces")

    @limit_to_namespaces.setter
    def limit_to_namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "limit_to_namespaces", value)

    @property
    @pulumi.getter(name="limitToRegions")
    def limit_to_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "limit_to_regions")

    @limit_to_regions.setter
    def limit_to_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "limit_to_regions", value)

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tag_filters")

    @tag_filters.setter
    def tag_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tag_filters", value)


@pulumi.input_type
class MonitorNotificationArgs:
    def __init__(__self__, *,
                 notification: pulumi.Input['MonitorNotificationNotificationArgs'],
                 run_for_trigger_types: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "notification", notification)
        pulumi.set(__self__, "run_for_trigger_types", run_for_trigger_types)

    @property
    @pulumi.getter
    def notification(self) -> pulumi.Input['MonitorNotificationNotificationArgs']:
        return pulumi.get(self, "notification")

    @notification.setter
    def notification(self, value: pulumi.Input['MonitorNotificationNotificationArgs']):
        pulumi.set(self, "notification", value)

    @property
    @pulumi.getter(name="runForTriggerTypes")
    def run_for_trigger_types(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "run_for_trigger_types")

    @run_for_trigger_types.setter
    def run_for_trigger_types(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "run_for_trigger_types", value)


@pulumi.input_type
class MonitorNotificationNotificationArgs:
    def __init__(__self__, *,
                 action_type: Optional[pulumi.Input[str]] = None,
                 connection_id: Optional[pulumi.Input[str]] = None,
                 connection_type: Optional[pulumi.Input[str]] = None,
                 message_body: Optional[pulumi.Input[str]] = None,
                 payload_override: Optional[pulumi.Input[str]] = None,
                 recipients: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subject: Optional[pulumi.Input[str]] = None,
                 time_zone: Optional[pulumi.Input[str]] = None):
        if action_type is not None:
            warnings.warn("""The field `action_type` is deprecated and will be removed in a future release of the provider - please use `connection_type` instead.""", DeprecationWarning)
            pulumi.log.warn("""action_type is deprecated: The field `action_type` is deprecated and will be removed in a future release of the provider - please use `connection_type` instead.""")
        if action_type is not None:
            pulumi.set(__self__, "action_type", action_type)
        if connection_id is not None:
            pulumi.set(__self__, "connection_id", connection_id)
        if connection_type is not None:
            pulumi.set(__self__, "connection_type", connection_type)
        if message_body is not None:
            pulumi.set(__self__, "message_body", message_body)
        if payload_override is not None:
            pulumi.set(__self__, "payload_override", payload_override)
        if recipients is not None:
            pulumi.set(__self__, "recipients", recipients)
        if subject is not None:
            pulumi.set(__self__, "subject", subject)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action_type")

    @action_type.setter
    def action_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action_type", value)

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connection_id")

    @connection_id.setter
    def connection_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_id", value)

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connection_type")

    @connection_type.setter
    def connection_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_type", value)

    @property
    @pulumi.getter(name="messageBody")
    def message_body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message_body")

    @message_body.setter
    def message_body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_body", value)

    @property
    @pulumi.getter(name="payloadOverride")
    def payload_override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "payload_override")

    @payload_override.setter
    def payload_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "payload_override", value)

    @property
    @pulumi.getter
    def recipients(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "recipients")

    @recipients.setter
    def recipients(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "recipients", value)

    @property
    @pulumi.getter
    def subject(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_zone", value)


@pulumi.input_type
class MonitorQueryArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str],
                 row_id: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "row_id", row_id)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="rowId")
    def row_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "row_id")

    @row_id.setter
    def row_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "row_id", value)


@pulumi.input_type
class MonitorTriggerArgs:
    def __init__(__self__, *,
                 detection_method: Optional[pulumi.Input[str]] = None,
                 occurrence_type: Optional[pulumi.Input[str]] = None,
                 threshold: Optional[pulumi.Input[float]] = None,
                 threshold_type: Optional[pulumi.Input[str]] = None,
                 time_range: Optional[pulumi.Input[str]] = None,
                 trigger_source: Optional[pulumi.Input[str]] = None,
                 trigger_type: Optional[pulumi.Input[str]] = None):
        if detection_method is not None:
            pulumi.set(__self__, "detection_method", detection_method)
        if occurrence_type is not None:
            pulumi.set(__self__, "occurrence_type", occurrence_type)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if threshold_type is not None:
            pulumi.set(__self__, "threshold_type", threshold_type)
        if time_range is not None:
            pulumi.set(__self__, "time_range", time_range)
        if trigger_source is not None:
            pulumi.set(__self__, "trigger_source", trigger_source)
        if trigger_type is not None:
            pulumi.set(__self__, "trigger_type", trigger_type)

    @property
    @pulumi.getter(name="detectionMethod")
    def detection_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "detection_method")

    @detection_method.setter
    def detection_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_method", value)

    @property
    @pulumi.getter(name="occurrenceType")
    def occurrence_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "occurrence_type")

    @occurrence_type.setter
    def occurrence_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "occurrence_type", value)

    @property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "threshold", value)

    @property
    @pulumi.getter(name="thresholdType")
    def threshold_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "threshold_type")

    @threshold_type.setter
    def threshold_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "threshold_type", value)

    @property
    @pulumi.getter(name="timeRange")
    def time_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_range")

    @time_range.setter
    def time_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_range", value)

    @property
    @pulumi.getter(name="triggerSource")
    def trigger_source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trigger_source")

    @trigger_source.setter
    def trigger_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trigger_source", value)

    @property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trigger_type")

    @trigger_type.setter
    def trigger_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trigger_type", value)


@pulumi.input_type
class PollingSourceAuthenticationArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 access_key: Optional[pulumi.Input[str]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)


@pulumi.input_type
class PollingSourceDefaultDateFormatArgs:
    def __init__(__self__, *,
                 format: pulumi.Input[str],
                 locator: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "format", format)
        if locator is not None:
            pulumi.set(__self__, "locator", locator)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def locator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "locator")

    @locator.setter
    def locator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "locator", value)


@pulumi.input_type
class PollingSourceFilterArgs:
    def __init__(__self__, *,
                 filter_type: pulumi.Input[str],
                 name: pulumi.Input[str],
                 regexp: pulumi.Input[str],
                 mask: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "regexp", regexp)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def regexp(self) -> pulumi.Input[str]:
        return pulumi.get(self, "regexp")

    @regexp.setter
    def regexp(self, value: pulumi.Input[str]):
        pulumi.set(self, "regexp", value)

    @property
    @pulumi.getter
    def mask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mask")

    @mask.setter
    def mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mask", value)


@pulumi.input_type
class PollingSourcePathArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 bucket_name: Optional[pulumi.Input[str]] = None,
                 limit_to_namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit_to_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 path_expression: Optional[pulumi.Input[str]] = None,
                 tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input['PollingSourcePathTagFilterArgs']]]] = None):
        pulumi.set(__self__, "type", type)
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if limit_to_namespaces is not None:
            pulumi.set(__self__, "limit_to_namespaces", limit_to_namespaces)
        if limit_to_regions is not None:
            pulumi.set(__self__, "limit_to_regions", limit_to_regions)
        if path_expression is not None:
            pulumi.set(__self__, "path_expression", path_expression)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter(name="limitToNamespaces")
    def limit_to_namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "limit_to_namespaces")

    @limit_to_namespaces.setter
    def limit_to_namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "limit_to_namespaces", value)

    @property
    @pulumi.getter(name="limitToRegions")
    def limit_to_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "limit_to_regions")

    @limit_to_regions.setter
    def limit_to_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "limit_to_regions", value)

    @property
    @pulumi.getter(name="pathExpression")
    def path_expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path_expression")

    @path_expression.setter
    def path_expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path_expression", value)

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PollingSourcePathTagFilterArgs']]]]:
        return pulumi.get(self, "tag_filters")

    @tag_filters.setter
    def tag_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PollingSourcePathTagFilterArgs']]]]):
        pulumi.set(self, "tag_filters", value)


@pulumi.input_type
class PollingSourcePathTagFilterArgs:
    def __init__(__self__, *,
                 namespace: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class S3AuditSourceAuthenticationArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 access_key: Optional[pulumi.Input[str]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)


@pulumi.input_type
class S3AuditSourceDefaultDateFormatArgs:
    def __init__(__self__, *,
                 format: pulumi.Input[str],
                 locator: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "format", format)
        if locator is not None:
            pulumi.set(__self__, "locator", locator)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def locator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "locator")

    @locator.setter
    def locator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "locator", value)


@pulumi.input_type
class S3AuditSourceFilterArgs:
    def __init__(__self__, *,
                 filter_type: pulumi.Input[str],
                 name: pulumi.Input[str],
                 regexp: pulumi.Input[str],
                 mask: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "regexp", regexp)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def regexp(self) -> pulumi.Input[str]:
        return pulumi.get(self, "regexp")

    @regexp.setter
    def regexp(self, value: pulumi.Input[str]):
        pulumi.set(self, "regexp", value)

    @property
    @pulumi.getter
    def mask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mask")

    @mask.setter
    def mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mask", value)


@pulumi.input_type
class S3AuditSourcePathArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 bucket_name: Optional[pulumi.Input[str]] = None,
                 limit_to_namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit_to_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 path_expression: Optional[pulumi.Input[str]] = None,
                 tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input['S3AuditSourcePathTagFilterArgs']]]] = None):
        pulumi.set(__self__, "type", type)
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if limit_to_namespaces is not None:
            pulumi.set(__self__, "limit_to_namespaces", limit_to_namespaces)
        if limit_to_regions is not None:
            pulumi.set(__self__, "limit_to_regions", limit_to_regions)
        if path_expression is not None:
            pulumi.set(__self__, "path_expression", path_expression)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter(name="limitToNamespaces")
    def limit_to_namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "limit_to_namespaces")

    @limit_to_namespaces.setter
    def limit_to_namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "limit_to_namespaces", value)

    @property
    @pulumi.getter(name="limitToRegions")
    def limit_to_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "limit_to_regions")

    @limit_to_regions.setter
    def limit_to_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "limit_to_regions", value)

    @property
    @pulumi.getter(name="pathExpression")
    def path_expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path_expression")

    @path_expression.setter
    def path_expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path_expression", value)

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['S3AuditSourcePathTagFilterArgs']]]]:
        return pulumi.get(self, "tag_filters")

    @tag_filters.setter
    def tag_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['S3AuditSourcePathTagFilterArgs']]]]):
        pulumi.set(self, "tag_filters", value)


@pulumi.input_type
class S3AuditSourcePathTagFilterArgs:
    def __init__(__self__, *,
                 namespace: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class S3SourceAuthenticationArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 access_key: Optional[pulumi.Input[str]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)


@pulumi.input_type
class S3SourceDefaultDateFormatArgs:
    def __init__(__self__, *,
                 format: pulumi.Input[str],
                 locator: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "format", format)
        if locator is not None:
            pulumi.set(__self__, "locator", locator)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def locator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "locator")

    @locator.setter
    def locator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "locator", value)


@pulumi.input_type
class S3SourceFilterArgs:
    def __init__(__self__, *,
                 filter_type: pulumi.Input[str],
                 name: pulumi.Input[str],
                 regexp: pulumi.Input[str],
                 mask: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "regexp", regexp)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def regexp(self) -> pulumi.Input[str]:
        return pulumi.get(self, "regexp")

    @regexp.setter
    def regexp(self, value: pulumi.Input[str]):
        pulumi.set(self, "regexp", value)

    @property
    @pulumi.getter
    def mask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mask")

    @mask.setter
    def mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mask", value)


@pulumi.input_type
class S3SourcePathArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 bucket_name: Optional[pulumi.Input[str]] = None,
                 limit_to_namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit_to_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 path_expression: Optional[pulumi.Input[str]] = None,
                 tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input['S3SourcePathTagFilterArgs']]]] = None):
        pulumi.set(__self__, "type", type)
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if limit_to_namespaces is not None:
            pulumi.set(__self__, "limit_to_namespaces", limit_to_namespaces)
        if limit_to_regions is not None:
            pulumi.set(__self__, "limit_to_regions", limit_to_regions)
        if path_expression is not None:
            pulumi.set(__self__, "path_expression", path_expression)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter(name="limitToNamespaces")
    def limit_to_namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "limit_to_namespaces")

    @limit_to_namespaces.setter
    def limit_to_namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "limit_to_namespaces", value)

    @property
    @pulumi.getter(name="limitToRegions")
    def limit_to_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "limit_to_regions")

    @limit_to_regions.setter
    def limit_to_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "limit_to_regions", value)

    @property
    @pulumi.getter(name="pathExpression")
    def path_expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path_expression")

    @path_expression.setter
    def path_expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path_expression", value)

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['S3SourcePathTagFilterArgs']]]]:
        return pulumi.get(self, "tag_filters")

    @tag_filters.setter
    def tag_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['S3SourcePathTagFilterArgs']]]]):
        pulumi.set(self, "tag_filters", value)


@pulumi.input_type
class S3SourcePathTagFilterArgs:
    def __init__(__self__, *,
                 namespace: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SamlConfigurationOnDemandProvisioningEnabledArgs:
    def __init__(__self__, *,
                 on_demand_provisioning_roles: pulumi.Input[Sequence[pulumi.Input[str]]],
                 first_name_attribute: Optional[pulumi.Input[str]] = None,
                 last_name_attribute: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "on_demand_provisioning_roles", on_demand_provisioning_roles)
        if first_name_attribute is not None:
            pulumi.set(__self__, "first_name_attribute", first_name_attribute)
        if last_name_attribute is not None:
            pulumi.set(__self__, "last_name_attribute", last_name_attribute)

    @property
    @pulumi.getter(name="onDemandProvisioningRoles")
    def on_demand_provisioning_roles(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "on_demand_provisioning_roles")

    @on_demand_provisioning_roles.setter
    def on_demand_provisioning_roles(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "on_demand_provisioning_roles", value)

    @property
    @pulumi.getter(name="firstNameAttribute")
    def first_name_attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "first_name_attribute")

    @first_name_attribute.setter
    def first_name_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "first_name_attribute", value)

    @property
    @pulumi.getter(name="lastNameAttribute")
    def last_name_attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_name_attribute")

    @last_name_attribute.setter
    def last_name_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_name_attribute", value)


