# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MonitorArgs', 'Monitor']

@pulumi.input_type
class MonitorArgs:
    def __init__(__self__, *,
                 monitor_type: pulumi.Input[str],
                 content_type: Optional[pulumi.Input[str]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 created_by: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 group_notifications: Optional[pulumi.Input[bool]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 is_locked: Optional[pulumi.Input[bool]] = None,
                 is_mutable: Optional[pulumi.Input[bool]] = None,
                 is_system: Optional[pulumi.Input[bool]] = None,
                 modified_at: Optional[pulumi.Input[str]] = None,
                 modified_by: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notifications: Optional[pulumi.Input[Sequence[pulumi.Input['MonitorNotificationArgs']]]] = None,
                 parent_id: Optional[pulumi.Input[str]] = None,
                 post_request_map: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 queries: Optional[pulumi.Input[Sequence[pulumi.Input['MonitorQueryArgs']]]] = None,
                 statuses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 triggers: Optional[pulumi.Input[Sequence[pulumi.Input['MonitorTriggerArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Monitor resource.
        """
        pulumi.set(__self__, "monitor_type", monitor_type)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if group_notifications is not None:
            pulumi.set(__self__, "group_notifications", group_notifications)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_locked is not None:
            pulumi.set(__self__, "is_locked", is_locked)
        if is_mutable is not None:
            pulumi.set(__self__, "is_mutable", is_mutable)
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if modified_at is not None:
            pulumi.set(__self__, "modified_at", modified_at)
        if modified_by is not None:
            pulumi.set(__self__, "modified_by", modified_by)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notifications is not None:
            pulumi.set(__self__, "notifications", notifications)
        if parent_id is not None:
            pulumi.set(__self__, "parent_id", parent_id)
        if post_request_map is not None:
            pulumi.set(__self__, "post_request_map", post_request_map)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if statuses is not None:
            pulumi.set(__self__, "statuses", statuses)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="monitorType")
    def monitor_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "monitor_type")

    @monitor_type.setter
    def monitor_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "monitor_type", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="groupNotifications")
    def group_notifications(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "group_notifications")

    @group_notifications.setter
    def group_notifications(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "group_notifications", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isLocked")
    def is_locked(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_locked")

    @is_locked.setter
    def is_locked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_locked", value)

    @property
    @pulumi.getter(name="isMutable")
    def is_mutable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_mutable")

    @is_mutable.setter
    def is_mutable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_mutable", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_system")

    @is_system.setter
    def is_system(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_system", value)

    @property
    @pulumi.getter(name="modifiedAt")
    def modified_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "modified_at")

    @modified_at.setter
    def modified_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "modified_at", value)

    @property
    @pulumi.getter(name="modifiedBy")
    def modified_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "modified_by")

    @modified_by.setter
    def modified_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "modified_by", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def notifications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MonitorNotificationArgs']]]]:
        return pulumi.get(self, "notifications")

    @notifications.setter
    def notifications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MonitorNotificationArgs']]]]):
        pulumi.set(self, "notifications", value)

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parent_id")

    @parent_id.setter
    def parent_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_id", value)

    @property
    @pulumi.getter(name="postRequestMap")
    def post_request_map(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "post_request_map")

    @post_request_map.setter
    def post_request_map(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "post_request_map", value)

    @property
    @pulumi.getter
    def queries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MonitorQueryArgs']]]]:
        return pulumi.get(self, "queries")

    @queries.setter
    def queries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MonitorQueryArgs']]]]):
        pulumi.set(self, "queries", value)

    @property
    @pulumi.getter
    def statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "statuses")

    @statuses.setter
    def statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "statuses", value)

    @property
    @pulumi.getter
    def triggers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MonitorTriggerArgs']]]]:
        return pulumi.get(self, "triggers")

    @triggers.setter
    def triggers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MonitorTriggerArgs']]]]):
        pulumi.set(self, "triggers", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class _MonitorState:
    def __init__(__self__, *,
                 content_type: Optional[pulumi.Input[str]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 created_by: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 group_notifications: Optional[pulumi.Input[bool]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 is_locked: Optional[pulumi.Input[bool]] = None,
                 is_mutable: Optional[pulumi.Input[bool]] = None,
                 is_system: Optional[pulumi.Input[bool]] = None,
                 modified_at: Optional[pulumi.Input[str]] = None,
                 modified_by: Optional[pulumi.Input[str]] = None,
                 monitor_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notifications: Optional[pulumi.Input[Sequence[pulumi.Input['MonitorNotificationArgs']]]] = None,
                 parent_id: Optional[pulumi.Input[str]] = None,
                 post_request_map: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 queries: Optional[pulumi.Input[Sequence[pulumi.Input['MonitorQueryArgs']]]] = None,
                 statuses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 triggers: Optional[pulumi.Input[Sequence[pulumi.Input['MonitorTriggerArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Monitor resources.
        """
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if group_notifications is not None:
            pulumi.set(__self__, "group_notifications", group_notifications)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_locked is not None:
            pulumi.set(__self__, "is_locked", is_locked)
        if is_mutable is not None:
            pulumi.set(__self__, "is_mutable", is_mutable)
        if is_system is not None:
            pulumi.set(__self__, "is_system", is_system)
        if modified_at is not None:
            pulumi.set(__self__, "modified_at", modified_at)
        if modified_by is not None:
            pulumi.set(__self__, "modified_by", modified_by)
        if monitor_type is not None:
            pulumi.set(__self__, "monitor_type", monitor_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notifications is not None:
            pulumi.set(__self__, "notifications", notifications)
        if parent_id is not None:
            pulumi.set(__self__, "parent_id", parent_id)
        if post_request_map is not None:
            pulumi.set(__self__, "post_request_map", post_request_map)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if statuses is not None:
            pulumi.set(__self__, "statuses", statuses)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="groupNotifications")
    def group_notifications(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "group_notifications")

    @group_notifications.setter
    def group_notifications(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "group_notifications", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isLocked")
    def is_locked(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_locked")

    @is_locked.setter
    def is_locked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_locked", value)

    @property
    @pulumi.getter(name="isMutable")
    def is_mutable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_mutable")

    @is_mutable.setter
    def is_mutable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_mutable", value)

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_system")

    @is_system.setter
    def is_system(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_system", value)

    @property
    @pulumi.getter(name="modifiedAt")
    def modified_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "modified_at")

    @modified_at.setter
    def modified_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "modified_at", value)

    @property
    @pulumi.getter(name="modifiedBy")
    def modified_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "modified_by")

    @modified_by.setter
    def modified_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "modified_by", value)

    @property
    @pulumi.getter(name="monitorType")
    def monitor_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "monitor_type")

    @monitor_type.setter
    def monitor_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def notifications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MonitorNotificationArgs']]]]:
        return pulumi.get(self, "notifications")

    @notifications.setter
    def notifications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MonitorNotificationArgs']]]]):
        pulumi.set(self, "notifications", value)

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parent_id")

    @parent_id.setter
    def parent_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_id", value)

    @property
    @pulumi.getter(name="postRequestMap")
    def post_request_map(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "post_request_map")

    @post_request_map.setter
    def post_request_map(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "post_request_map", value)

    @property
    @pulumi.getter
    def queries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MonitorQueryArgs']]]]:
        return pulumi.get(self, "queries")

    @queries.setter
    def queries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MonitorQueryArgs']]]]):
        pulumi.set(self, "queries", value)

    @property
    @pulumi.getter
    def statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "statuses")

    @statuses.setter
    def statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "statuses", value)

    @property
    @pulumi.getter
    def triggers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MonitorTriggerArgs']]]]:
        return pulumi.get(self, "triggers")

    @triggers.setter
    def triggers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MonitorTriggerArgs']]]]):
        pulumi.set(self, "triggers", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


class Monitor(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 content_type: Optional[pulumi.Input[str]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 created_by: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 group_notifications: Optional[pulumi.Input[bool]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 is_locked: Optional[pulumi.Input[bool]] = None,
                 is_mutable: Optional[pulumi.Input[bool]] = None,
                 is_system: Optional[pulumi.Input[bool]] = None,
                 modified_at: Optional[pulumi.Input[str]] = None,
                 modified_by: Optional[pulumi.Input[str]] = None,
                 monitor_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notifications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MonitorNotificationArgs']]]]] = None,
                 parent_id: Optional[pulumi.Input[str]] = None,
                 post_request_map: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 queries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MonitorQueryArgs']]]]] = None,
                 statuses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 triggers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MonitorTriggerArgs']]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides the ability to create, read, delete, and update [Monitors](https://help.sumologic.com/?cid=10020).

        ## Example Logs Monitor

        ```python
        import pulumi
        import pulumi_sumologic as sumologic

        tf_logs_monitor1 = sumologic.Monitor("tfLogsMonitor1",
            content_type="Monitor",
            description="tf logs monitor",
            is_disabled=False,
            monitor_type="Logs",
            notifications=[
                sumologic.MonitorNotificationArgs(
                    notification=sumologic.MonitorNotificationNotificationArgs(
                        connection_type="Email",
                        message_body="Triggered {{TriggerType}} Alert on {{Name}}: {{QueryURL}}",
                        recipients=["abc@example.com"],
                        subject="Monitor Alert: {{TriggerType}} on {{Name}}",
                        time_zone="PST",
                    ),
                    run_for_trigger_types=[
                        "Critical",
                        "ResolvedCritical",
                    ],
                ),
                sumologic.MonitorNotificationArgs(
                    notification=sumologic.MonitorNotificationNotificationArgs(
                        connection_id="0000000000ABC123",
                        connection_type="Webhook",
                    ),
                    run_for_trigger_types=[
                        "Critical",
                        "ResolvedCritical",
                    ],
                ),
            ],
            queries=[sumologic.MonitorQueryArgs(
                query="_sourceCategory=event-action info",
                row_id="A",
            )],
            triggers=[
                sumologic.MonitorTriggerArgs(
                    detection_method="StaticCondition",
                    occurrence_type="ResultCount",
                    threshold=40,
                    threshold_type="GreaterThan",
                    time_range="15m",
                    trigger_source="AllResults",
                    trigger_type="Critical",
                ),
                sumologic.MonitorTriggerArgs(
                    detection_method="StaticCondition",
                    occurrence_type="ResultCount",
                    threshold=40,
                    threshold_type="LessThanOrEqual",
                    time_range="15m",
                    trigger_source="AllResults",
                    trigger_type="ResolvedCritical",
                ),
            ],
            type="MonitorsLibraryMonitor")
        ```

        ## Example Metrics Monitor

        ```python
        import pulumi
        import pulumi_sumologic as sumologic

        tf_metrics_monitor1 = sumologic.Monitor("tfMetricsMonitor1",
            content_type="Monitor",
            description="tf metrics monitor",
            is_disabled=False,
            monitor_type="Metrics",
            notifications=[sumologic.MonitorNotificationArgs(
                notification=sumologic.MonitorNotificationNotificationArgs(
                    connection_type="Email",
                    message_body="Triggered {{TriggerType}} Alert on {{Name}}: {{QueryURL}}",
                    recipients=["abc@example.com"],
                    subject="Triggered {{TriggerType}} Alert on Monitor {{Name}}",
                    time_zone="PST",
                ),
                run_for_trigger_types=[
                    "Critical",
                    "ResolvedCritical",
                ],
            )],
            queries=[sumologic.MonitorQueryArgs(
                query="metric=CPU_Idle _sourceCategory=event-action",
                row_id="A",
            )],
            triggers=[
                sumologic.MonitorTriggerArgs(
                    detection_method="StaticCondition",
                    occurrence_type="AtLeastOnce",
                    threshold=40,
                    threshold_type="GreaterThanOrEqual",
                    time_range="15m",
                    trigger_source="AnyTimeSeries",
                    trigger_type="Critical",
                ),
                sumologic.MonitorTriggerArgs(
                    detection_method="StaticCondition",
                    occurrence_type="Always",
                    threshold=40,
                    threshold_type="LessThan",
                    time_range="15m",
                    trigger_source="AnyTimeSeries",
                    trigger_type="ResolvedCritical",
                ),
            ],
            type="MonitorsLibraryMonitor")
        ```

        ## Example Logs Monitor with Webhook Connection and Folder

        ```python
        import pulumi
        import pulumi_sumologic as sumologic

        tf_monitor_folder1 = sumologic.MonitorFolder("tfMonitorFolder1", description="A folder for Monitors")
        example_pagerduty_connection = sumologic.Connection("examplePagerdutyConnection",
            description="PagerDuty connection for notifications from Monitors",
            type="WebhookConnection",
            webhook_type="PagerDuty",
            url="https://events.pagerduty.com/",
            default_payload=\"\"\"{
          "service_key": "pagerduty_api_integration_key",
          "event_type": "trigger",
          "description": "PagerDuty connection for notifications",
          "client": "Sumo Logic",
          "client_url": ""
        }
        \"\"\")
        tf_logs_monitor2 = sumologic.Monitor("tfLogsMonitor2",
            description="logs monitor with webhook",
            type="MonitorsLibraryMonitor",
            parent_id=tf_monitor_folder1.id,
            is_disabled=False,
            content_type="Monitor",
            monitor_type="Logs",
            queries=[sumologic.MonitorQueryArgs(
                row_id="A",
                query="_sourceCategory=event-action info",
            )],
            triggers=[
                sumologic.MonitorTriggerArgs(
                    threshold_type="GreaterThan",
                    threshold=40,
                    time_range="15m",
                    occurrence_type="ResultCount",
                    trigger_source="AllResults",
                    trigger_type="Critical",
                    detection_method="StaticCondition",
                ),
                sumologic.MonitorTriggerArgs(
                    threshold_type="LessThanOrEqual",
                    threshold=40,
                    time_range="15m",
                    occurrence_type="ResultCount",
                    trigger_source="AllResults",
                    trigger_type="ResolvedCritical",
                    detection_method="StaticCondition",
                ),
            ],
            notifications=[
                sumologic.MonitorNotificationArgs(
                    notification=sumologic.MonitorNotificationNotificationArgs(
                        connection_type="Email",
                        recipients=["abc@example.com"],
                        subject="Monitor Alert: {{TriggerType}} on {{Name}}",
                        time_zone="PST",
                        message_body="Triggered {{TriggerType}} Alert on {{Name}}: {{QueryURL}}",
                    ),
                    run_for_trigger_types=[
                        "Critical",
                        "ResolvedCritical",
                    ],
                ),
                sumologic.MonitorNotificationArgs(
                    notification=sumologic.MonitorNotificationNotificationArgs(
                        connection_type="PagerDuty",
                        connection_id=example_pagerduty_connection.id,
                        payload_override=\"\"\"{
          "service_key": "your_pagerduty_api_integration_key",
          "event_type": "trigger",
          "description": "Alert: Triggered {{TriggerType}} for Monitor {{Name}}",
          "client": "Sumo Logic",
          "client_url": "{{QueryUrl}}"
        }
        \"\"\",
                    ),
                    run_for_trigger_types=[
                        "Critical",
                        "ResolvedCritical",
                    ],
                ),
            ])
        ```

        ## Example Monitor Folder

        NOTE: Monitor folders are considered a different resource from Library content folders.

        ```python
        import pulumi
        import pulumi_sumologic as sumologic

        tf_monitor_folder1 = sumologic.MonitorFolder("tfMonitorFolder1", description="a folder for monitors")
        ```

        ## Argument reference

        The following arguments are supported:

        - `type` - (Optional) The type of object model. Valid value:
          - `MonitorsLibraryMonitor`
        - `name` - (Required) The name of the monitor. The name must be alphanumeric.
        - `description` - (Required) The description of the monitor.
        - `is_disabled` - (Optional) Whether or not the monitor is disabled. Disabled monitors will not run and will not generate or send notifications.
        - `parent_id` - (Optional) The ID of the Monitor Folder that contains this monitor. Defaults to the root folder.
        - `content_type` - (Optional) The type of the content object. Valid value:
          - `Monitor`
        - `monitor_type` - (Required) The type of monitor. Valid values:
          - `Logs`: A logs query monitor.
          - `Metrics`: A metrics query monitor.
        - `queries` - (Required) All queries from the monitor.
        - `triggers` - (Required) Defines the conditions of when to send notifications.
        - `notifications` - (Optional) The notifications the monitor will send when the respective trigger condition is met.
        - `group_notifications` - (Optional) Whether or not to group notifications for individual items that meet the trigger condition. Defaults to true.

        Additional data provided in state:

        - `id` - (Computed) The ID for this monitor.
        - `status` - (Computed) The current status for this monitor. Values are:
          - `Critical`
          - `Warning`
          - `MissingData`
          - `Normal`
          - `Disabled`

        ## Import

        Monitors can be imported using the monitor ID, such ashcl

        ```sh
         $ pulumi import sumologic:index/monitor:Monitor test 1234567890
        ```

         [1]https://help.sumologic.com/?cid=10020

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MonitorArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides the ability to create, read, delete, and update [Monitors](https://help.sumologic.com/?cid=10020).

        ## Example Logs Monitor

        ```python
        import pulumi
        import pulumi_sumologic as sumologic

        tf_logs_monitor1 = sumologic.Monitor("tfLogsMonitor1",
            content_type="Monitor",
            description="tf logs monitor",
            is_disabled=False,
            monitor_type="Logs",
            notifications=[
                sumologic.MonitorNotificationArgs(
                    notification=sumologic.MonitorNotificationNotificationArgs(
                        connection_type="Email",
                        message_body="Triggered {{TriggerType}} Alert on {{Name}}: {{QueryURL}}",
                        recipients=["abc@example.com"],
                        subject="Monitor Alert: {{TriggerType}} on {{Name}}",
                        time_zone="PST",
                    ),
                    run_for_trigger_types=[
                        "Critical",
                        "ResolvedCritical",
                    ],
                ),
                sumologic.MonitorNotificationArgs(
                    notification=sumologic.MonitorNotificationNotificationArgs(
                        connection_id="0000000000ABC123",
                        connection_type="Webhook",
                    ),
                    run_for_trigger_types=[
                        "Critical",
                        "ResolvedCritical",
                    ],
                ),
            ],
            queries=[sumologic.MonitorQueryArgs(
                query="_sourceCategory=event-action info",
                row_id="A",
            )],
            triggers=[
                sumologic.MonitorTriggerArgs(
                    detection_method="StaticCondition",
                    occurrence_type="ResultCount",
                    threshold=40,
                    threshold_type="GreaterThan",
                    time_range="15m",
                    trigger_source="AllResults",
                    trigger_type="Critical",
                ),
                sumologic.MonitorTriggerArgs(
                    detection_method="StaticCondition",
                    occurrence_type="ResultCount",
                    threshold=40,
                    threshold_type="LessThanOrEqual",
                    time_range="15m",
                    trigger_source="AllResults",
                    trigger_type="ResolvedCritical",
                ),
            ],
            type="MonitorsLibraryMonitor")
        ```

        ## Example Metrics Monitor

        ```python
        import pulumi
        import pulumi_sumologic as sumologic

        tf_metrics_monitor1 = sumologic.Monitor("tfMetricsMonitor1",
            content_type="Monitor",
            description="tf metrics monitor",
            is_disabled=False,
            monitor_type="Metrics",
            notifications=[sumologic.MonitorNotificationArgs(
                notification=sumologic.MonitorNotificationNotificationArgs(
                    connection_type="Email",
                    message_body="Triggered {{TriggerType}} Alert on {{Name}}: {{QueryURL}}",
                    recipients=["abc@example.com"],
                    subject="Triggered {{TriggerType}} Alert on Monitor {{Name}}",
                    time_zone="PST",
                ),
                run_for_trigger_types=[
                    "Critical",
                    "ResolvedCritical",
                ],
            )],
            queries=[sumologic.MonitorQueryArgs(
                query="metric=CPU_Idle _sourceCategory=event-action",
                row_id="A",
            )],
            triggers=[
                sumologic.MonitorTriggerArgs(
                    detection_method="StaticCondition",
                    occurrence_type="AtLeastOnce",
                    threshold=40,
                    threshold_type="GreaterThanOrEqual",
                    time_range="15m",
                    trigger_source="AnyTimeSeries",
                    trigger_type="Critical",
                ),
                sumologic.MonitorTriggerArgs(
                    detection_method="StaticCondition",
                    occurrence_type="Always",
                    threshold=40,
                    threshold_type="LessThan",
                    time_range="15m",
                    trigger_source="AnyTimeSeries",
                    trigger_type="ResolvedCritical",
                ),
            ],
            type="MonitorsLibraryMonitor")
        ```

        ## Example Logs Monitor with Webhook Connection and Folder

        ```python
        import pulumi
        import pulumi_sumologic as sumologic

        tf_monitor_folder1 = sumologic.MonitorFolder("tfMonitorFolder1", description="A folder for Monitors")
        example_pagerduty_connection = sumologic.Connection("examplePagerdutyConnection",
            description="PagerDuty connection for notifications from Monitors",
            type="WebhookConnection",
            webhook_type="PagerDuty",
            url="https://events.pagerduty.com/",
            default_payload=\"\"\"{
          "service_key": "pagerduty_api_integration_key",
          "event_type": "trigger",
          "description": "PagerDuty connection for notifications",
          "client": "Sumo Logic",
          "client_url": ""
        }
        \"\"\")
        tf_logs_monitor2 = sumologic.Monitor("tfLogsMonitor2",
            description="logs monitor with webhook",
            type="MonitorsLibraryMonitor",
            parent_id=tf_monitor_folder1.id,
            is_disabled=False,
            content_type="Monitor",
            monitor_type="Logs",
            queries=[sumologic.MonitorQueryArgs(
                row_id="A",
                query="_sourceCategory=event-action info",
            )],
            triggers=[
                sumologic.MonitorTriggerArgs(
                    threshold_type="GreaterThan",
                    threshold=40,
                    time_range="15m",
                    occurrence_type="ResultCount",
                    trigger_source="AllResults",
                    trigger_type="Critical",
                    detection_method="StaticCondition",
                ),
                sumologic.MonitorTriggerArgs(
                    threshold_type="LessThanOrEqual",
                    threshold=40,
                    time_range="15m",
                    occurrence_type="ResultCount",
                    trigger_source="AllResults",
                    trigger_type="ResolvedCritical",
                    detection_method="StaticCondition",
                ),
            ],
            notifications=[
                sumologic.MonitorNotificationArgs(
                    notification=sumologic.MonitorNotificationNotificationArgs(
                        connection_type="Email",
                        recipients=["abc@example.com"],
                        subject="Monitor Alert: {{TriggerType}} on {{Name}}",
                        time_zone="PST",
                        message_body="Triggered {{TriggerType}} Alert on {{Name}}: {{QueryURL}}",
                    ),
                    run_for_trigger_types=[
                        "Critical",
                        "ResolvedCritical",
                    ],
                ),
                sumologic.MonitorNotificationArgs(
                    notification=sumologic.MonitorNotificationNotificationArgs(
                        connection_type="PagerDuty",
                        connection_id=example_pagerduty_connection.id,
                        payload_override=\"\"\"{
          "service_key": "your_pagerduty_api_integration_key",
          "event_type": "trigger",
          "description": "Alert: Triggered {{TriggerType}} for Monitor {{Name}}",
          "client": "Sumo Logic",
          "client_url": "{{QueryUrl}}"
        }
        \"\"\",
                    ),
                    run_for_trigger_types=[
                        "Critical",
                        "ResolvedCritical",
                    ],
                ),
            ])
        ```

        ## Example Monitor Folder

        NOTE: Monitor folders are considered a different resource from Library content folders.

        ```python
        import pulumi
        import pulumi_sumologic as sumologic

        tf_monitor_folder1 = sumologic.MonitorFolder("tfMonitorFolder1", description="a folder for monitors")
        ```

        ## Argument reference

        The following arguments are supported:

        - `type` - (Optional) The type of object model. Valid value:
          - `MonitorsLibraryMonitor`
        - `name` - (Required) The name of the monitor. The name must be alphanumeric.
        - `description` - (Required) The description of the monitor.
        - `is_disabled` - (Optional) Whether or not the monitor is disabled. Disabled monitors will not run and will not generate or send notifications.
        - `parent_id` - (Optional) The ID of the Monitor Folder that contains this monitor. Defaults to the root folder.
        - `content_type` - (Optional) The type of the content object. Valid value:
          - `Monitor`
        - `monitor_type` - (Required) The type of monitor. Valid values:
          - `Logs`: A logs query monitor.
          - `Metrics`: A metrics query monitor.
        - `queries` - (Required) All queries from the monitor.
        - `triggers` - (Required) Defines the conditions of when to send notifications.
        - `notifications` - (Optional) The notifications the monitor will send when the respective trigger condition is met.
        - `group_notifications` - (Optional) Whether or not to group notifications for individual items that meet the trigger condition. Defaults to true.

        Additional data provided in state:

        - `id` - (Computed) The ID for this monitor.
        - `status` - (Computed) The current status for this monitor. Values are:
          - `Critical`
          - `Warning`
          - `MissingData`
          - `Normal`
          - `Disabled`

        ## Import

        Monitors can be imported using the monitor ID, such ashcl

        ```sh
         $ pulumi import sumologic:index/monitor:Monitor test 1234567890
        ```

         [1]https://help.sumologic.com/?cid=10020

        :param str resource_name: The name of the resource.
        :param MonitorArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MonitorArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 content_type: Optional[pulumi.Input[str]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 created_by: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 group_notifications: Optional[pulumi.Input[bool]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 is_locked: Optional[pulumi.Input[bool]] = None,
                 is_mutable: Optional[pulumi.Input[bool]] = None,
                 is_system: Optional[pulumi.Input[bool]] = None,
                 modified_at: Optional[pulumi.Input[str]] = None,
                 modified_by: Optional[pulumi.Input[str]] = None,
                 monitor_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notifications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MonitorNotificationArgs']]]]] = None,
                 parent_id: Optional[pulumi.Input[str]] = None,
                 post_request_map: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 queries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MonitorQueryArgs']]]]] = None,
                 statuses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 triggers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MonitorTriggerArgs']]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MonitorArgs.__new__(MonitorArgs)

            __props__.__dict__["content_type"] = content_type
            __props__.__dict__["created_at"] = created_at
            __props__.__dict__["created_by"] = created_by
            __props__.__dict__["description"] = description
            __props__.__dict__["group_notifications"] = group_notifications
            __props__.__dict__["is_disabled"] = is_disabled
            __props__.__dict__["is_locked"] = is_locked
            __props__.__dict__["is_mutable"] = is_mutable
            __props__.__dict__["is_system"] = is_system
            __props__.__dict__["modified_at"] = modified_at
            __props__.__dict__["modified_by"] = modified_by
            if monitor_type is None and not opts.urn:
                raise TypeError("Missing required property 'monitor_type'")
            __props__.__dict__["monitor_type"] = monitor_type
            __props__.__dict__["name"] = name
            __props__.__dict__["notifications"] = notifications
            __props__.__dict__["parent_id"] = parent_id
            __props__.__dict__["post_request_map"] = post_request_map
            __props__.__dict__["queries"] = queries
            __props__.__dict__["statuses"] = statuses
            __props__.__dict__["triggers"] = triggers
            __props__.__dict__["type"] = type
            __props__.__dict__["version"] = version
        super(Monitor, __self__).__init__(
            'sumologic:index/monitor:Monitor',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            content_type: Optional[pulumi.Input[str]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            created_by: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            group_notifications: Optional[pulumi.Input[bool]] = None,
            is_disabled: Optional[pulumi.Input[bool]] = None,
            is_locked: Optional[pulumi.Input[bool]] = None,
            is_mutable: Optional[pulumi.Input[bool]] = None,
            is_system: Optional[pulumi.Input[bool]] = None,
            modified_at: Optional[pulumi.Input[str]] = None,
            modified_by: Optional[pulumi.Input[str]] = None,
            monitor_type: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            notifications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MonitorNotificationArgs']]]]] = None,
            parent_id: Optional[pulumi.Input[str]] = None,
            post_request_map: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            queries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MonitorQueryArgs']]]]] = None,
            statuses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            triggers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MonitorTriggerArgs']]]]] = None,
            type: Optional[pulumi.Input[str]] = None,
            version: Optional[pulumi.Input[int]] = None) -> 'Monitor':
        """
        Get an existing Monitor resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MonitorState.__new__(_MonitorState)

        __props__.__dict__["content_type"] = content_type
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["description"] = description
        __props__.__dict__["group_notifications"] = group_notifications
        __props__.__dict__["is_disabled"] = is_disabled
        __props__.__dict__["is_locked"] = is_locked
        __props__.__dict__["is_mutable"] = is_mutable
        __props__.__dict__["is_system"] = is_system
        __props__.__dict__["modified_at"] = modified_at
        __props__.__dict__["modified_by"] = modified_by
        __props__.__dict__["monitor_type"] = monitor_type
        __props__.__dict__["name"] = name
        __props__.__dict__["notifications"] = notifications
        __props__.__dict__["parent_id"] = parent_id
        __props__.__dict__["post_request_map"] = post_request_map
        __props__.__dict__["queries"] = queries
        __props__.__dict__["statuses"] = statuses
        __props__.__dict__["triggers"] = triggers
        __props__.__dict__["type"] = type
        __props__.__dict__["version"] = version
        return Monitor(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[str]:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="groupNotifications")
    def group_notifications(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "group_notifications")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isLocked")
    def is_locked(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "is_locked")

    @property
    @pulumi.getter(name="isMutable")
    def is_mutable(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "is_mutable")

    @property
    @pulumi.getter(name="isSystem")
    def is_system(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "is_system")

    @property
    @pulumi.getter(name="modifiedAt")
    def modified_at(self) -> pulumi.Output[str]:
        return pulumi.get(self, "modified_at")

    @property
    @pulumi.getter(name="modifiedBy")
    def modified_by(self) -> pulumi.Output[str]:
        return pulumi.get(self, "modified_by")

    @property
    @pulumi.getter(name="monitorType")
    def monitor_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "monitor_type")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def notifications(self) -> pulumi.Output[Optional[Sequence['outputs.MonitorNotification']]]:
        return pulumi.get(self, "notifications")

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "parent_id")

    @property
    @pulumi.getter(name="postRequestMap")
    def post_request_map(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        return pulumi.get(self, "post_request_map")

    @property
    @pulumi.getter
    def queries(self) -> pulumi.Output[Optional[Sequence['outputs.MonitorQuery']]]:
        return pulumi.get(self, "queries")

    @property
    @pulumi.getter
    def statuses(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "statuses")

    @property
    @pulumi.getter
    def triggers(self) -> pulumi.Output[Optional[Sequence['outputs.MonitorTrigger']]]:
        return pulumi.get(self, "triggers")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[int]:
        return pulumi.get(self, "version")

