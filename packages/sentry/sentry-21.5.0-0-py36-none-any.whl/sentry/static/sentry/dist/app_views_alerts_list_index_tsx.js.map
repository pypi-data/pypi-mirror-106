{"version":3,"sources":["webpack:///./app/components/onboardingPanel.tsx","webpack:///./app/views/alerts/list/header.tsx","webpack:///./app/views/alerts/list/onboarding.tsx","webpack:///./app/views/alerts/list/index.tsx","webpack:///./images/spot/alerts-empty-state.svg"],"names":["OnboardingPanel","className","image","children","Container","IlloBox","StyledBox","space","p","theme","breakpoints","AlertHeader","router","organization","activeTab","alertRulesLink","to","slug","t","BorderlessHeader","StyledLayoutHeaderContent","StyledLayoutTitle","Actions","gap","iconProps","size","priority","referrer","showPermissionGuide","onClick","e","preventDefault","navigateTo","href","icon","aria-label","TabLayoutHeader","underlined","features","hasFeature","Layout","ButtonBar","Onboarding","actions","AlertsImage","src","emptyStateImg","ButtonList","DOCS_URL","getQueryStatus","status","includes","IncidentsList","this","props","params","location","query","incidentsQuery","expand","orgId","incidentList","state","length","setState","hasAlertRule","firstVisitShown","loading","api","requestPromise","method","alertRules","promptsCheck","organizationId","id","feature","prompt","dismissedTime","promptsUpdate","Fragment","external","isCircled","title","description","tct","link","renderBody","incidentListPageLinks","allProjectsFromIncidents","Set","flatten","map","projects","checkingForAlertRules","undefined","showLoadingIndicator","tryRenderOnboarding","StyledPanelHeader","PaddedTitleAndSparkLine","tryRenderEmpty","slugs","Array","from","initiallyLoaded","incident","projectsLoaded","filteredStatus","pageLinks","pathname","openIncidentsQuery","omit","closedIncidentsQuery","orgSlug","showDateSelector","fullWidth","StyledButtonBar","merged","active","barId","renderList","AsyncComponent","IncidentsListContainer","trackView","nextProps","trackAnalyticsEvent","eventKey","eventName","organization_id","type","hookName","renderDisabled","renderNoAccess","Component","TitleAndSparkLine","PanelHeader","withOrganization","module","exports"],"mappings":"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","file":"app_views_alerts_list_index_tsx.3d437575d1becc254b4b.js","sourcesContent":["import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Panel} from 'app/components/panels';\nimport space from 'app/styles/space';\n\ntype Props = React.PropsWithChildren<{\n  image: React.ReactNode;\n  className?: string;\n}>;\n\nfunction OnboardingPanel({className, image, children}: Props) {\n  return (\n    <Panel className={className}>\n      <Container>\n        <IlloBox>{image}</IlloBox>\n        <StyledBox>{children}</StyledBox>\n      </Container>\n    </Panel>\n  );\n}\n\nconst Container = styled('div')`\n  padding: ${space(3)};\n  position: relative;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    display: flex;\n    align-items: center;\n    flex-direction: row;\n    justify-content: center;\n    flex-wrap: wrap;\n    min-height: 300px;\n    max-width: 1000px;\n    margin: 0 auto;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[1]}) {\n    min-height: 350px;\n  }\n`;\n\nconst StyledBox = styled('div')`\n  z-index: 1;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    flex: 2;\n  }\n`;\n\nconst IlloBox = styled(StyledBox)`\n  position: relative;\n  min-height: 100px;\n  max-width: 300px;\n  margin: ${space(2)} auto;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    flex: 1;\n    margin: ${space(3)};\n    max-width: auto;\n  }\n`;\n\nexport default OnboardingPanel;\n","import * as React from 'react';\nimport {InjectedRouter} from 'react-router/lib/Router';\nimport styled from '@emotion/styled';\n\nimport {navigateTo} from 'app/actionCreators/navigation';\nimport Feature from 'app/components/acl/feature';\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport CreateAlertButton from 'app/components/createAlertButton';\nimport GlobalSelectionLink from 'app/components/globalSelectionLink';\nimport * as Layout from 'app/components/layouts/thirds';\nimport {IconSettings} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization} from 'app/types';\n\ntype Props = {\n  router: InjectedRouter;\n  organization: Organization;\n  activeTab: 'stream' | 'rules';\n};\n\nconst AlertHeader = ({router, organization, activeTab}: Props) => {\n  /**\n   * Incidents list is currently at the organization level, but the link needs to\n   * go down to a specific project scope.\n   */\n  const handleNavigateToSettings = (e: React.MouseEvent) => {\n    e.preventDefault();\n    navigateTo(`/settings/${organization.slug}/projects/:projectId/alerts/`, router);\n  };\n\n  const alertRulesLink = (\n    <li className={activeTab === 'rules' ? 'active' : ''}>\n      <GlobalSelectionLink to={`/organizations/${organization.slug}/alerts/rules/`}>\n        {t('Alert Rules')}\n      </GlobalSelectionLink>\n    </li>\n  );\n\n  return (\n    <React.Fragment>\n      <BorderlessHeader>\n        <StyledLayoutHeaderContent>\n          <StyledLayoutTitle>{t('Alerts')}</StyledLayoutTitle>\n        </StyledLayoutHeaderContent>\n        <Layout.HeaderActions>\n          <Actions gap={1}>\n            <CreateAlertButton\n              organization={organization}\n              iconProps={{size: 'sm'}}\n              priority=\"primary\"\n              referrer=\"alert_stream\"\n              showPermissionGuide\n            >\n              {t('Create Alert Rule')}\n            </CreateAlertButton>\n            <Button\n              onClick={handleNavigateToSettings}\n              href=\"#\"\n              icon={<IconSettings size=\"sm\" />}\n              aria-label=\"Settings\"\n            />\n          </Actions>\n        </Layout.HeaderActions>\n      </BorderlessHeader>\n      <TabLayoutHeader>\n        <Layout.HeaderNavTabs underlined>\n          <Feature features={['alert-details-redesign']} organization={organization}>\n            {({hasFeature}) =>\n              !hasFeature ? (\n                <React.Fragment>\n                  <Feature features={['incidents']} organization={organization}>\n                    <li className={activeTab === 'stream' ? 'active' : ''}>\n                      <GlobalSelectionLink\n                        to={`/organizations/${organization.slug}/alerts/`}\n                      >\n                        {t('Metric Alerts')}\n                      </GlobalSelectionLink>\n                    </li>\n                  </Feature>\n                  {alertRulesLink}\n                </React.Fragment>\n              ) : (\n                <React.Fragment>\n                  {alertRulesLink}\n                  <li className={activeTab === 'stream' ? 'active' : ''}>\n                    <GlobalSelectionLink\n                      to={`/organizations/${organization.slug}/alerts/`}\n                    >\n                      {t('History')}\n                    </GlobalSelectionLink>\n                  </li>\n                </React.Fragment>\n              )\n            }\n          </Feature>\n        </Layout.HeaderNavTabs>\n      </TabLayoutHeader>\n    </React.Fragment>\n  );\n};\n\nexport default AlertHeader;\n\nconst BorderlessHeader = styled(Layout.Header)`\n  border-bottom: 0;\n\n  /* Not enough buttons to change direction for tablet view */\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    grid-template-columns: 1fr auto;\n  }\n`;\n\nconst StyledLayoutHeaderContent = styled(Layout.HeaderContent)`\n  margin-bottom: 0;\n  margin-right: ${space(2)};\n`;\n\nconst StyledLayoutTitle = styled(Layout.Title)`\n  margin-top: ${space(0.5)};\n`;\n\nconst TabLayoutHeader = styled(Layout.Header)`\n  padding-top: ${space(1)};\n\n  @media (max-width: ${p => p.theme.breakpoints[1]}) {\n    padding-top: ${space(1)};\n  }\n`;\n\nconst Actions = styled(ButtonBar)`\n  height: 32px;\n`;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport emptyStateImg from 'sentry-images/spot/alerts-empty-state.svg';\n\nimport ButtonBar from 'app/components/buttonBar';\nimport OnboardingPanel from 'app/components/onboardingPanel';\nimport {t} from 'app/locale';\n\ntype Props = {\n  actions: React.ReactNode;\n};\n\nfunction Onboarding({actions}: Props) {\n  return (\n    <OnboardingPanel image={<AlertsImage src={emptyStateImg} />}>\n      <h3>{t('More signal, less noise')}</h3>\n      <p>\n        {t(\n          'Not every error is worth an email. Set your own rules for alerts you need, with information that helps.'\n        )}\n      </p>\n      <ButtonList gap={1}>{actions}</ButtonList>\n    </OnboardingPanel>\n  );\n}\n\nconst AlertsImage = styled('img')`\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    user-select: none;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    width: 220px;\n    margin-top: auto;\n    margin-bottom: auto;\n    transform: translateX(-50%);\n    left: 50%;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[2]}) {\n    transform: translateX(-60%);\n    width: 280px;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[3]}) {\n    transform: translateX(-75%);\n    width: 320px;\n  }\n`;\n\nconst ButtonList = styled(ButtonBar)`\n  grid-template-columns: repeat(auto-fit, minmax(130px, max-content));\n`;\n\nexport default Onboarding;\n","import {Component, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport flatten from 'lodash/flatten';\nimport omit from 'lodash/omit';\n\nimport {promptsCheck, promptsUpdate} from 'app/actionCreators/prompts';\nimport Feature from 'app/components/acl/feature';\nimport Alert from 'app/components/alert';\nimport AsyncComponent from 'app/components/asyncComponent';\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport CreateAlertButton from 'app/components/createAlertButton';\nimport * as Layout from 'app/components/layouts/thirds';\nimport ExternalLink from 'app/components/links/externalLink';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';\nimport Pagination from 'app/components/pagination';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport {IconCheckmark, IconInfo} from 'app/icons';\nimport {t, tct} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization, Project} from 'app/types';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\nimport Projects from 'app/utils/projects';\nimport withOrganization from 'app/utils/withOrganization';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\n\nimport {Incident} from '../types';\n\nimport AlertHeader from './header';\nimport Onboarding from './onboarding';\nimport AlertListRow from './row';\nimport {TableLayout, TitleAndSparkLine} from './styles';\n\nconst DEFAULT_QUERY_STATUS = 'open';\n\nconst DOCS_URL =\n  'https://docs.sentry.io/workflow/alerts-notifications/alerts/?_ga=2.21848383.580096147.1592364314-1444595810.1582160976';\n\nfunction getQueryStatus(status: any): 'open' | 'closed' {\n  return ['open', 'closed'].includes(status) ? status : DEFAULT_QUERY_STATUS;\n}\n\ntype Props = RouteComponentProps<{orgId: string}, {}> & {\n  organization: Organization;\n};\n\ntype State = {\n  incidentList: Incident[];\n  /**\n   * Is there at least one alert rule configured for the currently selected\n   * projects?\n   */\n  hasAlertRule?: boolean;\n  /**\n   * User has not yet seen the 'alert_stream' welcome prompt for this\n   * organization.\n   */\n  firstVisitShown?: boolean;\n};\n\nclass IncidentsList extends AsyncComponent<Props, State & AsyncComponent['state']> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {params, location, organization} = this.props;\n    const {query} = location;\n    const status = getQueryStatus(query.status);\n    const incidentsQuery = {\n      ...query,\n      ...(organization.features.includes('alert-details-redesign')\n        ? {expand: ['original_alert_rule']}\n        : {}),\n      status,\n    };\n\n    return [\n      [\n        'incidentList',\n        `/organizations/${params && params.orgId}/incidents/`,\n        {query: incidentsQuery},\n      ],\n    ];\n  }\n\n  /**\n   * If our incidentList is empty, determine if we've configured alert rules or\n   * if the user has seen the welcome prompt.\n   */\n  async onLoadAllEndpointsSuccess() {\n    const {incidentList} = this.state;\n\n    if (!incidentList || incidentList.length !== 0) {\n      this.setState({hasAlertRule: true, firstVisitShown: false});\n      return;\n    }\n\n    this.setState({loading: true});\n\n    // Check if they have rules or not, to know which empty state message to\n    // display\n    const {params, location, organization} = this.props;\n\n    const alertRules = await this.api.requestPromise(\n      `/organizations/${params?.orgId}/alert-rules/`,\n      {\n        method: 'GET',\n        query: location.query,\n      }\n    );\n    const hasAlertRule = alertRules.length > 0;\n\n    // We've already configured alert rules, no need to check if we should show\n    // the \"first time welcome\" prompt\n    if (hasAlertRule) {\n      this.setState({hasAlertRule, firstVisitShown: false, loading: false});\n      return;\n    }\n\n    // Check if they have already seen the prompt for the alert stream\n    const prompt = await promptsCheck(this.api, {\n      organizationId: organization.id,\n      feature: 'alert_stream',\n    });\n\n    const firstVisitShown = !prompt?.dismissedTime;\n\n    if (firstVisitShown) {\n      // Prompt has not been seen, mark the prompt as seen immediately so they\n      // don't see it again\n      promptsUpdate(this.api, {\n        feature: 'alert_stream',\n        organizationId: organization.id,\n        status: 'dismissed',\n      });\n    }\n\n    this.setState({hasAlertRule, firstVisitShown, loading: false});\n  }\n\n  tryRenderOnboarding() {\n    const {firstVisitShown} = this.state;\n    const {organization} = this.props;\n\n    if (!firstVisitShown) {\n      return null;\n    }\n\n    const actions = (\n      <Fragment>\n        <Button size=\"small\" external href={DOCS_URL}>\n          {t('View Features')}\n        </Button>\n        <CreateAlertButton\n          organization={organization}\n          iconProps={{size: 'xs'}}\n          size=\"small\"\n          priority=\"primary\"\n          referrer=\"alert_stream\"\n        >\n          {t('Create Alert Rule')}\n        </CreateAlertButton>\n      </Fragment>\n    );\n\n    return <Onboarding actions={actions} />;\n  }\n\n  tryRenderEmpty() {\n    const {hasAlertRule, incidentList} = this.state;\n    const status = getQueryStatus(this.props.location.query.status);\n\n    if (!incidentList || incidentList.length > 0) {\n      return null;\n    }\n\n    return (\n      <EmptyMessage\n        size=\"medium\"\n        icon={<IconCheckmark isCircled size=\"48\" />}\n        title={\n          !hasAlertRule\n            ? t('No metric alert rules exist for the selected projects.')\n            : status === 'open'\n            ? t('No unresolved metric alerts in the selected projects.')\n            : t('No resolved metric alerts in the selected projects.')\n        }\n        description={tct('Learn more about [link:Metric Alerts]', {\n          link: <ExternalLink href={DOCS_URL} />,\n        })}\n      />\n    );\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderList() {\n    const {loading, incidentList, incidentListPageLinks, hasAlertRule} = this.state;\n    const {\n      params: {orgId},\n      organization,\n    } = this.props;\n\n    const allProjectsFromIncidents = new Set(\n      flatten(incidentList?.map(({projects}) => projects))\n    );\n    const checkingForAlertRules =\n      incidentList && incidentList.length === 0 && hasAlertRule === undefined\n        ? true\n        : false;\n    const showLoadingIndicator = loading || checkingForAlertRules;\n    const status = getQueryStatus(this.props.location.query.status);\n\n    return (\n      <Fragment>\n        {this.tryRenderOnboarding() ?? (\n          <Panel>\n            {!loading && (\n              <StyledPanelHeader>\n                <TableLayout status={status}>\n                  <PaddedTitleAndSparkLine status={status}>\n                    <div>{t('Alert')}</div>\n                    {status === 'open' && <div>{t('Graph')}</div>}\n                  </PaddedTitleAndSparkLine>\n                  <div>{t('Project')}</div>\n                  <div>{t('Triggered')}</div>\n                  {status === 'closed' && <div>{t('Duration')}</div>}\n                  {status === 'closed' && <div>{t('Resolved')}</div>}\n                </TableLayout>\n              </StyledPanelHeader>\n            )}\n            {showLoadingIndicator ? (\n              <LoadingIndicator />\n            ) : (\n              this.tryRenderEmpty() ?? (\n                <PanelBody>\n                  <Projects orgId={orgId} slugs={Array.from(allProjectsFromIncidents)}>\n                    {({initiallyLoaded, projects}) =>\n                      incidentList.map(incident => (\n                        <AlertListRow\n                          key={incident.id}\n                          projectsLoaded={initiallyLoaded}\n                          projects={projects as Project[]}\n                          incident={incident}\n                          orgId={orgId}\n                          filteredStatus={status}\n                          organization={organization}\n                        />\n                      ))\n                    }\n                  </Projects>\n                </PanelBody>\n              )\n            )}\n          </Panel>\n        )}\n        <Pagination pageLinks={incidentListPageLinks} />\n      </Fragment>\n    );\n  }\n\n  renderBody() {\n    const {params, location, organization, router} = this.props;\n    const {pathname, query} = location;\n    const {orgId} = params;\n\n    const openIncidentsQuery = omit({...query, status: 'open'}, 'cursor');\n    const closedIncidentsQuery = omit({...query, status: 'closed'}, 'cursor');\n\n    const status = getQueryStatus(query.status);\n\n    return (\n      <SentryDocumentTitle title={t('Alerts')} orgSlug={orgId}>\n        <GlobalSelectionHeader organization={organization} showDateSelector={false}>\n          <AlertHeader organization={organization} router={router} activeTab=\"stream\" />\n          <Layout.Body>\n            <Layout.Main fullWidth>\n              {!this.tryRenderOnboarding() && (\n                <Fragment>\n                  <Feature\n                    features={['alert-details-redesign']}\n                    organization={organization}\n                  >\n                    <Alert icon={<IconInfo />}>\n                      {t('This page only shows metric alerts that have been triggered.')}\n                    </Alert>\n                  </Feature>\n                  <StyledButtonBar merged active={status}>\n                    <Button\n                      to={{pathname, query: openIncidentsQuery}}\n                      barId=\"open\"\n                      size=\"small\"\n                    >\n                      {t('Unresolved')}\n                    </Button>\n                    <Button\n                      to={{pathname, query: closedIncidentsQuery}}\n                      barId=\"closed\"\n                      size=\"small\"\n                    >\n                      {t('Resolved')}\n                    </Button>\n                  </StyledButtonBar>\n                </Fragment>\n              )}\n              {this.renderList()}\n            </Layout.Main>\n          </Layout.Body>\n        </GlobalSelectionHeader>\n      </SentryDocumentTitle>\n    );\n  }\n}\n\nclass IncidentsListContainer extends Component<Props> {\n  componentDidMount() {\n    this.trackView();\n  }\n\n  componentDidUpdate(nextProps: Props) {\n    if (nextProps.location.query?.status !== this.props.location.query?.status) {\n      this.trackView();\n    }\n  }\n\n  trackView() {\n    const {location, organization} = this.props;\n    const status = getQueryStatus(location.query.status);\n\n    trackAnalyticsEvent({\n      eventKey: 'alert_stream.viewed',\n      eventName: 'Alert Stream: Viewed',\n      organization_id: organization.id,\n      status,\n    });\n  }\n\n  renderNoAccess() {\n    return (\n      <Layout.Body>\n        <Layout.Main fullWidth>\n          <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n        </Layout.Main>\n      </Layout.Body>\n    );\n  }\n\n  render() {\n    const {organization} = this.props;\n\n    return (\n      <Feature\n        features={['organizations:incidents']}\n        organization={organization}\n        hookName=\"feature-disabled:alerts-page\"\n        renderDisabled={this.renderNoAccess}\n      >\n        <IncidentsList {...this.props} />\n      </Feature>\n    );\n  }\n}\n\nconst StyledButtonBar = styled(ButtonBar)`\n  width: 100px;\n  margin-bottom: ${space(1)};\n`;\n\nconst PaddedTitleAndSparkLine = styled(TitleAndSparkLine)`\n  padding-left: ${space(2)};\n`;\n\nconst StyledPanelHeader = styled(PanelHeader)`\n  /* Match table row padding for the grid to align */\n  padding: ${space(1.5)} ${space(2)} ${space(1.5)} 0;\n`;\n\nexport default withOrganization(IncidentsListContainer);\n","module.exports = __webpack_public_path__ + \"spot/alerts-empty-state.4d03bc.svg\";"],"sourceRoot":""}