{"version":3,"sources":["webpack:///./app/utils/slugify.tsx","webpack:///./app/utils/withTeams.tsx","webpack:///./app/views/projectInstall/issueAlertOptions.tsx","webpack:///./app/views/projectInstall/createProject.tsx","webpack:///./app/views/projectInstall/newProject.tsx"],"names":["slugify","str","toLowerCase","replace","WrappedComponent","createReactClass","displayName","getDisplayName","mixins","Reflux","TeamStore","getInitialState","teams","onTeamUpdate","this","setState","render","props","state","MetricValues","Actions","UNIQUE_USER_FREQUENCY_CONDITION","EVENT_FREQUENCY_CONDITION","METRIC_CONDITION_MAP","ERRORS","USERS","getConditionFrom","interval","metricValue","threshold","condition","RangeError","id","value","IssueAlertOptions","conditions","intervalChoices","alertSetting","CREATE_ALERT_LATER","toString","metric","t","filter","valueDescriptionPair","some","object","hasProperlyLoadedConditions","options","ALERT_ON_EVERY_ISSUE","push","CUSTOMIZED_ALERTS","CustomizeAlertsGrid","onClick","e","preventDefault","setStateAndUpdateParents","InlineInput","type","min","name","placeholder","onChange","target","data-test-id","InlineSelectControl","choices","getAvailableMetricChoices","map","choiceValue","node","RadioItemWrapper","defaultRules","shouldCreateCustomRule","parseInt","length","undefined","actions","actionMatch","frequency","callback","getUpdatedData","organization","slug","Object","values","includes","formFields","reduce","acc","curr","isEqual","unpackConditions","Sentry","scope","setExtra","Error","issueAlertOptionsChoices","getIssueAlertsChoices","PageHeadingWithTopMargins","withMargins","RadioGroupWithPadding","label","AsyncComponent","withOrganization","space","Input","SelectControl","RadioGroup","PageHeading","CreateProject","context","api","projectName","platform","team","dataFragment","inFlight","requestPromise","method","data","default_rules","projectData","ruleData","ruleId","trackIssueAlertOptionSelectedEvent","ProjectActions","platformKey","nextUrl","browserHistory","error","responseJSON","detail","status","platformId","getPlatformName","query","location","accessTeams","hasAccess","category","categoryList","filterTeam","createProjectForm","CreateProjectForm","onSubmit","createProject","FormLabel","ProjectNameInput","StyledPlatformIcon","autoComplete","TeamSelectInput","clearable","choice","title","borderless","icon","isCircled","openCreateTeamModal","onClose","priority","disabled","canSubmitForm","every","isDefaultRules","eventKey","eventName","organization_id","project_id","rule_type","custom_rule_id","trackAnalyticsEvent","HelpText","defaultCategory","setPlatform","showOther","updatedData","renderProjectForm","React","withApi","withRouter","withTeams","p","theme","background","fontSizeExtraLarge","PlatformIcon","inputStyles","subText","NewProject","Container","className","Content"],"mappings":"8IAEe,SAASA,EAAQC,GAC9B,MAAsB,iBAARA,EAAmBA,EAAIC,cAAcC,QAAQ,IAAK,KAAO,G,qtDCyCzE,QAzBkB,SAChBC,GADgB,OAGhBC,IAA2D,CACzDC,YAAa,aAAF,QAAeC,OAAeH,GAA9B,KACXI,OAAQ,CAACC,aAAgBC,IAAW,iBAEpCC,gBAJyD,WAKvD,MAAO,CACLC,MAAOF,eAIXG,aAVyD,WAWvDC,KAAKC,SAAS,CACZH,MAAOF,gBAGXM,OAfyD,WAgBvD,OACE,QAACZ,EAAD,OAAuBU,KAAKG,OAA5B,IAAyCL,MAAOE,KAAKI,MAAMN,c,wGCvB9DO,EAIAC,E,2gIAJAD,O,mBAAAA,I,kBAAAA,M,cAIAC,O,+CAAAA,I,yCAAAA,I,4CAAAA,M,KAML,IAAMC,EACJ,4EACIC,EACJ,kEAGIC,IAAoB,eACvBJ,EAAaK,OAASF,IADC,SAEvBH,EAAaM,MAAQJ,GAFE,GAiC1B,SAASK,GACPC,EACAC,EACAC,GAEA,IAAIC,EACJ,OAAQF,GACN,KAAKT,EAAaK,OAChBM,EAAYR,EACZ,MACF,KAAKH,EAAaM,MAChBK,EAAYT,EACZ,MACF,QACE,MAAM,IAAIU,WAAW,wCAEzB,MAAO,CACLJ,WACAK,GAAIF,EACJG,MAAOJ,G,IAkBLK,G,ijBACJ,WACE,mFAEEC,WAAY,GACZC,gBAAiB,GACjBC,aAAcjB,EAAQkB,mBAAmBC,WACzCC,OAAQrB,EAAaK,OACrBG,SAAU,GACVE,UAAW,O,uCAIf,WAA4B,WAC1B,MAAO,CACL,CAACV,EAAaK,QAAQiB,OAAE,mBACxB,CAACtB,EAAaM,OAAOgB,OAAE,uBACvBC,QAAO,SAAAC,GAAwB,QACxBV,GADwB,OACfU,EADe,MAE/B,iBAAO,EAAKzB,MAAMiB,kBAAlB,iBAAO,EAAuBS,YAA9B,aAAO,UACL,SAAAC,GAAM,OAAIA,aAAA,EAAAA,EAAQb,MAAOT,GAAqBU,W,mCAKpD,SACEa,GACmC,WAC7BC,EAAuC,CAC3C,CAAC3B,EAAQkB,mBAAmBC,YAAYE,OAAE,oCAC1C,CAACrB,EAAQ4B,qBAAqBT,YAAYE,OAAE,iCA+C9C,OA5CIK,GACFC,EAAQE,KAAK,CACX7B,EAAQ8B,kBAAkBX,YAC1B,QAACY,GAAD,CAEEC,QAAS,SAAAC,GAIPA,EAAEC,iBACF,IAAMjB,EAAejB,EAAQ8B,kBAAkBX,WAC/C,EAAKgB,yBAAyB,CAAClB,kBARnC,WAWGI,OAAE,6BACH,QAACe,GAAD,CACEC,KAAK,SACLC,IAAI,IACJC,KAAK,GACLC,YArHsB,KAsHtB3B,MAAOnB,KAAKI,MAAMW,UAClBgC,SAAU,SAAAhC,GAAS,OACjB,EAAK0B,yBAAyB,CAAC1B,UAAWA,EAAUiC,OAAO7B,SAE7D8B,eAAa,iBAEf,QAACC,GAAD,CACE/B,MAAOnB,KAAKI,MAAMsB,OAClByB,QAASnD,KAAKoD,4BACdL,SAAU,SAAArB,GAAM,OAAI,EAAKe,yBAAyB,CAACf,OAAQA,EAAOP,SAClE8B,eAAa,2BAEdtB,OAAE,sBACH,QAACuB,GAAD,CACE/B,MAAOnB,KAAKI,MAAMS,SAClBsC,QAASnD,KAAKI,MAAMkB,gBACpByB,SAAU,SAAAlC,GAAQ,OAChB,EAAK4B,yBAAyB,CAAC5B,SAAUA,EAASM,SAEpD8B,eAAa,8BAnCV3C,EAAQ8B,qBAwCZH,EAAQoB,KAAI,+BAAEC,EAAF,KAAeC,EAAf,WAAyB,CAC1CD,GACA,QAACE,GAAD,UAAqCD,GAAdD,S,4BAI3B,WACE,IAAIG,EACAC,EAEJ,OAD8BC,SAAS3D,KAAKI,MAAMmB,aAAc,KAE9D,KAAKjB,EAAQ4B,qBACXuB,GAAe,EACfC,GAAyB,EACzB,MACF,KAAKpD,EAAQkB,mBACXiC,GAAe,EACfC,GAAyB,EACzB,MACF,KAAKpD,EAAQ8B,kBACXqB,GAAe,EACfC,GAAyB,EACzB,MACF,QACE,MAAM,IAAIzC,WAAW,iDAGzB,MAAO,CACLwC,eACAC,yBACAb,KAAM,qCACNxB,WACErB,KAAKI,MAAMS,SAAS+C,OAAS,GAAK5D,KAAKI,MAAMW,UAAU6C,OAAS,EAC5D,CACEhD,GACEZ,KAAKI,MAAMS,SACXb,KAAKI,MAAMsB,OACX1B,KAAKI,MAAMW,iBAGf8C,EACNC,QAAS,CAAC,CAAC5C,GA9LW,wDA+LtB6C,YAAa,MACbC,UAAW,K,sCAIf,SACE5D,EAQA6D,GACM,WACNjE,KAAKC,SAASG,GAAO,WACnB6D,aACA,EAAK9D,MAAM4C,SAAS,EAAKmB,uB,0BAI7B,WACE,MAAO,CAAC,CAAC,aAAD,oBAA4BlE,KAAKG,MAAMgE,aAAaC,KAApD,yB,uCAGV,WAAkC,eAC1B/C,EAAU,UAAGrB,KAAKI,MAAMiB,kBAAd,iBAAG,EAAuBO,cAA1B,aAAG,UAAgC,SAAAG,GAAM,OACvDsC,OAAOC,OAAO7D,IAAsB8D,SAASxC,aAA7C,EAA6CA,EAAQb,OAGvD,GAAKG,GAAoC,IAAtBA,EAAWuC,OAA9B,CALgC,MA/JpC,SAA0BvC,GAAmB,MAQrCC,EAAkBD,EACrBgC,KAAI,SAAArC,GAAS,yBAAIA,EAAUwD,kBAAd,iBAAI,EAAsB3D,gBAA1B,aAAI,EAAgCsC,WACjDsB,QATqB,SAACC,EAAKC,GAC5B,OAAKD,GAAQC,GAASC,IAAQF,EAAKC,GAG5BD,EAFE,QAQX,MAAO,CAACpD,kBAAiBT,SAAUS,SAAF,UAAEA,EAAkB,UAApB,aAAE,EAAuB,IAgKpBuD,CAAiBxD,GAA9CC,EAZyB,EAYzBA,gBAAiBT,EAZQ,EAYRA,SACxB,IAAKS,IAAoBT,EAWvB,OAVAiE,MAAiB,SAAAC,GACfA,EAAMC,SAAS,QAAS,EAAK7E,OAC7B4E,EAAMC,SAAS,QAAS,EAAK5E,OAC7B0E,KACE,IAAIG,MAAM,gFAGdjF,KAAKyC,yBAAyB,CAC5BpB,gBAAYwC,IAKhB7D,KAAKyC,yBAAyB,CAC5BpB,aACAC,kBACAT,kBAxBAb,KAAKyC,yBAAyB,CAC5BpB,gBAAYwC,M,wBA2BlB,WAAiC,aACzBqB,EAA2BlF,KAAKmF,uBACpC,UAAAnF,KAAKI,MAAMiB,kBAAX,eAAuBuC,QAAS,GAElC,OACE,QAAC,WAAD,YACE,QAACwB,GAAD,CAA2BC,aAAW,EAAtC,UACG1D,OAAE,sCAEL,QAAC2D,GAAD,CACEnC,QAAS+B,EACTK,OAAO5D,OAAE,iCACToB,SAAU,SAAAxB,GAAY,OAAI,EAAKkB,yBAAyB,CAAClB,kBACzDJ,MAAOnB,KAAKI,MAAMmB,sB,GAhMIiE,KAuMhC,UAAeC,OAAiBrE,IAEhC,IAAMiB,IAAsB,OAAO,MAAP,sBAAH,uEAGXqD,OAAM,GAHK,wBAMnBhD,IAAc,OAAOiD,IAAP,sBAAH,qCAGXzC,IAAsB,OAAO0C,IAAP,sBAAH,sCAGnBN,IAAwB,OAAOO,IAAP,sBAAH,YACdH,OAAM,GADQ,iEAKrBN,IAA4B,OAAOU,IAAP,sBAAH,2CAGzBtC,IAAmB,OAAO,MAAP,sBAAH,oG,ykBCvStB,IAgCMuC,G,wcACJ,WAAY5F,EAAO6F,GAAS,sBAC1B,cAAM7F,EAAO6F,IADa,qEA6GZ,WAAMzD,GAAN,wHACdA,EAAEC,iBADY,EAEc,EAAKrC,MAA1BgE,EAFO,EAEPA,aAAc8B,EAFP,EAEOA,IAFP,EAGsC,EAAK7F,MAAlD8F,EAHO,EAGPA,YAAaC,EAHN,EAGMA,SAAUC,EAHhB,EAGgBA,KAAMC,EAHtB,EAGsBA,aAC7BjC,EAAQD,EAARC,KAELV,GANY,EAaV2C,GAAgB,IAPlB3C,uBACAb,EAPY,EAOZA,KACAxB,EARY,EAQZA,WACAyC,EATY,EASZA,QACAC,EAVY,EAUZA,YACAC,EAXY,EAWZA,UACAP,EAZY,EAYZA,aAGF,EAAKxD,SAAS,CAACqG,UAAU,IAEpBJ,GACHpB,MAAiB,SAAAC,GACfA,EAAMC,SAAS,QAAS,EAAK7E,OAC7B4E,EAAMC,SAAS,QAAS,EAAK5E,OAC7B0E,KAAsB,sBArBZ,mBA0BcmB,EAAIM,eAAJ,iBAA6BnC,EAA7B,YAAqCgC,EAArC,cAAuD,CAC/EI,OAAQ,OACRC,KAAM,CACJ5D,KAAMqD,EACNC,WACAO,cAAejD,cA/BP,WA0BNkD,EA1BM,QAoCRjD,EApCQ,kCAqCauC,EAAIM,eAAJ,oBACRpC,EAAaC,KADL,YACauC,EAAYvC,KADzB,WAErB,CACEoC,OAAQ,OACRC,KAAM,CACJ5D,OACAxB,aACAyC,UACAC,cACAC,eA9CI,QAqCJ4C,EArCI,OAkDVC,EAASD,EAAS1F,GAlDR,QAoDZ,EAAK4F,mCACHH,EACAlD,EACAC,EACAmD,GAGFE,kBAA6BJ,GACvBK,EAAcb,GAAY,QAC1Bc,EA7DM,WA6DQ9C,EAAaC,KA7DrB,YA6D6BuC,EAAYvC,KA7DzC,4BA6DiE4C,EA7DjE,KA8DZE,sBAAoBD,GA9DR,kDAgEZ,EAAKhH,SAAS,CACZqG,UAAU,EACVa,MAAO,KAAIC,aAAaC,SAMP,MAAf,KAAIC,QAAiC,MAAf,KAAIA,QAC5BxC,MAAiB,SAAAC,GACfA,EAAMC,SAAS,MAAf,MACAD,EAAMC,SAAS,QAAS,EAAK7E,OAC7B4E,EAAMC,SAAS,QAAS,EAAK5E,OAC7B0E,KAAsB,8BA7Ed,0DA7GY,yFA2Nd,SAACyC,GAAD,OACZ,EAAKtH,UAAS,gBAAEiG,EAAF,EAAEA,YAAaC,EAAf,EAAeA,SAAf,MAAqC,CACjDA,SAAUoB,EACVrB,aACGA,GAAgBC,IAAYqB,OAAgBrB,KAAcD,GACvDsB,OAAgBD,IAAe,GAC/BrB,SAjOkB,IAGnBuB,EAAStH,EAAMuH,SAAfD,MAEDE,EADUxH,EAAMgE,aAAfrE,MACmB8B,QAAO,SAACwE,GAAD,OAAgBA,EAAKwB,aAEhDxB,EAAOqB,EAAMrB,MAASuB,EAAY/D,QAAU+D,EAAY,GAAGvD,KAC3D+B,GAAWqB,OAAgBC,EAAMtB,UAAYsB,EAAMtB,SAAW,GAR1C,OAU1B,EAAK/F,MAAQ,CACX+G,OAAO,EACPjB,aAAasB,OAAgBrB,IAAa,GAC1CC,OACAD,WACAG,UAAU,EACVD,kBAAcxC,GAhBU,E,4CAoB5B,WAAsB,IArDCgE,EAAD,EAsDbJ,EAASzH,KAAKG,MAAMuH,SAApBD,MACP,OAvDqBI,EAuDEJ,EAAMI,SAvDT,UACtBC,WAAkB,qBAAE5G,KAAe2G,YADb,aACtB,EAA8C3G,K,+BAyD9C,WAAoB,WACXiD,EAAgBnE,KAAKG,MAArBgE,aADW,EAEoBnE,KAAKI,MAApC8F,EAFW,EAEXA,YAAaC,EAFF,EAEEA,SAAUC,EAFZ,EAEYA,KAExBtG,EAAQE,KAAKG,MAAML,MAAM8B,QAAO,SAAAmG,GAAU,OAAIA,EAAWH,aAEzDI,GACJ,QAACC,GAAD,CAAmBC,SAAUlI,KAAKmI,cAAlC,WACE,0BACE,QAACC,GAAD,WAAYzG,OAAE,mBACd,QAAC0G,GAAD,YACE,QAACC,GAAD,CAAoBnC,SAAUA,UAAY,MAC1C,iBACExD,KAAK,OACLE,KAAK,OACLC,aAAanB,OAAE,gBACf4G,aAAa,MACbpH,MAAO+E,EACPnD,SAAU,SAAAR,GAAC,OAAI,EAAKtC,SAAS,CAACiG,aAAahH,OAAQqD,EAAES,OAAO7B,mBAIlE,0BACE,QAACiH,GAAD,WAAYzG,OAAE,WACd,QAAC6G,GAAD,YACE,QAAC,IAAD,CACE3F,KAAK,cACL4F,WAAW,EACXtH,MAAOiF,EACPtD,aAAanB,OAAE,iBACfoB,SAAU,SAAA2F,GAAM,OAAI,EAAKzI,SAAS,CAACmG,KAAMsC,EAAOvH,SAChDc,QAASnC,EAAMuD,KAAI,gBAAEe,EAAF,EAAEA,KAAF,MAAa,CAC9BmB,MAAO,IAAF,OAAMnB,GACXjD,MAAOiD,SAGX,QAAC,IAAD,CAASuE,OAAOhH,OAAE,iBAAlB,UACE,QAAC,KAAD,CACEiH,YAAU,EACV3F,eAAa,cACbN,KAAK,SACLkG,MAAM,QAAC,KAAD,CAASC,WAAS,IACxBxG,QAAS,kBACPyG,yBAAoB,CAClB5E,eACA6E,QAAS,gBAAE5E,EAAF,EAAEA,KAAF,OAAY,EAAKnE,SAAS,CAACmG,KAAMhC,mBAOtD,yBACE,QAAC,KAAD,CACEnB,eAAa,iBACbgG,SAAS,UACTC,UAAWlJ,KAAKmJ,cAHlB,UAKGxH,OAAE,yBAMX,OACE,QAAC,WAAD,YACE,QAAC,IAAD,CAAa0D,aAAW,EAAxB,UAA0B1D,OAAE,8BAC3BqG,O,yBAKP,WAAoB,QACoBhI,KAAKI,MAApC8F,EADW,EACXA,YAAaE,EADF,EACEA,KAAME,EADR,EACQA,SADR,EAE2BtG,KAAKI,MAAMiG,cAAgB,GAAjE3C,EAFW,EAEXA,uBAAwBrC,EAFb,EAEaA,WAE/B,OACGiF,GACDF,GACgB,KAAhBF,KACExC,IAA0BrC,SAA3B,UAA2BA,EAAY+H,aAAvC,aAA2B,OAAA/H,GAAoB,SAAAL,GAAS,OAAIA,EAAUG,a,gDAuF3E,SACEwF,EACA0C,EACA3F,EACAmD,GACA,IAGIJ,EAAsB,CACxB6C,SAAU,kCACVC,UAAW,kCACXC,gBALqBxJ,KAAKG,MAArBgE,aAKyBjD,GAC9BuI,WAAY9C,EAAYzF,GACxBwI,UAAWL,EACP,UACA3F,EACA,SACA,gBAGSG,IAAXgD,IACFJ,EAAO,SAAIA,GAAP,IAAakD,eAAgB9C,MAGnC+C,QAAoBnD,K,oBAYtB,WAAS,aACmBzG,KAAKI,MAAxB+F,EADA,EACAA,SAAUgB,EADV,EACUA,MAEjB,OACE,QAAC,WAAD,WACGA,IAAS,QAAC,IAAD,CAAOxE,KAAK,QAAZ,SAAqBwE,KAE/B,eAAKlE,eAAa,kBAAlB,WACE,QAAC,IAAD,CAAaoC,aAAW,EAAxB,UAA0B1D,OAAE,2BAC5B,QAACkI,GAAD,WACGlI,OAAE,sOAML,QAAC,IAAD,CAAa0D,aAAW,EAAxB,UAA0B1D,OAAE,wBAC5B,QAAC,IAAD,CACEwE,SAAUA,EACV2D,gBAAiB9J,KAAK8J,gBACtBC,YAAa/J,KAAK+J,YAClBC,WAAS,KAEX,QAAC,GAAD,CACEjH,SAAU,SAAAkH,GACR,EAAKhK,SAAS,CAACoG,aAAc4D,OAGhCjK,KAAKkK,8B,GAjQYC,aAAtBpE,G,4BAwQN,UAAeqE,QAAQC,iBAAW5E,QAAiB6E,OAAUvE,OAG7D,IAAMkC,IAAoB,OAAO,OAAP,sBAAH,wEAGTvC,OAAM,GAHG,6BAKVA,OAAM,GALI,yDAOP,SAAA6E,GAAC,OAAIA,EAAEC,MAAMC,aAPN,KAUjBrC,IAAY,OAAO,MAAP,sBAAH,cACA,SAAAmC,GAAC,OAAIA,EAAEC,MAAME,qBADb,mBAEIhF,OAAM,GAFV,KAKT4C,IAAqB,OAAOqC,IAAP,sBAAH,iBACNjF,OAAM,GADA,KAIlB2C,IAAmB,OAAO,MAAP,uBACrB,SAAAkC,GAAC,OAAIK,OAAYL,KADC,uEAOJ,SAAAA,GAAC,OAAIA,EAAEC,MAAMC,aAPT,gCAchBjC,IAAkB,OAAO,MAAP,sBAAH,iGAMfqB,IAAW,OAAO,IAAP,sBAAH,UACH,SAAAU,GAAC,OAAIA,EAAEC,MAAMK,UADV,qBCxWRC,GAAa,kBACjB,QAACC,GAAD,WACE,eAAKC,UAAU,YAAf,UACE,QAACC,GAAD,YACE,QAAC,IAAD,CAAetC,MAAM,YACrB,QAAC,GAAD,YALFmC,G,yBAWN,IAAMC,IAAY,OAAO,MAAP,qBAAH,sBAEC,SAAAR,GAAC,OAAIA,EAAEC,MAAMC,aAFd,oBAGK/E,OAAM,GAHX,KAMTuF,IAAU,OAAO,MAAP,qBAAH,eACGvF,OAAM,GADT,KAIb","file":"app_views_projectInstall_newProject_tsx.26df04ae542d70477f61.js","sourcesContent":["// XXX: This is NOT an exhaustive slugify function\n// Only forces lowercase and replaces spaces with hyphens\nexport default function slugify(str: any): string {\n  return typeof str === 'string' ? str.toLowerCase().replace(' ', '-') : '';\n}\n","import * as React from 'react';\nimport createReactClass from 'create-react-class';\nimport Reflux from 'reflux';\n\nimport TeamStore from 'app/stores/teamStore';\nimport {Team} from 'app/types';\nimport getDisplayName from 'app/utils/getDisplayName';\n\ntype InjectedTeamsProps = {\n  teams: Team[];\n};\n\ntype State = {\n  teams: Team[];\n};\n\n/**\n * Higher order component that uses TeamStore and provides a list of teams\n */\nconst withTeams = <P extends InjectedTeamsProps>(\n  WrappedComponent: React.ComponentType<P>\n) =>\n  createReactClass<Omit<P, keyof InjectedTeamsProps>, State>({\n    displayName: `withTeams(${getDisplayName(WrappedComponent)})`,\n    mixins: [Reflux.listenTo(TeamStore, 'onTeamUpdate') as any],\n\n    getInitialState() {\n      return {\n        teams: TeamStore.getAll(),\n      };\n    },\n\n    onTeamUpdate() {\n      this.setState({\n        teams: TeamStore.getAll(),\n      });\n    },\n    render() {\n      return (\n        <WrappedComponent {...(this.props as P)} teams={this.state.teams as Team[]} />\n      );\n    },\n  });\n\nexport default withTeams;\n","import {ReactElement} from 'react';\nimport * as React from 'react';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\nimport isEqual from 'lodash/isEqual';\n\nimport AsyncComponent from 'app/components/asyncComponent';\nimport SelectControl from 'app/components/forms/selectControl';\nimport PageHeading from 'app/components/pageHeading';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\nimport Input from 'app/views/settings/components/forms/controls/input';\nimport RadioGroup from 'app/views/settings/components/forms/controls/radioGroup';\n\nenum MetricValues {\n  ERRORS,\n  USERS,\n}\nenum Actions {\n  ALERT_ON_EVERY_ISSUE,\n  CUSTOMIZED_ALERTS,\n  CREATE_ALERT_LATER,\n}\n\nconst UNIQUE_USER_FREQUENCY_CONDITION =\n  'sentry.rules.conditions.event_frequency.EventUniqueUserFrequencyCondition';\nconst EVENT_FREQUENCY_CONDITION =\n  'sentry.rules.conditions.event_frequency.EventFrequencyCondition';\nconst NOTIFY_EVENT_ACTION = 'sentry.rules.actions.notify_event.NotifyEventAction';\n\nconst METRIC_CONDITION_MAP = {\n  [MetricValues.ERRORS]: EVENT_FREQUENCY_CONDITION,\n  [MetricValues.USERS]: UNIQUE_USER_FREQUENCY_CONDITION,\n} as const;\n\nconst DEFAULT_PLACEHOLDER_VALUE = '10';\n\ntype StateUpdater = (updatedData: RequestDataFragment) => void;\ntype Props = AsyncComponent['props'] & {\n  organization: Organization;\n  onChange: StateUpdater;\n};\n\ntype State = AsyncComponent['state'] & {\n  // TODO(ts): When we have alert conditional types, convert this\n  conditions: any;\n  intervalChoices: [string, string][] | undefined;\n  threshold: string;\n  interval: string;\n  alertSetting: string;\n  metric: MetricValues;\n};\n\ntype RequestDataFragment = {\n  defaultRules: boolean;\n  shouldCreateCustomRule: boolean;\n  name: string;\n  conditions: {interval: string; id: string; value: string}[] | undefined;\n  actions: {id: string}[];\n  actionMatch: string;\n  frequency: number;\n};\n\nfunction getConditionFrom(\n  interval: string,\n  metricValue: MetricValues,\n  threshold: string\n): {interval: string; id: string; value: string} {\n  let condition: string;\n  switch (metricValue) {\n    case MetricValues.ERRORS:\n      condition = EVENT_FREQUENCY_CONDITION;\n      break;\n    case MetricValues.USERS:\n      condition = UNIQUE_USER_FREQUENCY_CONDITION;\n      break;\n    default:\n      throw new RangeError('Supplied metric value is not handled');\n  }\n  return {\n    interval,\n    id: condition,\n    value: threshold,\n  };\n}\n\nfunction unpackConditions(conditions: any[]) {\n  const equalityReducer = (acc, curr) => {\n    if (!acc || !curr || !isEqual(acc, curr)) {\n      return null;\n    }\n    return acc;\n  };\n\n  const intervalChoices = conditions\n    .map(condition => condition.formFields?.interval?.choices)\n    .reduce(equalityReducer);\n  return {intervalChoices, interval: intervalChoices?.[0]?.[0]};\n}\n\nclass IssueAlertOptions extends AsyncComponent<Props, State> {\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      conditions: [],\n      intervalChoices: [],\n      alertSetting: Actions.CREATE_ALERT_LATER.toString(),\n      metric: MetricValues.ERRORS,\n      interval: '',\n      threshold: '',\n    };\n  }\n\n  getAvailableMetricChoices() {\n    return [\n      [MetricValues.ERRORS, t('occurrences of')],\n      [MetricValues.USERS, t('users affected by')],\n    ].filter(valueDescriptionPair => {\n      const [value] = valueDescriptionPair;\n      return this.state.conditions?.some?.(\n        object => object?.id === METRIC_CONDITION_MAP[value]\n      );\n    });\n  }\n\n  getIssueAlertsChoices(\n    hasProperlyLoadedConditions: boolean\n  ): [string, string | ReactElement][] {\n    const options: [string, React.ReactNode][] = [\n      [Actions.CREATE_ALERT_LATER.toString(), t(\"I'll create my own alerts later\")],\n      [Actions.ALERT_ON_EVERY_ISSUE.toString(), t('Alert me on every new issue')],\n    ];\n\n    if (hasProperlyLoadedConditions) {\n      options.push([\n        Actions.CUSTOMIZED_ALERTS.toString(),\n        <CustomizeAlertsGrid\n          key={Actions.CUSTOMIZED_ALERTS}\n          onClick={e => {\n            // XXX(epurkhiser): The `e.preventDefault` here is needed to stop\n            // propegation of the click up to the label, causing it to focus\n            // the radio input and lose focus on the select.\n            e.preventDefault();\n            const alertSetting = Actions.CUSTOMIZED_ALERTS.toString();\n            this.setStateAndUpdateParents({alertSetting});\n          }}\n        >\n          {t('When there are more than')}\n          <InlineInput\n            type=\"number\"\n            min=\"0\"\n            name=\"\"\n            placeholder={DEFAULT_PLACEHOLDER_VALUE}\n            value={this.state.threshold}\n            onChange={threshold =>\n              this.setStateAndUpdateParents({threshold: threshold.target.value})\n            }\n            data-test-id=\"range-input\"\n          />\n          <InlineSelectControl\n            value={this.state.metric}\n            choices={this.getAvailableMetricChoices()}\n            onChange={metric => this.setStateAndUpdateParents({metric: metric.value})}\n            data-test-id=\"metric-select-control\"\n          />\n          {t('a unique error in')}\n          <InlineSelectControl\n            value={this.state.interval}\n            choices={this.state.intervalChoices}\n            onChange={interval =>\n              this.setStateAndUpdateParents({interval: interval.value})\n            }\n            data-test-id=\"interval-select-control\"\n          />\n        </CustomizeAlertsGrid>,\n      ]);\n    }\n    return options.map(([choiceValue, node]) => [\n      choiceValue,\n      <RadioItemWrapper key={choiceValue}>{node}</RadioItemWrapper>,\n    ]);\n  }\n\n  getUpdatedData(): RequestDataFragment {\n    let defaultRules: boolean;\n    let shouldCreateCustomRule: boolean;\n    const alertSetting: Actions = parseInt(this.state.alertSetting, 10);\n    switch (alertSetting) {\n      case Actions.ALERT_ON_EVERY_ISSUE:\n        defaultRules = true;\n        shouldCreateCustomRule = false;\n        break;\n      case Actions.CREATE_ALERT_LATER:\n        defaultRules = false;\n        shouldCreateCustomRule = false;\n        break;\n      case Actions.CUSTOMIZED_ALERTS:\n        defaultRules = false;\n        shouldCreateCustomRule = true;\n        break;\n      default:\n        throw new RangeError('Supplied alert creation action is not handled');\n    }\n\n    return {\n      defaultRules,\n      shouldCreateCustomRule,\n      name: 'Send a notification for new issues',\n      conditions:\n        this.state.interval.length > 0 && this.state.threshold.length > 0\n          ? [\n              getConditionFrom(\n                this.state.interval,\n                this.state.metric,\n                this.state.threshold\n              ),\n            ]\n          : undefined,\n      actions: [{id: NOTIFY_EVENT_ACTION}],\n      actionMatch: 'all',\n      frequency: 5,\n    };\n  }\n\n  setStateAndUpdateParents<K extends keyof State>(\n    state:\n      | ((\n          prevState: Readonly<State>,\n          props: Readonly<Props>\n        ) => Pick<State, K> | State | null)\n      | Pick<State, K>\n      | State\n      | null,\n    callback?: () => void\n  ): void {\n    this.setState(state, () => {\n      callback?.();\n      this.props.onChange(this.getUpdatedData());\n    });\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    return [['conditions', `/projects/${this.props.organization.slug}/rule-conditions/`]];\n  }\n\n  onLoadAllEndpointsSuccess(): void {\n    const conditions = this.state.conditions?.filter?.(object =>\n      Object.values(METRIC_CONDITION_MAP).includes(object?.id)\n    );\n\n    if (!conditions || conditions.length === 0) {\n      this.setStateAndUpdateParents({\n        conditions: undefined,\n      });\n      return;\n    }\n\n    const {intervalChoices, interval} = unpackConditions(conditions);\n    if (!intervalChoices || !interval) {\n      Sentry.withScope(scope => {\n        scope.setExtra('props', this.props);\n        scope.setExtra('state', this.state);\n        Sentry.captureException(\n          new Error('Interval choices or sent from API endpoint is inconsistent or empty')\n        );\n      });\n      this.setStateAndUpdateParents({\n        conditions: undefined,\n      });\n      return;\n    }\n\n    this.setStateAndUpdateParents({\n      conditions,\n      intervalChoices,\n      interval,\n    });\n  }\n\n  renderBody(): React.ReactElement {\n    const issueAlertOptionsChoices = this.getIssueAlertsChoices(\n      this.state.conditions?.length > 0\n    );\n    return (\n      <React.Fragment>\n        <PageHeadingWithTopMargins withMargins>\n          {t('Set your default alert settings')}\n        </PageHeadingWithTopMargins>\n        <RadioGroupWithPadding\n          choices={issueAlertOptionsChoices}\n          label={t('Options for creating an alert')}\n          onChange={alertSetting => this.setStateAndUpdateParents({alertSetting})}\n          value={this.state.alertSetting}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withOrganization(IssueAlertOptions);\n\nconst CustomizeAlertsGrid = styled('div')`\n  display: grid;\n  grid-template-columns: repeat(5, max-content);\n  grid-gap: ${space(1)};\n  align-items: center;\n`;\nconst InlineInput = styled(Input)`\n  width: 80px;\n`;\nconst InlineSelectControl = styled(SelectControl)`\n  width: 160px;\n`;\nconst RadioGroupWithPadding = styled(RadioGroup)`\n  padding: ${space(3)} 0;\n  margin-bottom: 50px;\n  box-shadow: 0 -1px 0 rgba(0, 0, 0, 0.1);\n`;\nconst PageHeadingWithTopMargins = styled(PageHeading)`\n  margin-top: 65px;\n`;\nconst RadioItemWrapper = styled('div')`\n  min-height: 35px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`;\n","import * as React from 'react';\nimport {browserHistory, withRouter, WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\nimport {PlatformIcon} from 'platformicons';\n\nimport {openCreateTeamModal} from 'app/actionCreators/modal';\nimport ProjectActions from 'app/actions/projectActions';\nimport Alert from 'app/components/alert';\nimport Button from 'app/components/button';\nimport SelectControl from 'app/components/forms/selectControl';\nimport PageHeading from 'app/components/pageHeading';\nimport PlatformPicker from 'app/components/platformPicker';\nimport Tooltip from 'app/components/tooltip';\nimport categoryList from 'app/data/platformCategories';\nimport {IconAdd} from 'app/icons';\nimport {t} from 'app/locale';\nimport {inputStyles} from 'app/styles/input';\nimport space from 'app/styles/space';\nimport {Organization, Project, Team} from 'app/types';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\nimport getPlatformName from 'app/utils/getPlatformName';\nimport slugify from 'app/utils/slugify';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\nimport withTeams from 'app/utils/withTeams';\nimport IssueAlertOptions from 'app/views/projectInstall/issueAlertOptions';\n\nconst getCategoryName = (category?: string) =>\n  categoryList.find(({id}) => id === category)?.id;\n\ntype RuleEventData = {\n  eventKey: string;\n  eventName: string;\n  organization_id: string;\n  project_id: string;\n  rule_type: string;\n  custom_rule_id?: string;\n};\n\ntype Props = WithRouterProps & {\n  api: any;\n  organization: Organization;\n  teams: Team[];\n};\n\ntype PlatformName = React.ComponentProps<typeof PlatformIcon>['platform'];\ntype IssueAlertFragment = Parameters<\n  React.ComponentProps<typeof IssueAlertOptions>['onChange']\n>[0];\n\ntype State = {\n  error: boolean;\n  projectName: string;\n  team: string;\n  platform: PlatformName | null;\n  inFlight: boolean;\n  dataFragment: IssueAlertFragment | undefined;\n};\n\nclass CreateProject extends React.Component<Props, State> {\n  constructor(props, context) {\n    super(props, context);\n\n    const {query} = props.location;\n    const {teams} = props.organization;\n    const accessTeams = teams.filter((team: Team) => team.hasAccess);\n\n    const team = query.team || (accessTeams.length && accessTeams[0].slug);\n    const platform = getPlatformName(query.platform) ? query.platform : '';\n\n    this.state = {\n      error: false,\n      projectName: getPlatformName(platform) || '',\n      team,\n      platform,\n      inFlight: false,\n      dataFragment: undefined,\n    };\n  }\n\n  get defaultCategory() {\n    const {query} = this.props.location;\n    return getCategoryName(query.category);\n  }\n\n  renderProjectForm() {\n    const {organization} = this.props;\n    const {projectName, platform, team} = this.state;\n\n    const teams = this.props.teams.filter(filterTeam => filterTeam.hasAccess);\n\n    const createProjectForm = (\n      <CreateProjectForm onSubmit={this.createProject}>\n        <div>\n          <FormLabel>{t('Project name')}</FormLabel>\n          <ProjectNameInput>\n            <StyledPlatformIcon platform={platform ?? ''} />\n            <input\n              type=\"text\"\n              name=\"name\"\n              placeholder={t('Project name')}\n              autoComplete=\"off\"\n              value={projectName}\n              onChange={e => this.setState({projectName: slugify(e.target.value)})}\n            />\n          </ProjectNameInput>\n        </div>\n        <div>\n          <FormLabel>{t('Team')}</FormLabel>\n          <TeamSelectInput>\n            <SelectControl\n              name=\"select-team\"\n              clearable={false}\n              value={team}\n              placeholder={t('Select a Team')}\n              onChange={choice => this.setState({team: choice.value})}\n              options={teams.map(({slug}) => ({\n                label: `#${slug}`,\n                value: slug,\n              }))}\n            />\n            <Tooltip title={t('Create a team')}>\n              <Button\n                borderless\n                data-test-id=\"create-team\"\n                type=\"button\"\n                icon={<IconAdd isCircled />}\n                onClick={() =>\n                  openCreateTeamModal({\n                    organization,\n                    onClose: ({slug}) => this.setState({team: slug}),\n                  })\n                }\n              />\n            </Tooltip>\n          </TeamSelectInput>\n        </div>\n        <div>\n          <Button\n            data-test-id=\"create-project\"\n            priority=\"primary\"\n            disabled={!this.canSubmitForm}\n          >\n            {t('Create Project')}\n          </Button>\n        </div>\n      </CreateProjectForm>\n    );\n\n    return (\n      <React.Fragment>\n        <PageHeading withMargins>{t('Give your project a name')}</PageHeading>\n        {createProjectForm}\n      </React.Fragment>\n    );\n  }\n\n  get canSubmitForm() {\n    const {projectName, team, inFlight} = this.state;\n    const {shouldCreateCustomRule, conditions} = this.state.dataFragment || {};\n\n    return (\n      !inFlight &&\n      team &&\n      projectName !== '' &&\n      (!shouldCreateCustomRule || conditions?.every?.(condition => condition.value))\n    );\n  }\n\n  createProject = async e => {\n    e.preventDefault();\n    const {organization, api} = this.props;\n    const {projectName, platform, team, dataFragment} = this.state;\n    const {slug} = organization;\n    const {\n      shouldCreateCustomRule,\n      name,\n      conditions,\n      actions,\n      actionMatch,\n      frequency,\n      defaultRules,\n    } = dataFragment || {};\n\n    this.setState({inFlight: true});\n\n    if (!projectName) {\n      Sentry.withScope(scope => {\n        scope.setExtra('props', this.props);\n        scope.setExtra('state', this.state);\n        Sentry.captureMessage('No project name');\n      });\n    }\n\n    try {\n      const projectData = await api.requestPromise(`/teams/${slug}/${team}/projects/`, {\n        method: 'POST',\n        data: {\n          name: projectName,\n          platform,\n          default_rules: defaultRules ?? true,\n        },\n      });\n\n      let ruleId: string | undefined;\n      if (shouldCreateCustomRule) {\n        const ruleData = await api.requestPromise(\n          `/projects/${organization.slug}/${projectData.slug}/rules/`,\n          {\n            method: 'POST',\n            data: {\n              name,\n              conditions,\n              actions,\n              actionMatch,\n              frequency,\n            },\n          }\n        );\n        ruleId = ruleData.id;\n      }\n      this.trackIssueAlertOptionSelectedEvent(\n        projectData,\n        defaultRules,\n        shouldCreateCustomRule,\n        ruleId\n      );\n\n      ProjectActions.createSuccess(projectData);\n      const platformKey = platform || 'other';\n      const nextUrl = `/${organization.slug}/${projectData.slug}/getting-started/${platformKey}/`;\n      browserHistory.push(nextUrl);\n    } catch (err) {\n      this.setState({\n        inFlight: false,\n        error: err.responseJSON.detail,\n      });\n\n      // Only log this if the error is something other than:\n      // * The user not having access to create a project, or,\n      // * A project with that slug already exists\n      if (err.status !== 403 && err.status !== 409) {\n        Sentry.withScope(scope => {\n          scope.setExtra('err', err);\n          scope.setExtra('props', this.props);\n          scope.setExtra('state', this.state);\n          Sentry.captureMessage('Project creation failed');\n        });\n      }\n    }\n  };\n\n  trackIssueAlertOptionSelectedEvent(\n    projectData: Project,\n    isDefaultRules: boolean | undefined,\n    shouldCreateCustomRule: boolean | undefined,\n    ruleId: string | undefined\n  ) {\n    const {organization} = this.props;\n\n    let data: RuleEventData = {\n      eventKey: 'new_project.alert_rule_selected',\n      eventName: 'New Project Alert Rule Selected',\n      organization_id: organization.id,\n      project_id: projectData.id,\n      rule_type: isDefaultRules\n        ? 'Default'\n        : shouldCreateCustomRule\n        ? 'Custom'\n        : 'No Rule',\n    };\n\n    if (ruleId !== undefined) {\n      data = {...data, custom_rule_id: ruleId};\n    }\n\n    trackAnalyticsEvent(data);\n  }\n\n  setPlatform = (platformId: PlatformName | null) =>\n    this.setState(({projectName, platform}: State) => ({\n      platform: platformId,\n      projectName:\n        !projectName || (platform && getPlatformName(platform) === projectName)\n          ? getPlatformName(platformId) || ''\n          : projectName,\n    }));\n\n  render() {\n    const {platform, error} = this.state;\n\n    return (\n      <React.Fragment>\n        {error && <Alert type=\"error\">{error}</Alert>}\n\n        <div data-test-id=\"onboarding-info\">\n          <PageHeading withMargins>{t('Create a new Project')}</PageHeading>\n          <HelpText>\n            {t(\n              `Projects allow you to scope error and transaction events to a specific\n               application in your organization. For example, you might have separate\n               projects for your API server and frontend client.`\n            )}\n          </HelpText>\n          <PageHeading withMargins>{t('Choose a platform')}</PageHeading>\n          <PlatformPicker\n            platform={platform}\n            defaultCategory={this.defaultCategory}\n            setPlatform={this.setPlatform}\n            showOther\n          />\n          <IssueAlertOptions\n            onChange={updatedData => {\n              this.setState({dataFragment: updatedData});\n            }}\n          />\n          {this.renderProjectForm()}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withApi(withRouter(withOrganization(withTeams(CreateProject))));\nexport {CreateProject};\n\nconst CreateProjectForm = styled('form')`\n  display: grid;\n  grid-template-columns: 300px 250px max-content;\n  grid-gap: ${space(2)};\n  align-items: end;\n  padding: ${space(3)} 0;\n  box-shadow: 0 -1px 0 rgba(0, 0, 0, 0.1);\n  background: ${p => p.theme.background};\n`;\n\nconst FormLabel = styled('div')`\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  margin-bottom: ${space(1)};\n`;\n\nconst StyledPlatformIcon = styled(PlatformIcon)`\n  margin-right: ${space(1)};\n`;\n\nconst ProjectNameInput = styled('div')`\n  ${p => inputStyles(p)};\n  padding: 5px 10px;\n  display: flex;\n  align-items: center;\n\n  input {\n    background: ${p => p.theme.background};\n    border: 0;\n    outline: 0;\n    flex: 1;\n  }\n`;\n\nconst TeamSelectInput = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr min-content;\n  align-items: center;\n`;\n\nconst HelpText = styled('p')`\n  color: ${p => p.theme.subText};\n  max-width: 760px;\n`;\n","import DocumentTitle from 'react-document-title';\nimport styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport CreateProject from 'app/views/projectInstall/createProject';\n\nconst NewProject = () => (\n  <Container>\n    <div className=\"container\">\n      <Content>\n        <DocumentTitle title=\"Sentry\" />\n        <CreateProject />\n      </Content>\n    </div>\n  </Container>\n);\n\nconst Container = styled('div')`\n  flex: 1;\n  background: ${p => p.theme.background};\n  margin-bottom: -${space(3)}; /* cleans up a bg gap at bottom */\n`;\n\nconst Content = styled('div')`\n  margin-top: ${space(3)};\n`;\n\nexport default NewProject;\n"],"sourceRoot":""}