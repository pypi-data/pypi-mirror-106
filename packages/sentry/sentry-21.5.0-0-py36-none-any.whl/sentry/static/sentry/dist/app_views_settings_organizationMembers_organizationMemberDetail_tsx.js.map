{"version":3,"sources":["webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/views/settings/organizationMembers/inviteMember/roleSelect.tsx","webpack:///./app/views/settings/organizationMembers/organizationMemberDetail.tsx"],"names":["recreateRoute","to","options","lastRootIndex","routeIndex","routes","params","location","stepBack","paths","map","path","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","Label","RoleSelect","this","props","disabled","enforceAllowed","roleList","selectedRole","t","role","desc","name","id","allowed","isDisabled","onClick","setRole","css","color","cursor","value","checked","readOnly","style","flex","padding","noMargin","className","Component","MULTIPLE_ORGS","NOT_ENROLLED","NO_PERMISSION","TWO_FACTOR_REQUIRED","OrganizationMemberDetail","organization","addLoadingMessage","setState","busy","updateMember","api","orgId","slug","memberId","data","state","member","addSuccessMessage","redirectToMemberPage","errorMessage","responseJSON","detail","addErrorMessage","regenerate","resendMemberInvite","team","teams","includes","push","removedTeam","filter","router","user","requests","authenticators","auth","removeAuthenticator","Promise","all","Sentry","require2FA","length","canReset2fa","members","browserHistory","access","inviteLink","invite_link","canEdit","email","canResend","expired","showAuth","pending","Fragment","title","ExtraHeaderText","OverflowWrapper","Details","DetailLabel","href","data-test-id","dateOnly","date","dateCreated","InviteSection","CodeInput","InviteActions","handleInvite","alignRight","flexibleControlStateSize","label","help","showResetButton","getTooltip","message","tct","onConfirm","handle2faReset","priority","roles","selectedTeams","onAddTeam","handleAddTeam","onRemoveTeam","handleRemoveTeam","Footer","handleSave","AsyncView","withOrganization","p","theme","gray300","fontSizeLarge","space","breakpoints","textColor","border","inputStyles"],"mappings":"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","file":"app_views_settings_organizationMembers_organizationMemberDetail_tsx.90f3a3f6f12a55f9da01.js","sourcesContent":["import {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\nimport {RouteWithName} from 'app/views/settings/components/settingsBreadcrumb/types';\n\ntype Options = {\n  routes: RouteWithName[];\n\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n  location?: Location;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(\n  to: string | RouteWithName,\n  options: Options\n): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';\nimport Radio from 'app/components/radio';\nimport {t} from 'app/locale';\nimport {MemberRole} from 'app/types';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\nconst Label = styled('label')`\n  display: flex;\n  flex: 1;\n  align-items: center;\n  margin-bottom: 0;\n`;\n\ntype Props = {\n  enforceAllowed: boolean;\n  disabled: boolean;\n  selectedRole: string;\n  roleList: MemberRole[];\n  setRole: (id: string) => void;\n};\n\nclass RoleSelect extends Component<Props> {\n  render() {\n    const {disabled, enforceAllowed, roleList, selectedRole} = this.props;\n\n    return (\n      <Panel>\n        <PanelHeader>{t('Role')}</PanelHeader>\n\n        <PanelBody>\n          {roleList.map(role => {\n            const {desc, name, id, allowed} = role;\n            const isDisabled = disabled || (enforceAllowed && !allowed);\n            return (\n              <PanelItem\n                key={id}\n                onClick={() => !isDisabled && this.props.setRole(id)}\n                css={!isDisabled ? {} : {color: 'grey', cursor: 'default'}}\n              >\n                <Label>\n                  <Radio id={id} value={name} checked={id === selectedRole} readOnly />\n                  <div style={{flex: 1, padding: '0 16px'}}>\n                    {name}\n                    <TextBlock noMargin>\n                      <div className=\"help-block\">{desc}</div>\n                    </TextBlock>\n                  </div>\n                </Label>\n              </PanelItem>\n            );\n          })}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n\nexport default RoleSelect;\n","import {Fragment} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\n\nimport {removeAuthenticator} from 'app/actionCreators/account';\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'app/actionCreators/indicator';\nimport {resendMemberInvite, updateMember} from 'app/actionCreators/members';\nimport AutoSelectText from 'app/components/autoSelectText';\nimport Button from 'app/components/button';\nimport Confirm from 'app/components/confirm';\nimport DateTime from 'app/components/dateTime';\nimport NotFound from 'app/components/errors/notFound';\nimport ExternalLink from 'app/components/links/externalLink';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';\nimport Tooltip from 'app/components/tooltip';\nimport {t, tct} from 'app/locale';\nimport {inputStyles} from 'app/styles/input';\nimport space from 'app/styles/space';\nimport {Member, Organization, Team} from 'app/types';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport withOrganization from 'app/utils/withOrganization';\nimport AsyncView from 'app/views/asyncView';\nimport Field from 'app/views/settings/components/forms/field';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TeamSelect from 'app/views/settings/components/teamSelect';\n\nimport RoleSelect from './inviteMember/roleSelect';\n\nconst MULTIPLE_ORGS = t('Cannot be reset since user is in more than one organization');\nconst NOT_ENROLLED = t('Not enrolled in two-factor authentication');\nconst NO_PERMISSION = t('You do not have permission to perform this action');\nconst TWO_FACTOR_REQUIRED = t(\n  'Cannot be reset since two-factor is required for this organization'\n);\n\ntype RouteParams = {\n  orgId: string;\n  memberId: string;\n};\n\ntype Props = {\n  organization: Organization;\n} & RouteComponentProps<RouteParams, {}>;\n\ntype State = {\n  roleList: Member['roles'];\n  selectedRole: Member['role'];\n  member: Member | null;\n} & AsyncView['state'];\n\nclass OrganizationMemberDetail extends AsyncView<Props, State> {\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      roleList: [],\n      selectedRole: '',\n      member: null,\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {organization, params} = this.props;\n    return [\n      ['member', `/organizations/${organization.slug}/members/${params.memberId}/`],\n    ];\n  }\n\n  redirectToMemberPage() {\n    const {location, params, routes} = this.props;\n    const members = recreateRoute('members/', {\n      location,\n      routes,\n      params,\n      stepBack: -2,\n    });\n    browserHistory.push(members);\n  }\n\n  handleSave = async () => {\n    const {organization, params} = this.props;\n\n    addLoadingMessage(t('Saving...'));\n    this.setState({busy: true});\n\n    try {\n      await updateMember(this.api, {\n        orgId: organization.slug,\n        memberId: params.memberId,\n        data: this.state.member,\n      });\n      addSuccessMessage(t('Saved'));\n      this.redirectToMemberPage();\n    } catch (resp) {\n      const errorMessage =\n        (resp && resp.responseJSON && resp.responseJSON.detail) || t('Could not save...');\n      addErrorMessage(errorMessage);\n    }\n    this.setState({busy: false});\n  };\n\n  handleInvite = async (regenerate: boolean) => {\n    const {organization, params} = this.props;\n\n    addLoadingMessage(t('Sending invite...'));\n\n    this.setState({busy: true});\n\n    try {\n      const data = await resendMemberInvite(this.api, {\n        orgId: organization.slug,\n        memberId: params.memberId,\n        regenerate,\n      });\n\n      addSuccessMessage(t('Sent invite!'));\n\n      if (regenerate) {\n        this.setState(state => ({member: {...state.member, ...data}}));\n      }\n    } catch (_err) {\n      addErrorMessage(t('Could not send invite'));\n    }\n\n    this.setState({busy: false});\n  };\n\n  handleAddTeam = (team: Team) => {\n    const {member} = this.state;\n    if (!member!.teams.includes(team.slug)) {\n      member!.teams.push(team.slug);\n    }\n    this.setState({member});\n  };\n\n  handleRemoveTeam = (removedTeam: string) => {\n    const {member} = this.state;\n\n    this.setState({\n      member: {\n        ...member!,\n        teams: member!.teams.filter(slug => slug !== removedTeam),\n      },\n    });\n  };\n\n  handle2faReset = async () => {\n    const {organization, router} = this.props;\n    const {user} = this.state.member!;\n\n    const requests = user.authenticators.map(auth =>\n      removeAuthenticator(this.api, user.id, auth.id)\n    );\n\n    try {\n      await Promise.all(requests);\n      router.push(`/settings/${organization.slug}/members/`);\n      addSuccessMessage(t('All authenticators have been removed'));\n    } catch (err) {\n      addErrorMessage(t('Error removing authenticators'));\n      Sentry.captureException(err);\n    }\n  };\n\n  showResetButton = () => {\n    const {organization} = this.props;\n    const {member} = this.state;\n    const {user} = member!;\n\n    if (!user || !user.authenticators || organization.require2FA) {\n      return false;\n    }\n    const hasAuth = user.authenticators.length >= 1;\n    return hasAuth && user.canReset2fa;\n  };\n\n  getTooltip = (): string => {\n    const {organization} = this.props;\n    const {member} = this.state;\n    const {user} = member!;\n\n    if (!user) {\n      return '';\n    }\n\n    if (!user.authenticators) {\n      return NO_PERMISSION;\n    }\n    if (!user.authenticators.length) {\n      return NOT_ENROLLED;\n    }\n    if (!user.canReset2fa) {\n      return MULTIPLE_ORGS;\n    }\n    if (organization.require2FA) {\n      return TWO_FACTOR_REQUIRED;\n    }\n\n    return '';\n  };\n\n  renderBody() {\n    const {organization} = this.props;\n    const {member} = this.state;\n\n    if (!member) {\n      return <NotFound />;\n    }\n\n    const {access} = organization;\n    const inviteLink = member.invite_link;\n    const canEdit = access.includes('org:write');\n\n    const {email, expired, pending} = member;\n    const canResend = !expired;\n    const showAuth = !pending;\n\n    return (\n      <Fragment>\n        <SettingsPageHeader\n          title={\n            <Fragment>\n              <div>{member.name}</div>\n              <ExtraHeaderText>{t('Member Settings')}</ExtraHeaderText>\n            </Fragment>\n          }\n        />\n\n        <Panel>\n          <PanelHeader>{t('Basics')}</PanelHeader>\n\n          <PanelBody>\n            <PanelItem>\n              <OverflowWrapper>\n                <Details>\n                  <div>\n                    <DetailLabel>{t('Email')}</DetailLabel>\n                    <div>\n                      <ExternalLink href={`mailto:${email}`}>{email}</ExternalLink>\n                    </div>\n                  </div>\n                  <div>\n                    <DetailLabel>{t('Status')}</DetailLabel>\n                    <div data-test-id=\"member-status\">\n                      {member.expired ? (\n                        <em>{t('Invitation Expired')}</em>\n                      ) : member.pending ? (\n                        <em>{t('Invitation Pending')}</em>\n                      ) : (\n                        t('Active')\n                      )}\n                    </div>\n                  </div>\n                  <div>\n                    <DetailLabel>{t('Added')}</DetailLabel>\n                    <div>\n                      <DateTime dateOnly date={member.dateCreated} />\n                    </div>\n                  </div>\n                </Details>\n\n                {inviteLink && (\n                  <InviteSection>\n                    <div>\n                      <DetailLabel>{t('Invite Link')}</DetailLabel>\n                      <AutoSelectText>\n                        <CodeInput>{inviteLink}</CodeInput>\n                      </AutoSelectText>\n                      <p className=\"help-block\">\n                        {t('This unique invite link may only be used by this member.')}\n                      </p>\n                    </div>\n                    <InviteActions>\n                      <Button onClick={() => this.handleInvite(true)}>\n                        {t('Generate New Invite')}\n                      </Button>\n                      {canResend && (\n                        <Button\n                          data-test-id=\"resend-invite\"\n                          onClick={() => this.handleInvite(false)}\n                        >\n                          {t('Resend Invite')}\n                        </Button>\n                      )}\n                    </InviteActions>\n                  </InviteSection>\n                )}\n              </OverflowWrapper>\n            </PanelItem>\n          </PanelBody>\n        </Panel>\n\n        {showAuth && (\n          <Panel>\n            <PanelHeader>{t('Authentication')}</PanelHeader>\n            <PanelBody>\n              <Field\n                alignRight\n                flexibleControlStateSize\n                label={t('Reset two-factor authentication')}\n                help={t(\n                  'Resetting two-factor authentication will remove all two-factor authentication methods for this member.'\n                )}\n              >\n                <Tooltip\n                  data-test-id=\"reset-2fa-tooltip\"\n                  disabled={this.showResetButton()}\n                  title={this.getTooltip()}\n                >\n                  <Confirm\n                    disabled={!this.showResetButton()}\n                    message={tct(\n                      'Are you sure you want to disable all two-factor authentication methods for [name]?',\n                      {name: member.name ? member.name : 'this member'}\n                    )}\n                    onConfirm={this.handle2faReset}\n                    data-test-id=\"reset-2fa-confirm\"\n                  >\n                    <Button data-test-id=\"reset-2fa\" priority=\"danger\">\n                      {t('Reset two-factor authentication')}\n                    </Button>\n                  </Confirm>\n                </Tooltip>\n              </Field>\n            </PanelBody>\n          </Panel>\n        )}\n\n        <RoleSelect\n          enforceAllowed={false}\n          disabled={!canEdit}\n          roleList={member.roles}\n          selectedRole={member.role}\n          setRole={slug => this.setState({member: {...member, role: slug}})}\n        />\n\n        <TeamSelect\n          organization={organization}\n          selectedTeams={member.teams}\n          disabled={!canEdit}\n          onAddTeam={this.handleAddTeam}\n          onRemoveTeam={this.handleRemoveTeam}\n        />\n\n        <Footer>\n          <Button\n            priority=\"primary\"\n            busy={this.state.busy}\n            onClick={this.handleSave}\n            disabled={!canEdit}\n          >\n            {t('Save Member')}\n          </Button>\n        </Footer>\n      </Fragment>\n    );\n  }\n}\n\nexport default withOrganization(OrganizationMemberDetail);\n\nconst ExtraHeaderText = styled('div')`\n  color: ${p => p.theme.gray300};\n  font-weight: normal;\n  font-size: ${p => p.theme.fontSizeLarge};\n`;\n\nconst Details = styled('div')`\n  display: grid;\n  grid-auto-flow: column;\n  grid-template-columns: 2fr 1fr 1fr;\n  grid-gap: ${space(2)};\n  width: 100%;\n\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    grid-auto-flow: row;\n    grid-template-columns: auto;\n  }\n`;\n\nconst DetailLabel = styled('div')`\n  font-weight: bold;\n  margin-bottom: ${space(0.5)};\n  color: ${p => p.theme.textColor};\n`;\n\nconst OverflowWrapper = styled('div')`\n  overflow: hidden;\n  flex: 1;\n`;\n\nconst InviteSection = styled('div')`\n  border-top: 1px solid ${p => p.theme.border};\n  margin-top: ${space(2)};\n  padding-top: ${space(2)};\n`;\n\nconst CodeInput = styled('code')`\n  ${p => inputStyles(p)}; /* Have to do this for typescript :( */\n`;\n\nconst InviteActions = styled('div')`\n  display: grid;\n  grid-gap: ${space(1)};\n  grid-auto-flow: column;\n  justify-content: flex-end;\n  margin-top: ${space(2)};\n`;\n\nconst Footer = styled('div')`\n  display: flex;\n  justify-content: flex-end;\n`;\n"],"sourceRoot":""}