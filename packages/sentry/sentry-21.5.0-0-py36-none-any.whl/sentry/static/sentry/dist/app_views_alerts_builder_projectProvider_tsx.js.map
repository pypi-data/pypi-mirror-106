{"version":3,"sources":["webpack:///./app/views/alerts/builder/projectProvider.tsx"],"names":["AlertBuilderProjectProvider","props","children","params","organization","api","other","projectId","orgId","slug","slugs","projects","initiallyLoaded","isIncomplete","type","t","project","fetchOrgMembers","id","React","withApi"],"mappings":"yzDAuBA,SAASA,EAA4BC,GAAc,IAC1CC,EAAiDD,EAAjDC,SAAUC,EAAuCF,EAAvCE,OAAQC,EAA+BH,EAA/BG,aAAcC,EAAiBJ,EAAjBI,IAAQC,GADE,OACOL,EADP,4CAE1CM,EAAaJ,EAAbI,UACP,OACE,QAAC,IAAD,CAAUC,MAAOJ,EAAaK,KAAMC,MAAO,CAACH,GAA5C,SACG,YAA+C,IAA7CI,EAA6C,EAA7CA,SAAUC,EAAmC,EAAnCA,gBAAiBC,EAAkB,EAAlBA,aAC5B,IAAKD,EACH,OAAO,QAAC,IAAD,IAGT,GAAIC,EACF,OACE,QAAC,IAAD,CAAOC,KAAK,UAAZ,UACGC,OAAE,qDAIT,IAAMC,EAAUL,EAAS,GAKzB,OAFAM,QAAgBZ,EAAKD,EAAaK,KAAM,CAACO,EAAQE,MAG/C,QAAC,WAAD,UACGhB,GAAYiB,iBAAqBjB,GAC9BiB,eAAmBjB,EAAnB,SACKI,GACAJ,EAASD,OAFd,IAGEe,UACAZ,kBAEFF,OA/BPF,E,0CAuCT,SAAeoB,OAAQpB","file":"app_views_alerts_builder_projectProvider_tsx.87517177c9f9cbd91e70.js","sourcesContent":["import * as React from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {fetchOrgMembers} from 'app/actionCreators/members';\nimport {Client} from 'app/api';\nimport Alert from 'app/components/alert';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {t} from 'app/locale';\nimport {Organization, Project} from 'app/types';\nimport Projects from 'app/utils/projects';\nimport withApi from 'app/utils/withApi';\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  organization: Organization;\n  api: Client;\n  children?: React.ReactNode;\n  hasMetricAlerts: boolean;\n};\n\ntype RouteParams = {\n  projectId: string;\n};\n\nfunction AlertBuilderProjectProvider(props: Props) {\n  const {children, params, organization, api, ...other} = props;\n  const {projectId} = params;\n  return (\n    <Projects orgId={organization.slug} slugs={[projectId]}>\n      {({projects, initiallyLoaded, isIncomplete}) => {\n        if (!initiallyLoaded) {\n          return <LoadingIndicator />;\n        }\n        // if loaded, but project fetching states incomplete, project doesn't exist\n        if (isIncomplete) {\n          return (\n            <Alert type=\"warning\">\n              {t('The project you were looking for was not found.')}\n            </Alert>\n          );\n        }\n        const project = projects[0] as Project;\n\n        // fetch members list for mail action fields\n        fetchOrgMembers(api, organization.slug, [project.id]);\n\n        return (\n          <React.Fragment>\n            {children && React.isValidElement(children)\n              ? React.cloneElement(children, {\n                  ...other,\n                  ...children.props,\n                  project,\n                  organization,\n                })\n              : children}\n          </React.Fragment>\n        );\n      }}\n    </Projects>\n  );\n}\n\nexport default withApi(AlertBuilderProjectProvider);\n"],"sourceRoot":""}