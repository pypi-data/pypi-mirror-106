{"version":3,"sources":["webpack:///./app/views/settings/components/settingsNavItem.tsx","webpack:///./app/views/settings/components/settingsNavigationGroup.tsx","webpack:///./app/views/settings/components/settingsNavigation.tsx"],"names":["SettingsNavItem","badge","label","index","id","props","LabelHook","HookOrDefault","hookName","defaultComponent","children","renderedBadge","type","title","t","position","SyledBadge","text","StyledNavItem","onlyActiveOnIndex","activeClassName","Link","p","theme","gray300","textColor","active","backgroundSecondary","Badge","fontSizeExtraSmall","space","SettingsNavigationGroup","organization","project","name","items","NavSection","data-test-id","SettingsHeading","map","path","show","recordAnalytics","badgeResult","to","replaceRouterParams","orgId","slug","projectId","onClick","window","location","pathname","trackAnalyticsEvent","organization_id","project_id","eventName","eventKey","sidebar_item_id","dest","subText","SettingsNavigation","error","errorInfo","Sentry","scope","Object","keys","forEach","key","setExtra","href","this","navigationObjects","hooks","hookConfigs","stickyTop","otherProps","navWithHooks","concat","PositionStickyWrapper","config","Hook","i","React","breakpoints"],"mappings":"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","file":"app_views_settings_components_settingsNavigation_tsx.e26a034a8ba0847dae5f.js","sourcesContent":["import * as React from 'react';\nimport {Link} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport Badge from 'app/components/badge';\nimport FeatureBadge from 'app/components/featureBadge';\nimport HookOrDefault from 'app/components/hookOrDefault';\nimport Tooltip from 'app/components/tooltip';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\n\ntype Props = {\n  to: React.ComponentProps<Link>['to'];\n  label: React.ReactNode;\n  badge?: string | number | null;\n  index?: boolean;\n  id?: string;\n  onClick?: (e: React.MouseEvent) => void;\n};\n\nconst SettingsNavItem = ({badge, label, index, id, ...props}: Props) => {\n  const LabelHook = HookOrDefault({\n    hookName: 'sidebar:item-label',\n    defaultComponent: ({children}) => <React.Fragment>{children}</React.Fragment>,\n  });\n\n  const renderedBadge =\n    badge === 'new' ? (\n      <FeatureBadge type=\"new\" />\n    ) : badge === 'warning' ? (\n      <Tooltip title={t('This settings needs review')} position=\"right\">\n        <SyledBadge text={badge} type=\"warning\" />\n      </Tooltip>\n    ) : (\n      <SyledBadge text={badge} />\n    );\n\n  return (\n    <StyledNavItem onlyActiveOnIndex={index} activeClassName=\"active\" {...props}>\n      <LabelHook id={id}>{label}</LabelHook>\n      {badge ? renderedBadge : null}\n    </StyledNavItem>\n  );\n};\n\nconst StyledNavItem = styled(Link)`\n  display: block;\n  color: ${p => p.theme.gray300};\n  font-size: 14px;\n  line-height: 30px;\n  position: relative;\n\n  &.active {\n    color: ${p => p.theme.textColor};\n\n    &:before {\n      background: ${p => p.theme.active};\n    }\n  }\n\n  &:hover,\n  &:focus,\n  &:active {\n    color: ${p => p.theme.textColor};\n    outline: none;\n  }\n\n  &.focus-visible {\n    outline: none;\n    background: ${p => p.theme.backgroundSecondary};\n    padding-left: 15px;\n    margin-left: -15px;\n    border-radius: 3px;\n\n    &:before {\n      left: -15px;\n    }\n  }\n\n  &:before {\n    position: absolute;\n    content: '';\n    display: block;\n    top: 4px;\n    left: -30px;\n    height: 20px;\n    width: 4px;\n    background: transparent;\n    border-radius: 0 2px 2px 0;\n  }\n`;\n\nconst SyledBadge = styled(Badge)`\n  font-weight: 400;\n  height: auto;\n  line-height: 1;\n  font-size: ${p => p.theme.fontSizeExtraSmall};\n  padding: 3px ${space(0.75)};\n`;\n\nexport default SettingsNavItem;\n","import styled from '@emotion/styled';\n\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\nimport SettingsNavItem from 'app/views/settings/components/settingsNavItem';\nimport {NavigationGroupProps} from 'app/views/settings/types';\n\nconst SettingsNavigationGroup = (props: NavigationGroupProps) => {\n  const {organization, project, name, items} = props;\n\n  return (\n    <NavSection data-test-id={name}>\n      <SettingsHeading>{name}</SettingsHeading>\n      {items.map(({path, title, index, show, badge, id, recordAnalytics}) => {\n        if (typeof show === 'function' && !show(props)) {\n          return null;\n        }\n        if (typeof show !== 'undefined' && !show) {\n          return null;\n        }\n        const badgeResult = typeof badge === 'function' ? badge(props) : null;\n        const to = replaceRouterParams(path, {\n          ...(organization ? {orgId: organization.slug} : {}),\n          ...(project ? {projectId: project.slug} : {}),\n        });\n\n        const handleClick = () => {\n          //only call the analytics event if the URL is changing\n          if (recordAnalytics && to !== window.location.pathname) {\n            trackAnalyticsEvent({\n              organization_id: organization ? organization.id : null,\n              project_id: project && project.id,\n              eventName: 'Sidebar Item Clicked',\n              eventKey: 'sidebar.item_clicked',\n              sidebar_item_id: id,\n              dest: path,\n            });\n          }\n        };\n\n        return (\n          <SettingsNavItem\n            key={title}\n            to={to}\n            label={title}\n            index={index}\n            badge={badgeResult}\n            id={id}\n            onClick={handleClick}\n          />\n        );\n      })}\n    </NavSection>\n  );\n};\n\nconst NavSection = styled('div')`\n  margin-bottom: 20px;\n`;\n\nconst SettingsHeading = styled('div')`\n  color: ${p => p.theme.subText};\n  font-size: 12px;\n  font-weight: 600;\n  text-transform: uppercase;\n  margin-bottom: 20px;\n`;\n\nexport default SettingsNavigationGroup;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\n\nimport space from 'app/styles/space';\nimport SettingsNavigationGroup from 'app/views/settings/components/settingsNavigationGroup';\nimport {NavigationProps, NavigationSection} from 'app/views/settings/types';\n\ntype DefaultProps = {\n  /**\n   * Additional navigation configuration driven by hooks\n   */\n  hookConfigs: NavigationSection[];\n  /**\n   * Additional navigation elements driven from hooks\n   */\n  hooks: React.ReactElement[];\n  /**\n   * How far from the top of the page should the navigation be when stickied.\n   */\n  stickyTop: string;\n};\n\ntype Props = DefaultProps &\n  NavigationProps & {\n    /**\n     * The configuration for this navigation panel\n     */\n    navigationObjects: NavigationSection[];\n  };\n\nclass SettingsNavigation extends React.Component<Props> {\n  static defaultProps: DefaultProps = {\n    hooks: [],\n    hookConfigs: [],\n    stickyTop: '69px',\n  };\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    Sentry.withScope(scope => {\n      Object.keys(errorInfo).forEach(key => {\n        scope.setExtra(key, errorInfo[key]);\n      });\n      scope.setExtra('url', window.location.href);\n      Sentry.captureException(error);\n    });\n  }\n\n  render() {\n    const {navigationObjects, hooks, hookConfigs, stickyTop, ...otherProps} = this.props;\n    const navWithHooks = navigationObjects.concat(hookConfigs);\n\n    return (\n      <PositionStickyWrapper stickyTop={stickyTop}>\n        {navWithHooks.map(config => (\n          <SettingsNavigationGroup key={config.name} {...otherProps} {...config} />\n        ))}\n        {hooks.map((Hook, i) => React.cloneElement(Hook, {key: `hook-${i}`}))}\n      </PositionStickyWrapper>\n    );\n  }\n}\n\nconst PositionStickyWrapper = styled('div')<{stickyTop: string}>`\n  padding: ${space(4)};\n  padding-right: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    position: sticky;\n    top: ${p => p.stickyTop};\n    overflow: scroll;\n    -ms-overflow-style: none;\n    scrollbar-width: none;\n\n    &::-webkit-scrollbar {\n      display: none;\n    }\n  }\n`;\n\nexport default SettingsNavigation;\n"],"sourceRoot":""}