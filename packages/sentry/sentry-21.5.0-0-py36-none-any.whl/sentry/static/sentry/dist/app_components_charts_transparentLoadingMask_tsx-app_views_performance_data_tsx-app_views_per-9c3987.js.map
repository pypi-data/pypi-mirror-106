{"version":3,"sources":["webpack:///./app/components/charts/transparentLoadingMask.tsx","webpack:///./app/views/performance/data.tsx","webpack:///./app/views/performance/landing/utils.tsx","webpack:///./app/views/performance/utils.tsx","webpack:///./app/views/performance/vitalDetail/utils.tsx"],"names":["className","visible","children","props","other","p","PERFORMANCE_TERM","DEFAULT_STATS_PERIOD","COLUMN_TITLES","getAxisOptions","organization","tooltip","getTermHelp","APDEX","value","apdexThreshold","label","t","TPM","FAILURE_RATE","P50","P95","P99","getFrontendAxisOptions","LCP","field","isLeftDefault","DURATION_DISTRIBUTION","isDistribution","isRightDefault","getFrontendOtherAxisOptions","P75","getBackendAxisOptions","PERFORMANCE_TERMS","apdex","tpm","throughput","failureRate","p50","p75","p95","p99","lcp","userMisery","statusBreakdown","durationDistribution","term","hasOwnProperty","generateGenericPerformanceEventView","location","query","hasStartAndEnd","start","end","savedQuery","id","undefined","name","projects","fields","version","widths","Array","length","fill","COL_WIDTH_UNDEFINED","statsPeriod","range","orderby","decodeScalar","sort","searchQuery","conditions","tokenizeSearch","hasTag","setTagValues","join","stringifyQueryObject","eventView","EventView","additionalConditions","addTagValues","generateBackendPerformanceEventView","generateFrontendPageloadPerformanceEventView","generateFrontendOtherPerformanceEventView","generatePerformanceEventView","isTrends","display","getCurrentLandingDisplay","LandingDisplayField","generatePerformanceVitalDetailView","_organization","vitalName","vitalNameFromLocation","getVitalDetailTablePoorStatusFunction","getVitalDetailTableMehStatusFunction","LEFT_AXIS_QUERY_KEY","RIGHT_AXIS_QUERY_KEY","LANDING_DISPLAYS","ALL","FRONTEND_PAGELOAD","FRONTEND_OTHER","BACKEND","landingField","landingDisplay","find","defaultDisplayField","getDefaultDisplayFieldForPlatform","getBackendFunction","functionName","kind","function","Error","projectIds","project","PROJECT_PERFORMANCE_TYPE","platformToPerformanceType","backendCardDetails","title","formatter","getDuration","formatAbbreviatedNumber","failure_rate","formatPercentage","formatFloat","getDisplayAxes","options","leftDefault","opt","rightDefault","leftAxis","rightAxis","FRONTEND_PLATFORMS","frontend","BACKEND_PLATFORMS","backend","ALL_ACCESS_PROJECTS","ANY","selectedProjects","filter","includes","parseInt","some","platform","every","FRONTEND","platformAndConditionsToPerformanceType","performanceType","getTagValues","op","isSummaryViewFrontendPageLoad","getPerformanceLandingUrl","slug","getPerformanceTrendsUrl","getTransactionSearchQuery","trim","getTransactionDetailsUrl","eventSlug","transaction","pathname","getTransactionComparisonUrl","baselineEventSlug","regressionEventSlug","addRoutePerformanceContext","selection","getCurrentSentryReactTransaction","days","statsPeriodToDays","datetime","period","seconds","Math","floor","setTag","toString","groupedPeriod","oneDay","getTransactionName","PerformanceDuration","normalizedSeconds","defined","milliseconds","hasMilliseconds","abbreviation","fixedDigits","VitalState","webVitalPoor","WebVital","webVitalMeh","vitalStateColors","POOR","MEH","GOOD","vitalStateIcons","color","isCircled","vitalDetailRouteWithQuery","orgSlug","projectID","environment","_vitalName","Object","values","v","vitalThreshold","getAggregateAlias","vitalMap","vitalDescription","vitalAbbreviations","getMaxOfSeries","series","max","data","point"],"mappings":"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","file":"app_components_charts_transparentLoadingMask_tsx-app_views_performance_data_tsx-app_views_per-9c3987.864eab61be1b543dac91.js","sourcesContent":["import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport LoadingMask from 'app/components/loadingMask';\n\ntype Props = {\n  visible: boolean;\n  className?: string;\n  children?: React.ReactNode;\n} & React.ComponentProps<typeof LoadingMask>;\n\nconst TransparentLoadingMask = styled(\n  ({className, visible, children, ...props}: Props) => {\n    const other = visible ? {...props, 'data-test-id': 'loading-placeholder'} : props;\n    return (\n      <LoadingMask className={className} {...other}>\n        {children}\n      </LoadingMask>\n    );\n  }\n)<Props>`\n  ${p => !p.visible && 'display: none;'};\n  opacity: 0.4;\n  z-index: 1;\n`;\n\nexport default TransparentLoadingMask;\n","import {Location} from 'history';\n\nimport {COL_WIDTH_UNDEFINED} from 'app/components/gridEditable';\nimport {t} from 'app/locale';\nimport {LightWeightOrganization, NewQuery, SelectValue} from 'app/types';\nimport EventView from 'app/utils/discover/eventView';\nimport {decodeScalar} from 'app/utils/queryString';\nimport {stringifyQueryObject, tokenizeSearch} from 'app/utils/tokenizeSearch';\n\nimport {getCurrentLandingDisplay, LandingDisplayField} from './landing/utils';\nimport {\n  getVitalDetailTableMehStatusFunction,\n  getVitalDetailTablePoorStatusFunction,\n  vitalNameFromLocation,\n} from './vitalDetail/utils';\n\nexport const DEFAULT_STATS_PERIOD = '24h';\n\nexport const COLUMN_TITLES = [\n  'transaction',\n  'project',\n  'tpm',\n  'p50',\n  'p95',\n  'failure rate',\n  'apdex',\n  'users',\n  'user misery',\n];\n\nexport enum PERFORMANCE_TERM {\n  APDEX = 'apdex',\n  TPM = 'tpm',\n  THROUGHPUT = 'throughput',\n  FAILURE_RATE = 'failureRate',\n  P50 = 'p50',\n  P75 = 'p75',\n  P95 = 'p95',\n  P99 = 'p99',\n  LCP = 'lcp',\n  USER_MISERY = 'userMisery',\n  STATUS_BREAKDOWN = 'statusBreakdown',\n  DURATION_DISTRIBUTION = 'durationDistribution',\n}\n\nexport type TooltipOption = SelectValue<string> & {\n  tooltip: string;\n};\n\nexport function getAxisOptions(organization: LightWeightOrganization): TooltipOption[] {\n  return [\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.APDEX),\n      value: `apdex(${organization.apdexThreshold})`,\n      label: t('Apdex'),\n    },\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.TPM),\n      value: 'tpm()',\n      label: t('Transactions Per Minute'),\n    },\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.FAILURE_RATE),\n      value: 'failure_rate()',\n      label: t('Failure Rate'),\n    },\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.P50),\n      value: 'p50()',\n      label: t('p50 Duration'),\n    },\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.P95),\n      value: 'p95()',\n      label: t('p95 Duration'),\n    },\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.P99),\n      value: 'p99()',\n      label: t('p99 Duration'),\n    },\n  ];\n}\n\nexport type AxisOption = TooltipOption & {\n  field: string;\n  label: string;\n  isDistribution?: boolean;\n  isLeftDefault?: boolean;\n  isRightDefault?: boolean;\n};\n\nexport function getFrontendAxisOptions(\n  organization: LightWeightOrganization\n): AxisOption[] {\n  return [\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.LCP),\n      value: `p75(lcp)`,\n      label: t('LCP p75'),\n      field: 'p75(measurements.lcp)',\n      isLeftDefault: true,\n    },\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.DURATION_DISTRIBUTION),\n      value: 'lcp_distribution',\n      label: t('LCP Distribution'),\n      field: 'measurements.lcp',\n      isDistribution: true,\n      isRightDefault: true,\n    },\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.TPM),\n      value: 'tpm()',\n      label: t('Transactions Per Minute'),\n      field: 'tpm()',\n    },\n  ];\n}\n\nexport function getFrontendOtherAxisOptions(\n  organization: LightWeightOrganization\n): AxisOption[] {\n  return [\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.P50),\n      value: `p50()`,\n      label: t('Duration p50'),\n      field: 'p50(transaction.duration)',\n    },\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.P75),\n      value: `p75()`,\n      label: t('Duration p75'),\n      field: 'p75(transaction.duration)',\n      isLeftDefault: true,\n    },\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.P95),\n      value: `p95()`,\n      label: t('Duration p95'),\n      field: 'p95(transaction.duration)',\n    },\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.DURATION_DISTRIBUTION),\n      value: 'duration_distribution',\n      label: t('Duration Distribution'),\n      field: 'transaction.duration',\n      isDistribution: true,\n      isRightDefault: true,\n    },\n  ];\n}\n\nexport function getBackendAxisOptions(\n  organization: LightWeightOrganization\n): AxisOption[] {\n  return [\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.P50),\n      value: `p50()`,\n      label: t('Duration p50'),\n      field: 'p50(transaction.duration)',\n    },\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.P75),\n      value: `p75()`,\n      label: t('Duration p75'),\n      field: 'p75(transaction.duration)',\n      isLeftDefault: true,\n    },\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.P95),\n      value: `p95()`,\n      label: t('Duration p95'),\n      field: 'p95(transaction.duration)',\n    },\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.P99),\n      value: `p99()`,\n      label: t('Duration p99'),\n      field: 'p99(transaction.duration)',\n    },\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.APDEX),\n      value: `apdex(${organization.apdexThreshold})`,\n      label: t('Apdex'),\n      field: `apdex(${organization.apdexThreshold})`,\n    },\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.TPM),\n      value: 'tpm()',\n      label: t('Transactions Per Minute'),\n      field: 'tpm()',\n    },\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.FAILURE_RATE),\n      value: 'failure_rate()',\n      label: t('Failure Rate'),\n      field: 'failure_rate()',\n    },\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.DURATION_DISTRIBUTION),\n      value: 'duration_distribution',\n      label: t('Duration Distribution'),\n      field: 'transaction.duration',\n      isDistribution: true,\n      isRightDefault: true,\n    },\n  ];\n}\n\ntype TermFormatter = (organization: LightWeightOrganization) => string;\n\nconst PERFORMANCE_TERMS: Record<PERFORMANCE_TERM, TermFormatter> = {\n  apdex: () =>\n    t(\n      'Apdex is the ratio of both satisfactory and tolerable response times to all response times. To adjust the tolerable threshold, go to performance settings.'\n    ),\n  tpm: () => t('TPM is the number of recorded transaction events per minute.'),\n  throughput: () =>\n    t('Throughput is the number of recorded transaction events per minute.'),\n  failureRate: () =>\n    t(\n      'Failure rate is the percentage of recorded transactions that had a known and unsuccessful status.'\n    ),\n  p50: () => t('p50 indicates the duration that 50% of transactions are faster than.'),\n  p75: () => t('p75 indicates the duration that 75% of transactions are faster than.'),\n  p95: () => t('p95 indicates the duration that 95% of transactions are faster than.'),\n  p99: () => t('p99 indicates the duration that 99% of transactions are faster than.'),\n  lcp: () =>\n    t('Largest contentful paint (LCP) is a web vital meant to represent user load times'),\n  userMisery: organization =>\n    t(\n      \"User Misery is a score that represents the number of unique users who have experienced load times 4x your organization's apdex threshold of %sms.\",\n      organization.apdexThreshold\n    ),\n  statusBreakdown: () =>\n    t(\n      'The breakdown of transaction statuses. This may indicate what type of failure it is.'\n    ),\n  durationDistribution: () =>\n    t(\n      'Distribution buckets counts of transactions at specifics times for your current date range'\n    ),\n};\n\nexport function getTermHelp(\n  organization: LightWeightOrganization,\n  term: keyof typeof PERFORMANCE_TERMS\n): string {\n  if (!PERFORMANCE_TERMS.hasOwnProperty(term)) {\n    return '';\n  }\n  return PERFORMANCE_TERMS[term](organization);\n}\n\nfunction generateGenericPerformanceEventView(\n  organization: LightWeightOrganization,\n  location: Location\n): EventView {\n  const {query} = location;\n\n  const hasStartAndEnd = query.start && query.end;\n  const savedQuery: NewQuery = {\n    id: undefined,\n    name: t('Performance'),\n    query: 'event.type:transaction',\n    projects: [],\n    fields: [\n      'key_transaction',\n      'transaction',\n      'project',\n      'tpm()',\n      'p50()',\n      'p95()',\n      'failure_rate()',\n      `apdex(${organization.apdexThreshold})`,\n      'count_unique(user)',\n      `count_miserable(user,${organization.apdexThreshold})`,\n      `user_misery(${organization.apdexThreshold})`,\n    ],\n    version: 2,\n  };\n\n  const widths = Array(savedQuery.fields.length).fill(COL_WIDTH_UNDEFINED);\n  widths[savedQuery.fields.length - 1] = '110';\n  savedQuery.widths = widths;\n\n  if (!query.statsPeriod && !hasStartAndEnd) {\n    savedQuery.range = DEFAULT_STATS_PERIOD;\n  }\n  savedQuery.orderby = decodeScalar(query.sort, '-tpm');\n\n  const searchQuery = decodeScalar(query.query, '');\n  const conditions = tokenizeSearch(searchQuery);\n\n  // This is not an override condition since we want the duration to appear in the search bar as a default.\n  if (!conditions.hasTag('transaction.duration')) {\n    conditions.setTagValues('transaction.duration', ['<15m']);\n  }\n\n  // If there is a bare text search, we want to treat it as a search\n  // on the transaction name.\n  if (conditions.query.length > 0) {\n    conditions.setTagValues('transaction', [`*${conditions.query.join(' ')}*`]);\n    conditions.query = [];\n  }\n  savedQuery.query = stringifyQueryObject(conditions);\n\n  const eventView = EventView.fromNewQueryWithLocation(savedQuery, location);\n  eventView.additionalConditions.addTagValues('event.type', ['transaction']);\n  return eventView;\n}\n\nfunction generateBackendPerformanceEventView(\n  organization: LightWeightOrganization,\n  location: Location\n): EventView {\n  const {query} = location;\n\n  const hasStartAndEnd = query.start && query.end;\n  const savedQuery: NewQuery = {\n    id: undefined,\n    name: t('Performance'),\n    query: 'event.type:transaction',\n    projects: [],\n    fields: [\n      'key_transaction',\n      'transaction',\n      'transaction.op',\n      'project',\n      'tpm()',\n      'p50()',\n      'p95()',\n      'failure_rate()',\n      `apdex(${organization.apdexThreshold})`,\n      'count_unique(user)',\n      `count_miserable(user,${organization.apdexThreshold})`,\n      `user_misery(${organization.apdexThreshold})`,\n    ],\n    version: 2,\n  };\n\n  const widths = Array(savedQuery.fields.length).fill(COL_WIDTH_UNDEFINED);\n  widths[savedQuery.fields.length - 1] = '110';\n  savedQuery.widths = widths;\n\n  if (!query.statsPeriod && !hasStartAndEnd) {\n    savedQuery.range = DEFAULT_STATS_PERIOD;\n  }\n  savedQuery.orderby = decodeScalar(query.sort, '-tpm');\n\n  const searchQuery = decodeScalar(query.query, '');\n  const conditions = tokenizeSearch(searchQuery);\n\n  // This is not an override condition since we want the duration to appear in the search bar as a default.\n  if (!conditions.hasTag('transaction.duration')) {\n    conditions.setTagValues('transaction.duration', ['<15m']);\n  }\n\n  // If there is a bare text search, we want to treat it as a search\n  // on the transaction name.\n  if (conditions.query.length > 0) {\n    conditions.setTagValues('transaction', [`*${conditions.query.join(' ')}*`]);\n    conditions.query = [];\n  }\n  savedQuery.query = stringifyQueryObject(conditions);\n\n  const eventView = EventView.fromNewQueryWithLocation(savedQuery, location);\n  eventView.additionalConditions.addTagValues('event.type', ['transaction']);\n  return eventView;\n}\n\nfunction generateFrontendPageloadPerformanceEventView(\n  organization: LightWeightOrganization,\n  location: Location\n): EventView {\n  const {query} = location;\n\n  const hasStartAndEnd = query.start && query.end;\n  const savedQuery: NewQuery = {\n    id: undefined,\n    name: t('Performance'),\n    query: 'event.type:transaction',\n    projects: [],\n    fields: [\n      'key_transaction',\n      'transaction',\n      'project',\n      'tpm()',\n      'p75(measurements.fcp)',\n      'p75(measurements.lcp)',\n      'p75(measurements.fid)',\n      'p75(measurements.cls)',\n      'count_unique(user)',\n      `count_miserable(user,${organization.apdexThreshold})`,\n      `user_misery(${organization.apdexThreshold})`,\n    ],\n    version: 2,\n  };\n\n  const widths = Array(savedQuery.fields.length).fill(COL_WIDTH_UNDEFINED);\n  widths[savedQuery.fields.length - 1] = '110';\n  savedQuery.widths = widths;\n\n  if (!query.statsPeriod && !hasStartAndEnd) {\n    savedQuery.range = DEFAULT_STATS_PERIOD;\n  }\n  savedQuery.orderby = decodeScalar(query.sort, '-tpm');\n\n  const searchQuery = decodeScalar(query.query, '');\n  const conditions = tokenizeSearch(searchQuery);\n\n  // This is not an override condition since we want the duration to appear in the search bar as a default.\n  if (!conditions.hasTag('transaction.duration')) {\n    conditions.setTagValues('transaction.duration', ['<15m']);\n  }\n\n  // If there is a bare text search, we want to treat it as a search\n  // on the transaction name.\n  if (conditions.query.length > 0) {\n    conditions.setTagValues('transaction', [`*${conditions.query.join(' ')}*`]);\n    conditions.query = [];\n  }\n  savedQuery.query = stringifyQueryObject(conditions);\n\n  const eventView = EventView.fromNewQueryWithLocation(savedQuery, location);\n  eventView.additionalConditions\n    .addTagValues('event.type', ['transaction'])\n    .addTagValues('transaction.op', ['pageload']);\n  return eventView;\n}\n\nfunction generateFrontendOtherPerformanceEventView(\n  organization: LightWeightOrganization,\n  location: Location\n): EventView {\n  const {query} = location;\n\n  const hasStartAndEnd = query.start && query.end;\n  const savedQuery: NewQuery = {\n    id: undefined,\n    name: t('Performance'),\n    query: 'event.type:transaction',\n    projects: [],\n    fields: [\n      'key_transaction',\n      'transaction',\n      'transaction.op',\n      'project',\n      'tpm()',\n      'p50(transaction.duration)',\n      'p75(transaction.duration)',\n      'p95(transaction.duration)',\n      'count_unique(user)',\n      `count_miserable(user,${organization.apdexThreshold})`,\n      `user_misery(${organization.apdexThreshold})`,\n    ],\n    version: 2,\n  };\n\n  const widths = Array(savedQuery.fields.length).fill(COL_WIDTH_UNDEFINED);\n  widths[savedQuery.fields.length - 1] = '110';\n  savedQuery.widths = widths;\n\n  if (!query.statsPeriod && !hasStartAndEnd) {\n    savedQuery.range = DEFAULT_STATS_PERIOD;\n  }\n  savedQuery.orderby = decodeScalar(query.sort, '-tpm');\n\n  const searchQuery = decodeScalar(query.query, '');\n  const conditions = tokenizeSearch(searchQuery);\n\n  // This is not an override condition since we want the duration to appear in the search bar as a default.\n  if (!conditions.hasTag('transaction.duration')) {\n    conditions.setTagValues('transaction.duration', ['<15m']);\n  }\n\n  // If there is a bare text search, we want to treat it as a search\n  // on the transaction name.\n  if (conditions.query.length > 0) {\n    conditions.setTagValues('transaction', [`*${conditions.query.join(' ')}*`]);\n    conditions.query = [];\n  }\n  savedQuery.query = stringifyQueryObject(conditions);\n\n  const eventView = EventView.fromNewQueryWithLocation(savedQuery, location);\n  eventView.additionalConditions\n    .addTagValues('event.type', ['transaction'])\n    .addTagValues('!transaction.op', ['pageload']);\n  return eventView;\n}\n\nexport function generatePerformanceEventView(\n  organization,\n  location,\n  projects,\n  isTrends = false\n) {\n  const eventView = generateGenericPerformanceEventView(organization, location);\n  if (isTrends) {\n    return eventView;\n  }\n\n  const display = getCurrentLandingDisplay(location, projects, eventView);\n  switch (display?.field) {\n    case LandingDisplayField.FRONTEND_PAGELOAD:\n      return generateFrontendPageloadPerformanceEventView(organization, location);\n    case LandingDisplayField.FRONTEND_OTHER:\n      return generateFrontendOtherPerformanceEventView(organization, location);\n    case LandingDisplayField.BACKEND:\n      return generateBackendPerformanceEventView(organization, location);\n    default:\n      return eventView;\n  }\n}\n\nexport function generatePerformanceVitalDetailView(\n  _organization: LightWeightOrganization,\n  location: Location\n): EventView {\n  const {query} = location;\n\n  const vitalName = vitalNameFromLocation(location);\n\n  const hasStartAndEnd = query.start && query.end;\n  const savedQuery: NewQuery = {\n    id: undefined,\n    name: t('Vitals Performance Details'),\n    query: 'event.type:transaction',\n    projects: [],\n    fields: [\n      'key_transaction',\n      'transaction',\n      'project',\n      'count_unique(user)',\n      'count()',\n      `p50(${vitalName})`,\n      `p75(${vitalName})`,\n      `p95(${vitalName})`,\n      getVitalDetailTablePoorStatusFunction(vitalName),\n      getVitalDetailTableMehStatusFunction(vitalName),\n    ],\n    version: 2,\n  };\n\n  if (!query.statsPeriod && !hasStartAndEnd) {\n    savedQuery.range = DEFAULT_STATS_PERIOD;\n  }\n  savedQuery.orderby = decodeScalar(query.sort, '-count');\n\n  const searchQuery = decodeScalar(query.query, '');\n  const conditions = tokenizeSearch(searchQuery);\n\n  // If there is a bare text search, we want to treat it as a search\n  // on the transaction name.\n  if (conditions.query.length > 0) {\n    conditions.setTagValues('transaction', [`*${conditions.query.join(' ')}*`]);\n    conditions.query = [];\n  }\n  savedQuery.query = stringifyQueryObject(conditions);\n\n  const eventView = EventView.fromNewQueryWithLocation(savedQuery, location);\n  eventView.additionalConditions\n    .addTagValues('event.type', ['transaction'])\n    .addTagValues('has', [vitalName]);\n  return eventView;\n}\n","import {Location} from 'history';\n\nimport {t} from 'app/locale';\nimport {LightWeightOrganization, Organization, Project} from 'app/types';\nimport EventView from 'app/utils/discover/eventView';\nimport {AggregationKey, Column} from 'app/utils/discover/fields';\nimport {\n  formatAbbreviatedNumber,\n  formatFloat,\n  formatPercentage,\n  getDuration,\n} from 'app/utils/formatters';\nimport {HistogramData} from 'app/utils/performance/histogram/types';\nimport {decodeScalar} from 'app/utils/queryString';\n\nimport {AxisOption, getTermHelp, PERFORMANCE_TERM} from '../data';\nimport {Rectangle} from '../transactionSummary/transactionVitals/types';\nimport {platformToPerformanceType, PROJECT_PERFORMANCE_TYPE} from '../utils';\n\nexport const LEFT_AXIS_QUERY_KEY = 'left';\nexport const RIGHT_AXIS_QUERY_KEY = 'right';\n\ntype LandingDisplay = {\n  label: string;\n  field: LandingDisplayField;\n};\n\nexport enum LandingDisplayField {\n  ALL = 'all',\n  FRONTEND_PAGELOAD = 'frontend_pageload',\n  FRONTEND_OTHER = 'frontend_other',\n  BACKEND = 'backend',\n}\n\nexport const LANDING_DISPLAYS = [\n  {\n    label: 'All Transactions',\n    field: LandingDisplayField.ALL,\n  },\n  {\n    label: 'Frontend (Pageload)',\n    field: LandingDisplayField.FRONTEND_PAGELOAD,\n  },\n  {\n    label: 'Frontend (Other)',\n    field: LandingDisplayField.FRONTEND_OTHER,\n  },\n  {\n    label: 'Backend',\n    field: LandingDisplayField.BACKEND,\n  },\n];\n\nexport function getCurrentLandingDisplay(\n  location: Location,\n  projects: Project[],\n  eventView?: EventView\n): LandingDisplay {\n  const landingField = decodeScalar(location?.query?.landingDisplay);\n  const display = LANDING_DISPLAYS.find(({field}) => field === landingField);\n  if (display) {\n    return display;\n  }\n\n  const defaultDisplayField = getDefaultDisplayFieldForPlatform(projects, eventView);\n  const defaultDisplay = LANDING_DISPLAYS.find(\n    ({field}) => field === defaultDisplayField\n  );\n  return defaultDisplay || LANDING_DISPLAYS[0];\n}\n\nexport function getChartWidth(chartData: HistogramData, refPixelRect: Rectangle | null) {\n  const distance = refPixelRect ? refPixelRect.point2.x - refPixelRect.point1.x : 0;\n  const chartWidth = chartData.length * distance;\n\n  return {\n    chartWidth,\n  };\n}\n\nexport function getBackendFunction(\n  functionName: AggregationKey,\n  organization: Organization\n): Column {\n  switch (functionName) {\n    case 'p75':\n      return {kind: 'function', function: ['p75', 'transaction.duration', undefined]};\n    case 'tpm':\n      return {kind: 'function', function: ['tpm', '', undefined]};\n    case 'failure_rate':\n      return {kind: 'function', function: ['failure_rate', '', undefined]};\n    case 'apdex':\n      return {\n        kind: 'function',\n        function: ['apdex', `${organization.apdexThreshold}`, undefined],\n      };\n    default:\n      throw new Error(`Unsupported backend function: ${functionName}`);\n  }\n}\n\nexport function getDefaultDisplayFieldForPlatform(\n  projects: Project[],\n  eventView?: EventView\n) {\n  if (!eventView) {\n    return LandingDisplayField.ALL;\n  }\n  const projectIds = eventView.project;\n\n  const performanceTypeToDisplay = {\n    [PROJECT_PERFORMANCE_TYPE.ANY]: LandingDisplayField.ALL,\n    [PROJECT_PERFORMANCE_TYPE.FRONTEND]: LandingDisplayField.FRONTEND_PAGELOAD,\n    [PROJECT_PERFORMANCE_TYPE.BACKEND]: LandingDisplayField.BACKEND,\n  };\n  const performanceType = platformToPerformanceType(projects, projectIds);\n  const landingField =\n    performanceTypeToDisplay[performanceType] ?? LandingDisplayField.ALL;\n  return landingField;\n}\n\nexport const backendCardDetails = (organization: LightWeightOrganization) => {\n  return {\n    p75: {\n      title: t('Duration (p75)'),\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.P75),\n      formatter: value => getDuration(value / 1000, value >= 1000 ? 3 : 0, true),\n    },\n    tpm: {\n      title: t('Throughput'),\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.THROUGHPUT),\n      formatter: formatAbbreviatedNumber,\n    },\n    failure_rate: {\n      title: t('Failure Rate'),\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.FAILURE_RATE),\n      formatter: value => formatPercentage(value, 2),\n    },\n    apdex: {\n      title: t('Apdex'),\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.APDEX),\n      formatter: value => formatFloat(value, 4),\n    },\n  };\n};\n\nexport function getDisplayAxes(options: AxisOption[], location: Location) {\n  const leftDefault = options.find(opt => opt.isLeftDefault) || options[0];\n  const rightDefault = options.find(opt => opt.isRightDefault) || options[1];\n\n  const leftAxis =\n    options.find(opt => opt.value === location.query[LEFT_AXIS_QUERY_KEY]) || leftDefault;\n  const rightAxis =\n    options.find(opt => opt.value === location.query[RIGHT_AXIS_QUERY_KEY]) ||\n    rightDefault;\n  return {\n    leftAxis,\n    rightAxis,\n  };\n}\n","import {Location, LocationDescriptor, Query} from 'history';\n\nimport Duration from 'app/components/duration';\nimport {ALL_ACCESS_PROJECTS} from 'app/constants/globalSelectionHeader';\nimport {backend, frontend} from 'app/data/platformCategories';\nimport {GlobalSelection, OrganizationSummary, Project} from 'app/types';\nimport {defined} from 'app/utils';\nimport {statsPeriodToDays} from 'app/utils/dates';\nimport EventView from 'app/utils/discover/eventView';\nimport getCurrentSentryReactTransaction from 'app/utils/getCurrentSentryReactTransaction';\nimport {decodeScalar} from 'app/utils/queryString';\nimport {tokenizeSearch} from 'app/utils/tokenizeSearch';\n\n/**\n * Performance type can used to determine a default view or which specific field should be used by default on pages\n * where we don't want to wait for transaction data to return to determine how to display aspects of a page.\n */\nexport enum PROJECT_PERFORMANCE_TYPE {\n  ANY = 'any', // Fallback to transaction duration\n  FRONTEND = 'frontend',\n  BACKEND = 'backend',\n  FRONTEND_OTHER = 'frontend_other',\n}\n\nconst FRONTEND_PLATFORMS: string[] = [...frontend];\nconst BACKEND_PLATFORMS: string[] = [...backend];\n\nexport function platformToPerformanceType(\n  projects: Project[],\n  projectIds: readonly number[]\n) {\n  if (projectIds.length === 0 || projectIds[0] === ALL_ACCESS_PROJECTS) {\n    return PROJECT_PERFORMANCE_TYPE.ANY;\n  }\n  const selectedProjects = projects.filter(p => projectIds.includes(parseInt(p.id, 10)));\n  if (selectedProjects.length === 0 || selectedProjects.some(p => !p.platform)) {\n    return PROJECT_PERFORMANCE_TYPE.ANY;\n  }\n\n  if (\n    selectedProjects.every(project =>\n      FRONTEND_PLATFORMS.includes(project.platform as string)\n    )\n  ) {\n    return PROJECT_PERFORMANCE_TYPE.FRONTEND;\n  }\n\n  if (\n    selectedProjects.every(project =>\n      BACKEND_PLATFORMS.includes(project.platform as string)\n    )\n  ) {\n    return PROJECT_PERFORMANCE_TYPE.BACKEND;\n  }\n\n  return PROJECT_PERFORMANCE_TYPE.ANY;\n}\n\n/**\n * Used for transaction summary to determine appropriate columns on a page, since there is no display field set for the page.\n */\nexport function platformAndConditionsToPerformanceType(\n  projects: Project[],\n  eventView: EventView\n) {\n  const performanceType = platformToPerformanceType(projects, eventView.project);\n  if (performanceType === PROJECT_PERFORMANCE_TYPE.FRONTEND) {\n    const conditions = tokenizeSearch(eventView.query);\n    const ops = conditions.getTagValues('!transaction.op');\n    if (ops.some(op => op === 'pageload')) {\n      return PROJECT_PERFORMANCE_TYPE.FRONTEND_OTHER;\n    }\n  }\n  return performanceType;\n}\n\n/**\n * Used for transaction summary to check the view itself, since it can have conditions which would exclude it from having vitals aside from platform.\n */\nexport function isSummaryViewFrontendPageLoad(eventView: EventView, projects: Project[]) {\n  return (\n    platformAndConditionsToPerformanceType(projects, eventView) ===\n    PROJECT_PERFORMANCE_TYPE.FRONTEND\n  );\n}\n\nexport function getPerformanceLandingUrl(organization: OrganizationSummary): string {\n  return `/organizations/${organization.slug}/performance/`;\n}\n\nexport function getPerformanceTrendsUrl(organization: OrganizationSummary): string {\n  return `/organizations/${organization.slug}/performance/trends/`;\n}\n\nexport function getTransactionSearchQuery(location: Location, query: string = '') {\n  return decodeScalar(location.query.query, query).trim();\n}\n\nexport function getTransactionDetailsUrl(\n  organization: OrganizationSummary,\n  eventSlug: string,\n  transaction: string,\n  query: Query\n): LocationDescriptor {\n  return {\n    pathname: `/organizations/${organization.slug}/performance/${eventSlug}/`,\n    query: {\n      ...query,\n      transaction,\n    },\n  };\n}\n\nexport function getTransactionComparisonUrl({\n  organization,\n  baselineEventSlug,\n  regressionEventSlug,\n  transaction,\n  query,\n}: {\n  organization: OrganizationSummary;\n  baselineEventSlug: string;\n  regressionEventSlug: string;\n  transaction: string;\n  query: Query;\n}): LocationDescriptor {\n  return {\n    pathname: `/organizations/${organization.slug}/performance/compare/${baselineEventSlug}/${regressionEventSlug}/`,\n    query: {\n      ...query,\n      transaction,\n    },\n  };\n}\n\nexport function addRoutePerformanceContext(selection: GlobalSelection) {\n  const transaction = getCurrentSentryReactTransaction();\n  const days = statsPeriodToDays(\n    selection.datetime.period,\n    selection.datetime.start,\n    selection.datetime.end\n  );\n  const oneDay = 86400;\n  const seconds = Math.floor(days * oneDay);\n\n  transaction?.setTag('query.period', seconds.toString());\n  let groupedPeriod = '>30d';\n  if (seconds <= oneDay) groupedPeriod = '<=1d';\n  else if (seconds <= oneDay * 7) groupedPeriod = '<=7d';\n  else if (seconds <= oneDay * 14) groupedPeriod = '<=14d';\n  else if (seconds <= oneDay * 30) groupedPeriod = '<=30d';\n  transaction?.setTag('query.period.grouped', groupedPeriod);\n}\n\nexport function getTransactionName(location: Location): string | undefined {\n  const {transaction} = location.query;\n\n  return decodeScalar(transaction);\n}\n\ntype DurationProps = {abbreviation?: boolean};\ntype SecondsProps = {seconds: number} & DurationProps;\ntype MillisecondsProps = {milliseconds: number} & DurationProps;\ntype PerformanceDurationProps = SecondsProps | MillisecondsProps;\nconst hasMilliseconds = (props: PerformanceDurationProps): props is MillisecondsProps => {\n  return defined((props as MillisecondsProps).milliseconds);\n};\nexport function PerformanceDuration(props: SecondsProps);\nexport function PerformanceDuration(props: MillisecondsProps);\nexport function PerformanceDuration(props: PerformanceDurationProps) {\n  const normalizedSeconds = hasMilliseconds(props)\n    ? props.milliseconds / 1000\n    : props.seconds;\n  return (\n    <Duration\n      abbreviation={props.abbreviation}\n      seconds={normalizedSeconds}\n      fixedDigits={normalizedSeconds > 1 ? 2 : 0}\n    />\n  );\n}\n","import * as React from 'react';\nimport {Location, Query} from 'history';\n\nimport {IconCheckmark, IconFire, IconWarning} from 'app/icons';\nimport {Series} from 'app/types/echarts';\nimport {getAggregateAlias, WebVital} from 'app/utils/discover/fields';\nimport {decodeScalar} from 'app/utils/queryString';\nimport {Color} from 'app/utils/theme';\n\nexport function generateVitalDetailRoute({orgSlug}: {orgSlug: string}): string {\n  return `/organizations/${orgSlug}/performance/vitaldetail/`;\n}\n\nexport const webVitalPoor = {\n  [WebVital.FP]: 3000,\n  [WebVital.FCP]: 3000,\n  [WebVital.LCP]: 4000,\n  [WebVital.FID]: 300,\n  [WebVital.CLS]: 0.25,\n};\n\nexport const webVitalMeh = {\n  [WebVital.FP]: 1000,\n  [WebVital.FCP]: 1000,\n  [WebVital.LCP]: 2500,\n  [WebVital.FID]: 100,\n  [WebVital.CLS]: 0.1,\n};\n\nexport enum VitalState {\n  POOR = 'Poor',\n  MEH = 'Meh',\n  GOOD = 'Good',\n}\n\nexport const vitalStateColors: Record<VitalState, Color> = {\n  [VitalState.POOR]: 'red300',\n  [VitalState.MEH]: 'yellow300',\n  [VitalState.GOOD]: 'green300',\n};\n\nexport const vitalStateIcons: Record<VitalState, React.ReactNode> = {\n  [VitalState.POOR]: <IconFire color={vitalStateColors[VitalState.POOR]} />,\n  [VitalState.MEH]: <IconWarning color={vitalStateColors[VitalState.MEH]} />,\n  [VitalState.GOOD]: (\n    <IconCheckmark color={vitalStateColors[VitalState.GOOD]} isCircled />\n  ),\n};\n\nexport function vitalDetailRouteWithQuery({\n  orgSlug,\n  vitalName,\n  projectID,\n  query,\n}: {\n  orgSlug: string;\n  vitalName: string;\n  query: Query;\n  projectID?: string | string[];\n}) {\n  const pathname = generateVitalDetailRoute({\n    orgSlug,\n  });\n\n  return {\n    pathname,\n    query: {\n      vitalName,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n    },\n  };\n}\n\nexport function vitalNameFromLocation(location: Location): WebVital {\n  const _vitalName = decodeScalar(location.query.vitalName);\n\n  const vitalName = Object.values(WebVital).find(v => v === _vitalName);\n\n  if (vitalName) {\n    return vitalName;\n  } else {\n    return WebVital.LCP;\n  }\n}\n\nexport function getVitalDetailTablePoorStatusFunction(vitalName: WebVital): string {\n  const vitalThreshold = webVitalPoor[vitalName];\n  const statusFunction = `compare_numeric_aggregate(${getAggregateAlias(\n    `p75(${vitalName})`\n  )},greater,${vitalThreshold})`;\n  return statusFunction;\n}\n\nexport function getVitalDetailTableMehStatusFunction(vitalName: WebVital): string {\n  const vitalThreshold = webVitalMeh[vitalName];\n  const statusFunction = `compare_numeric_aggregate(${getAggregateAlias(\n    `p75(${vitalName})`\n  )},greater,${vitalThreshold})`;\n  return statusFunction;\n}\n\nexport const vitalMap: Partial<Record<WebVital, string>> = {\n  [WebVital.FCP]: 'First Contentful Paint',\n  [WebVital.CLS]: 'Cumulative Layout Shift',\n  [WebVital.FID]: 'First Input Delay',\n  [WebVital.LCP]: 'Largest Contentful Paint',\n};\n\nexport const vitalChartTitleMap = vitalMap;\n\nexport const vitalDescription: Partial<Record<WebVital, string>> = {\n  [WebVital.FCP]:\n    'First Contentful Paint (FCP) measures the amount of time the first content takes to render in the viewport. Like FP, this could also show up in any form from the document object model (DOM), such as images, SVGs, or text blocks.',\n  [WebVital.CLS]:\n    'Cumulative Layout Shift (CLS) is the sum of individual layout shift scores for every unexpected element shift during the rendering process. Imagine navigating to an article and trying to click a link before the page finishes loading. Before your cursor even gets there, the link may have shifted down due to an image rendering. Rather than using duration for this Web Vital, the CLS score represents the degree of disruptive and visually unstable shifts.',\n  [WebVital.FID]:\n    'First Input Delay measures the response time when the user tries to interact with the viewport. Actions maybe include clicking a button, link or other custom Javascript controller. It is key in helping the user determine if a page is usable or not.',\n  [WebVital.LCP]:\n    'Largest Contentful Paint (LCP) measures the render time for the largest content to appear in the viewport. This may be in any form from the document object model (DOM), such as images, SVGs, or text blocks. It’s the largest pixel area in the viewport, thus most visually defining. LCP helps developers understand how long it takes to see the main content on the page.',\n};\n\nexport const vitalAbbreviations: Partial<Record<WebVital, string>> = {\n  [WebVital.FCP]: 'FCP',\n  [WebVital.CLS]: 'CLS',\n  [WebVital.FID]: 'FID',\n  [WebVital.LCP]: 'LCP',\n};\n\nexport function getMaxOfSeries(series: Series[]) {\n  let max = -Infinity;\n  for (const {data} of series) {\n    for (const point of data) {\n      max = Math.max(max, point.value);\n    }\n  }\n  return max;\n}\n"],"sourceRoot":""}