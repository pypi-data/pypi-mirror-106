{"version":3,"sources":["webpack:///./app/components/breadcrumbs.tsx"],"names":["BreadcrumbList","space","Breadcrumbs","crumbs","linkLastItem","props","length","to","map","index","label","preserveGlobalSelection","key","labelKey","mapKey","BreadcrumbLink","BreadcrumbItem","BreadcrumbDividerIcon","size","direction","getBreadcrumbListItemStyles","p","theme","gray300","overflowEllipsis","textColor","subText","IconChevron"],"mappings":"g8DAWA,IAAMA,GAAiB,OAAO,MAAP,sBAAH,4CAGPC,OAAM,GAHC,OAgDdC,EAAc,SAAC,GAAoD,IAAnDC,EAAmD,EAAnDA,OAAmD,IAA3CC,oBAA2C,SAAlBC,GAAkB,oCACvE,OAAsB,IAAlBF,EAAOG,OACF,MAGJF,IACHD,EAAOA,EAAOG,OAAS,GAAGC,GAAK,OAI/B,QAACP,EAAD,OAAoBK,GAApB,aACGF,EAAOK,KAAI,WAA4CC,GAAU,IAApDC,EAAoD,EAApDA,MAAOH,EAA6C,EAA7CA,GAAII,EAAyC,EAAzCA,wBAAyBC,EAAgB,EAAhBA,IAC1CC,EAA4B,iBAAVH,EAAqBA,EAAQ,GAC/CI,GACJF,UAAqB,iBAAPL,GAAd,UAAmCM,GAAnC,OAA8CN,GAA9C,UAAwDM,GAAxD,OAAmEJ,GAErE,OACE,QAAC,WAAD,WACGF,GACC,QAACQ,EAAD,CAAgBR,GAAIA,EAAII,wBAAyBA,EAAjD,SACGD,KAGH,QAACM,EAAD,UAAiBN,IAGlBD,EAAQN,EAAOG,OAAS,IACvB,QAACW,EAAD,CAAuBC,KAAK,KAAKC,UAAU,YAV1BL,WAjBzBZ,E,0BAoCN,IAAMkB,EAA8B,SAACC,GAAD,2BACzBA,EAAEC,MAAMC,QADiB,gBAEhCC,IAFgC,6DAMvBH,EAAEC,MAAMG,UANe,aAgB9BV,GAAiB,QACrB,gBAAEJ,EAAF,EAAEA,wBAAyBJ,EAA3B,EAA2BA,GAAOF,GAAlC,kDACEM,GACE,QAAC,IAAD,GAAqBJ,GAAIA,GAA8BF,KAEvD,QAAC,IAAD,GAAME,GAAIA,GAAQF,MALD,sBAQnBe,EARgB,4BAYP,SAAAC,GAAC,OAAIA,EAAEC,MAAMI,UAZN,MAgBdV,GAAiB,OAAO,OAAP,sBACnBI,EADgB,qBAKdH,GAAwB,OAAOU,KAAP,sBAAH,UAChB,SAAAN,GAAC,OAAIA,EAAEC,MAAMC,UADG,cAEbtB,OAAM,GAFO,mBAM3B","file":"app_components_breadcrumbs_tsx.9db01415d7b093e3c42b.js","sourcesContent":["import * as React from 'react';\nimport styled from '@emotion/styled';\nimport {LocationDescriptor} from 'history';\n\nimport GlobalSelectionLink from 'app/components/globalSelectionLink';\nimport Link from 'app/components/links/link';\nimport {IconChevron} from 'app/icons';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport space from 'app/styles/space';\nimport {Theme} from 'app/utils/theme';\n\nconst BreadcrumbList = styled('div')`\n  display: flex;\n  align-items: center;\n  padding: ${space(1)} 0;\n`;\n\nexport type Crumb = {\n  /**\n   * Label of the crumb\n   */\n  label: React.ReactNode;\n\n  /**\n   * Link of the crumb\n   */\n  to?: React.ComponentProps<typeof Link>['to'] | null;\n\n  /**\n   * It will keep the global selection values (projects, environments, time) in the\n   * querystring when navigating (GlobalSelectionLink)\n   */\n  preserveGlobalSelection?: boolean;\n\n  /**\n   * Component will try to come up with unique key, but you can provide your own\n   * (used when mapping over crumbs)\n   */\n  key?: string;\n};\n\ntype Props = React.ComponentPropsWithoutRef<typeof BreadcrumbList> & {\n  /**\n   * Array of crumbs that will be rendered\n   */\n  crumbs: Crumb[];\n\n  /**\n   * As a general rule of thumb we don't want the last item to be link as it most likely\n   * points to the same page we are currently on. This is by default false, so that\n   * people don't have to check if crumb is last in the array and then manually\n   * assign `to: null/undefined` when passing props to this component.\n   */\n  linkLastItem?: boolean;\n};\n\n/**\n * Page breadcrumbs used for navigation, not to be confused with sentry's event breadcrumbs\n */\nconst Breadcrumbs = ({crumbs, linkLastItem = false, ...props}: Props) => {\n  if (crumbs.length === 0) {\n    return null;\n  }\n\n  if (!linkLastItem) {\n    crumbs[crumbs.length - 1].to = null;\n  }\n\n  return (\n    <BreadcrumbList {...props}>\n      {crumbs.map(({label, to, preserveGlobalSelection, key}, index) => {\n        const labelKey = typeof label === 'string' ? label : '';\n        const mapKey =\n          key ?? typeof to === 'string' ? `${labelKey}${to}` : `${labelKey}${index}`;\n\n        return (\n          <React.Fragment key={mapKey}>\n            {to ? (\n              <BreadcrumbLink to={to} preserveGlobalSelection={preserveGlobalSelection}>\n                {label}\n              </BreadcrumbLink>\n            ) : (\n              <BreadcrumbItem>{label}</BreadcrumbItem>\n            )}\n\n            {index < crumbs.length - 1 && (\n              <BreadcrumbDividerIcon size=\"xs\" direction=\"right\" />\n            )}\n          </React.Fragment>\n        );\n      })}\n    </BreadcrumbList>\n  );\n};\n\nconst getBreadcrumbListItemStyles = (p: {theme: Theme}) => `\n  color: ${p.theme.gray300};\n  ${overflowEllipsis};\n  width: auto;\n\n  &:last-child {\n    color: ${p.theme.textColor};\n  }\n`;\n\ntype BreadcrumbLinkProps = {\n  to: React.ComponentProps<typeof Link>['to'];\n  preserveGlobalSelection?: boolean;\n  children?: React.ReactNode;\n};\n\nconst BreadcrumbLink = styled(\n  ({preserveGlobalSelection, to, ...props}: BreadcrumbLinkProps) =>\n    preserveGlobalSelection ? (\n      <GlobalSelectionLink to={to as LocationDescriptor} {...props} />\n    ) : (\n      <Link to={to} {...props} />\n    )\n)`\n  ${getBreadcrumbListItemStyles}\n\n  &:hover,\n  &:active {\n    color: ${p => p.theme.subText};\n  }\n`;\n\nconst BreadcrumbItem = styled('span')`\n  ${getBreadcrumbListItemStyles}\n  max-width: 400px;\n`;\n\nconst BreadcrumbDividerIcon = styled(IconChevron)`\n  color: ${p => p.theme.gray300};\n  margin: 0 ${space(1)};\n  flex-shrink: 0;\n`;\n\nexport default Breadcrumbs;\n"],"sourceRoot":""}