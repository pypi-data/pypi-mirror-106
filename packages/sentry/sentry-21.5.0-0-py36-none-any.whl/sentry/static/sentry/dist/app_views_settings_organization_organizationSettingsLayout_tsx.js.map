{"version":3,"sources":["webpack:///./app/views/settings/organization/organizationSettingsNavigation.tsx","webpack:///./app/views/settings/organization/organizationSettingsLayout.tsx"],"names":["OrganizationSettingsNavigation","createReactClass","displayName","mixins","Reflux","HookStore","getInitialState","this","getHooks","componentDidMount","setState","organization","props","hookConfigs","map","cb","hooks","handleHooks","name","org","render","state","access","Set","features","navigationObjects","navigationConfiguration","withOrganization","OrganizationSettingsLayout","renderNavigation"],"mappings":"gtDAqBMA,EAAiCC,IAA+B,CACpEC,YAAa,iCAUbC,OAAQ,CAACC,aAAgBC,IAAW,gBAEpCC,gBAboE,WAclE,OAAOC,KAAKC,YAGdC,kBAjBoE,WAmBlEF,KAAKG,SAASH,KAAKC,aAGrBA,SAtBoE,WAsBzD,IAEFG,EAAgBJ,KAAKK,MAArBD,aAEP,MAAO,CACLE,YAAaR,QAAc,2CAA2CS,KAAI,SAAAC,GAAE,OAC1EA,EAAGJ,MAELK,MAAOX,QAAc,oCAAoCS,KAAI,SAAAC,GAAE,OAC7DA,EAAGJ,QAKTM,YApCoE,SAoCxDC,EAAgBF,GAC1B,IAAMG,EAAMZ,KAAKK,MAAMD,aACV,4CAATO,GAGJX,KAAKG,SAAS,CAACG,YAAaG,EAAMF,KAAI,SAAAC,GAAE,OAAIA,EAAGI,SAGjDC,OA5CoE,WA4C3D,MACsBb,KAAKc,MAA3BL,EADA,EACAA,MAAOH,EADP,EACOA,YACPF,EAAgBJ,KAAKK,MAArBD,aACDW,EAAS,IAAIC,IAAIZ,EAAaW,QAC9BE,EAAW,IAAID,IAAIZ,EAAaa,UAEtC,OACE,QAAC,IAAD,CACEC,kBAAmBC,IACnBJ,OAAQA,EACRE,SAAUA,EACVb,aAAcA,EACdK,MAAOA,EACPH,YAAaA,OAMrB,SAAec,OAAiB3B,G,qkBC1EhC,SAAS4B,EAA2BhB,GAClC,OACE,QAAC,IAAD,OACMA,GADN,IAEEiB,iBAAkB,kBAAM,QAAC,EAAD,QAJrBD,E,yCAST","file":"app_views_settings_organization_organizationSettingsLayout_tsx.e6b1cea591f4c153fa96.js","sourcesContent":["import * as React from 'react';\nimport createReactClass from 'create-react-class';\nimport Reflux from 'reflux';\n\nimport HookStore from 'app/stores/hookStore';\nimport {Organization} from 'app/types';\nimport {HookName, Hooks} from 'app/types/hooks';\nimport withOrganization from 'app/utils/withOrganization';\nimport SettingsNavigation from 'app/views/settings/components/settingsNavigation';\nimport navigationConfiguration from 'app/views/settings/organization/navigationConfiguration';\nimport {NavigationSection} from 'app/views/settings/types';\n\ntype Props = {\n  organization: Organization;\n};\n\ntype State = {\n  hookConfigs: NavigationSection[];\n  hooks: React.ReactElement[];\n};\n\nconst OrganizationSettingsNavigation = createReactClass<Props, State>({\n  displayName: 'OrganizationSettingsNavigation',\n\n  /**\n   * TODO(epurkhiser): Becase the settings organization navigation hooks\n   * do not conform to a normal component style hook, and take a single\n   * parameter 'organization', we cannot use the `Hook` component here,\n   * and must resort to using the mixin style HookStore to retrieve hook data.\n   *\n   * We should update the hook interface for the two hooks used here\n   */\n  mixins: [Reflux.listenTo(HookStore, 'handleHooks') as any],\n\n  getInitialState() {\n    return this.getHooks();\n  },\n\n  componentDidMount() {\n    // eslint-disable-next-line react/no-did-mount-set-state\n    this.setState(this.getHooks());\n  },\n\n  getHooks() {\n    // Allow injection via getsentry et all\n    const {organization} = this.props as Props;\n\n    return {\n      hookConfigs: HookStore.get('settings:organization-navigation-config').map(cb =>\n        cb(organization)\n      ),\n      hooks: HookStore.get('settings:organization-navigation').map(cb =>\n        cb(organization)\n      ),\n    };\n  },\n\n  handleHooks(name: HookName, hooks: Hooks['settings:organization-navigation-config'][]) {\n    const org = this.props.organization;\n    if (name !== 'settings:organization-navigation-config') {\n      return;\n    }\n    this.setState({hookConfigs: hooks.map(cb => cb(org))});\n  },\n\n  render() {\n    const {hooks, hookConfigs} = this.state as State;\n    const {organization} = this.props as Props;\n    const access = new Set(organization.access);\n    const features = new Set(organization.features);\n\n    return (\n      <SettingsNavigation\n        navigationObjects={navigationConfiguration}\n        access={access}\n        features={features}\n        organization={organization}\n        hooks={hooks}\n        hookConfigs={hookConfigs}\n      />\n    );\n  },\n});\n\nexport default withOrganization(OrganizationSettingsNavigation);\n","import * as React from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport SettingsLayout from 'app/views/settings/components/settingsLayout';\nimport OrganizationSettingsNavigation from 'app/views/settings/organization/organizationSettingsNavigation';\n\ntype Props = RouteComponentProps<{orgId: string}, {}> & {\n  children: React.ReactNode;\n};\n\nfunction OrganizationSettingsLayout(props: Props) {\n  return (\n    <SettingsLayout\n      {...props}\n      renderNavigation={() => <OrganizationSettingsNavigation />}\n    />\n  );\n}\n\nexport default OrganizationSettingsLayout;\n"],"sourceRoot":""}