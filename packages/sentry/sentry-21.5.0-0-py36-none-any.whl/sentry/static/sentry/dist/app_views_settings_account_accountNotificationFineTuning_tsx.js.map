{"version":3,"sources":["webpack:///./app/data/forms/accountNotificationSettings.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/account/notifications/fields.tsx","webpack:///./app/views/settings/account/notifications/fields2.tsx","webpack:///./app/views/settings/account/notifications/utils.tsx","webpack:///./app/views/settings/account/notifications/notificationSettings.tsx","webpack:///./app/views/settings/account/accountNotificationFineTuning.tsx","webpack:///./app/views/settings/components/forms/formPanel.tsx","webpack:///./app/views/settings/components/forms/jsonForm.tsx"],"names":["route","fields","subscribeByDefault","name","type","label","t","help","workflowNotifications","choices","weeklyReports","disabled","deployNotifications","personalActivityNotifications","selfAssignOnResolve","title","AsyncView","this","getTitle","renderComponent","AsyncComponent","ACCOUNT_NOTIFICATION_FIELDS","alerts","description","defaultValue","defaultFieldName","workflow","deploy","reports","email","NOTIFICATION_SETTING_FIELDS","provider","isGroupedByProject","includes","groupByOrganization","projects","reduce","acc","project","orgSlug","organization","slug","hasOwnProperty","push","getFallBackValue","notificationType","getChoiceString","key","found","find","row","Error","backfillMissingProvidersWithFallback","data","providerList","fallbackValue","entries","fallback","Object","previousValue","fromEntries","NotificationSettings","props","notificationSettings","state","values","user","pop","getParents","map","parent","id","getParentValues","changedData","updatedNotificationSettings","split","keys","length","scopeType","scopeTypeData","scopeId","scopeIdData","me","setState","parentId","parentKey","newValue","previousData","getUserDefaultValues","organizations","stateProjects","defaultFields","currentDefault","assign","getData","getStateToPutForParent","concat","getStateToPutForDefault","getStateToPutForProvider","endpoints","query","providers","groupedParents","getGroupedParents","userData","parentData","getParentData","getDefaultSettings","formTitle","saveOnBlur","apiMethod","apiEndpoint","initialData","sort","join","groupTitle","parents","getParentField","withOrganizations","PanelBodyLineItem","PanelBody","p","theme","innerBorder","AccountNotificationsByProject","field","projectsByOrg","fieldConfig","org","Fragment","projectFields","f","AccountNotificationsByOrganization","AccountNotificationsByOrganizationContainer","AccountNotificationFineTuning","fineTuneType","params","emails","filter","isVerified","a","b","isPrimary","some","features","notifications","fineTuneData","projectsPageLinks","isProject","getEndpoints","stateKey","url","hasProjects","emailChoices","hasButtons","Heading","renderSearchInput","placeholder","pageLinks","FormPanel","access","additionalFieldProps","renderFooter","renderHeader","otherProps","sanitizeQuerySelector","undefined","fieldWithoutDefaultValue","disabledReason","highlighted","React","JsonForm","location","hash","scrollToHash","nextProps","toHash","scrollToElement","decodeURIComponent","align","offset","err","Sentry","fieldsWithVisibleProp","defined","visible","every","formPanelProps","shouldDisplayForm","forms","formGroup","i","renderForm","withRouter"],"mappings":"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","file":"app_views_settings_account_accountNotificationFineTuning_tsx.8bb90176ae1cd616cc81.js","sourcesContent":["import {t} from 'app/locale';\nimport {Field, JsonFormObject} from 'app/views/settings/components/forms/type';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/account/notifications/';\n\nexport const fields: {[key: string]: Field} = {\n  subscribeByDefault: {\n    name: 'subscribeByDefault',\n    type: 'boolean',\n    label: t('Send Me Alerts'),\n    // TODO(billy): Make this a real link\n    help: t(\n      'Enable this to receive notifications for Alerts sent to your teams. You will always receive alerts configured to be sent directly to you.'\n    ),\n  },\n  workflowNotifications: {\n    name: 'workflowNotifications',\n    type: 'radio',\n    label: t('Send Me Workflow Notifications'),\n    choices: [\n      [0, t('Always')],\n      [1, t('Only On Issues I Subscribe To')],\n      [2, t('Never')],\n    ],\n    help: t('E.g. changes in issue assignment, resolution status, and comments.'),\n  },\n  weeklyReports: {\n    // Form is not visible because currently not implemented\n    name: 'weeklyReports',\n    type: 'boolean',\n    label: t('Send Me Weekly Reports'),\n    help: t(\"Reports contain a summary of what's happened within your organization.\"),\n    disabled: true,\n  },\n  deployNotifications: {\n    name: 'deployNotifications',\n    type: 'radio',\n    label: t('Send Me Deploy Notifications'),\n    choices: [\n      [2, t('Always')],\n      [3, t('Only On Deploys With My Commits')],\n      [4, t('Never')],\n    ],\n    help: t('Deploy emails include release, environment and commit overviews.'),\n  },\n  personalActivityNotifications: {\n    name: 'personalActivityNotifications',\n    type: 'boolean',\n    label: t('Notify Me About My Own Activity'),\n    help: t('Enable this to receive notifications about your own actions on Sentry.'),\n  },\n  selfAssignOnResolve: {\n    name: 'selfAssignOnResolve',\n    type: 'boolean',\n    label: t(\"Claim Unassigned Issues I've Resolved\"),\n    help: t(\"You'll receive notifications about any changes that happen afterwards.\"),\n  },\n};\n\nconst formGroups: JsonFormObject[] = [\n  {\n    title: t('Alerts'),\n    fields: [fields.subscribeByDefault],\n  },\n\n  {\n    title: t('Workflow Notifications'),\n    fields: [fields.workflowNotifications],\n  },\n\n  {\n    title: t('Email Routing'),\n    fields: [],\n  },\n\n  {\n    title: t('Weekly Reports'),\n    fields: [],\n  },\n\n  {\n    title: t('Deploy Notifications'),\n    fields: [fields.deployNotifications],\n  },\n\n  {\n    title: t('My Activity'),\n    fields: [fields.personalActivityNotifications, fields.selfAssignOnResolve],\n  },\n];\n\nexport default formGroups;\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import {t} from 'app/locale';\n\nexport type FineTuneField = {\n  title: string;\n  description: string;\n  type: 'select';\n  choices?: string[][];\n  defaultValue?: string;\n  defaultFieldName?: string;\n};\n\nexport const ACCOUNT_NOTIFICATION_FIELDS: Record<string, FineTuneField> = {\n  alerts: {\n    title: 'Project Alerts',\n    description: t('Control alerts that you receive per project.'),\n    type: 'select',\n    choices: [\n      ['-1', t('Default')],\n      ['1', t('On')],\n      ['0', t('Off')],\n    ],\n    defaultValue: '-1',\n    defaultFieldName: 'subscribeByDefault',\n  },\n  workflow: {\n    title: 'Workflow Notifications',\n    description: t(\n      'Control workflow notifications, e.g. changes in issue assignment, resolution status, and comments.'\n    ),\n    type: 'select',\n    choices: [\n      ['-1', t('Default')],\n      ['0', t('Always')],\n      ['1', t('Only on issues I subscribe to')],\n      ['2', t('Never')],\n    ],\n    defaultValue: '-1',\n    defaultFieldName: 'workflowNotifications',\n  },\n  deploy: {\n    title: t('Deploy Notifications'),\n    description: t(\n      'Control deploy notifications that include release, environment, and commit overviews.'\n    ),\n    type: 'select',\n    choices: [\n      ['-1', t('Default')],\n      ['2', t('Always')],\n      ['3', t('Only on deploys with my commits')],\n      ['4', t('Never')],\n    ],\n    defaultValue: '-1',\n    defaultFieldName: 'deployNotifications',\n  },\n  reports: {\n    title: t('Weekly Reports'),\n    description: t(\n      \"Reports contain a summary of what's happened within the organization.\"\n    ),\n    type: 'select',\n    // API only saves organizations that have this disabled, so we should default to \"On\"\n    defaultValue: '1',\n    choices: [\n      ['1', t('On')],\n      ['0', t('Off')],\n    ],\n    defaultFieldName: 'weeklyReports',\n  },\n\n  email: {\n    title: t('Email Routing'),\n    description: t(\n      'On a per project basis, route emails to an alternative email address.'\n    ),\n    type: 'select',\n    // No choices here because it's going to have dynamic content\n    // Component will create choices\n  },\n};\n","import {t} from 'app/locale';\n\nexport type NotificationSettingField = {\n  name: string;\n  type: 'select';\n  label: string;\n  choices?: string[][];\n  defaultValue?: string;\n  defaultFieldName?: string;\n};\n\nexport const NOTIFICATION_SETTING_FIELDS: Record<string, NotificationSettingField> = {\n  alerts: {\n    name: 'alerts',\n    type: 'select',\n    label: t('Issue Alert Notifications'),\n    choices: [\n      ['always', t('Always')],\n      ['never', t('Never')],\n    ],\n  },\n  deploy: {\n    name: 'deploy',\n    type: 'select',\n    label: t('Deploy Notifications'),\n    choices: [\n      ['always', t('Always')],\n      ['committed_only', t('Only Committed Issues')],\n      ['never', t('Never')],\n    ],\n  },\n  provider: {\n    name: 'provider',\n    type: 'select',\n    label: t('Delivery Method'),\n    choices: [\n      ['email', t('Send to Email')],\n      ['slack', t('Send to Slack')],\n      ['email+slack', t('Send to Email and Slack')],\n    ],\n  },\n  workflow: {\n    name: 'workflow',\n    type: 'select',\n    label: t('Workflow Notifications'),\n    choices: [\n      ['always', t('Always')],\n      ['subscribe_only', t('Only Subscribed Issues')],\n      ['never', t('Never')],\n    ],\n  },\n};\n","import {Organization, Project} from 'app/types';\n\n// Which fine tuning parts are grouped by project\nexport const isGroupedByProject = (type: string): boolean =>\n  ['alerts', 'email', 'workflow'].includes(type);\n\nexport const groupByOrganization = (projects: Project[]) => {\n  return projects.reduce<\n    Record<string, {organization: Organization; projects: Project[]}>\n  >((acc, project) => {\n    const orgSlug = project.organization.slug;\n    if (acc.hasOwnProperty(orgSlug)) {\n      acc[orgSlug].projects.push(project);\n    } else {\n      acc[orgSlug] = {\n        organization: project.organization,\n        projects: [project],\n      };\n    }\n    return acc;\n  }, {});\n};\n\nexport const getFallBackValue = (notificationType: string): string => {\n  switch (notificationType) {\n    case 'alerts':\n      return 'always';\n    case 'deploy':\n      return 'committed_only';\n    case 'workflow':\n      return 'subscribe_only';\n    default:\n      return '';\n  }\n};\n\nexport const providerListToString = (providers: string[]): string => {\n  return providers.sort().join('+');\n};\n\nexport const getChoiceString = (choices: string[][], key: string): string => {\n  if (!choices) {\n    return 'default';\n  }\n  const found = choices.find(row => row[0] === key);\n  if (!found) {\n    throw new Error(`Could not find ${key}`);\n  }\n\n  return found[1];\n};\n\nexport const backfillMissingProvidersWithFallback = (\n  data: {[key: string]: string},\n  providerList: string[],\n  fallbackValue: string\n): {[key: string]: string} => {\n  /**\n   * Transform `data` to include only providers expected in `providerList`.\n   * Everything not in that list is set to \"never\". Missing values will be\n   * backfilled either with a current value from `data` or `fallbackValue` if\n   * none are present.\n   *\n   * For example:\n   * f({}, [\"email\"], \"sometimes\") = {\"email\": \"sometimes\"}\n   *\n   * f({\"email\": \"always\", pagerduty: \"always\"}, [\"email\", \"slack\"], \"sometimes\") =\n   * {\"email\": \"always\", \"slack\": \"always\", \"pagerduty\": \"never\"}\n   */\n  const entries: string[][] = [];\n  let fallback = fallbackValue;\n  for (const [provider, previousValue] of Object.entries(data)) {\n    fallback = previousValue;\n    entries.push([provider, providerList.includes(provider) ? previousValue : 'never']);\n  }\n  for (const provider of providerList) {\n    entries.push([provider, fallback]);\n  }\n  return Object.fromEntries(entries);\n};\n","import React from 'react';\n\nimport AsyncComponent from 'app/components/asyncComponent';\nimport Avatar from 'app/components/avatar';\nimport {t} from 'app/locale';\nimport {Organization, Project} from 'app/types';\nimport withOrganizations from 'app/utils/withOrganizations';\nimport {ACCOUNT_NOTIFICATION_FIELDS} from 'app/views/settings/account/notifications/fields';\nimport {NOTIFICATION_SETTING_FIELDS} from 'app/views/settings/account/notifications/fields2';\nimport {\n  backfillMissingProvidersWithFallback,\n  getChoiceString,\n  getFallBackValue,\n  groupByOrganization,\n  isGroupedByProject,\n  providerListToString,\n} from 'app/views/settings/account/notifications/utils';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport {FieldObject} from 'app/views/settings/components/forms/type';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\ntype Props = {\n  notificationType: string;\n  organizations: Organization[];\n} & AsyncComponent['props'];\n\ntype State = {\n  notificationSettings: {\n    [key: string]: {[key: string]: {[key: string]: {[key: string]: string}}};\n  };\n  projects: Project[];\n} & AsyncComponent['state'];\n\nclass NotificationSettings extends AsyncComponent<Props, State> {\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      notificationSettings: {},\n      projects: [],\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {notificationType} = this.props;\n\n    const query = {type: notificationType};\n    const endpoints: ReturnType<AsyncComponent['getEndpoints']> = [\n      ['notificationSettings', `/users/me/notification-settings/`, {query}],\n    ];\n    if (this.isGroupedByProject()) {\n      endpoints.push(['projects', '/projects/']);\n    }\n    return endpoints;\n  }\n\n  isGroupedByProject() {\n    /** We can infer the parent type by the `notificationType` key. */\n    const {notificationType} = this.props;\n    return isGroupedByProject(notificationType);\n  }\n\n  getParents(): Organization[] | Project[] {\n    /** Use the `notificationType` key to decide which parent objects to use */\n    const {organizations} = this.props;\n    const {projects} = this.state;\n\n    return this.isGroupedByProject() ? projects : organizations;\n  }\n\n  getUserDefaultValues = (): {[key: string]: string} => {\n    /**\n     * Get the mapping of providers to values that describe a user's parent-\n     * independent notification preferences. The data from the API uses the user\n     * ID rather than \"me\" so we assume the first ID is the user's.\n     */\n    const {notificationType} = this.props;\n    const {notificationSettings} = this.state;\n\n    return (\n      Object.values(notificationSettings[notificationType]?.user || {}).pop() || {\n        email: getFallBackValue(notificationType),\n      }\n    );\n  };\n\n  getParentData = (): {[key: string]: string} => {\n    return Object.fromEntries(\n      this.getParents().map(parent => [\n        parent.id,\n        Object.values(this.getParentValues(parent.id))[0],\n      ])\n    );\n  };\n\n  getStateToPutForProvider = changedData => {\n    /**\n     * I don't need to update the provider for EVERY once of the user's projects\n     * and organizations, just the user and parents that have explicit settings.\n     */\n    const {notificationType} = this.props;\n    const {notificationSettings} = this.state;\n\n    const providerList: string[] = changedData.provider.split('+');\n    const fallbackValue = getFallBackValue(notificationType);\n\n    let updatedNotificationSettings;\n    if (Object.keys(notificationSettings).length) {\n      updatedNotificationSettings = {\n        [notificationType]: Object.fromEntries(\n          Object.entries(\n            notificationSettings[notificationType]\n          ).map(([scopeType, scopeTypeData]) => [\n            scopeType,\n            Object.fromEntries(\n              Object.entries(scopeTypeData).map(([scopeId, scopeIdData]) => [\n                scopeId,\n                backfillMissingProvidersWithFallback(\n                  scopeIdData,\n                  providerList,\n                  fallbackValue\n                ),\n              ])\n            ),\n          ])\n        ),\n      };\n    } else {\n      // If the user has no settings, we need to create them.\n      updatedNotificationSettings = {\n        [notificationType]: {\n          user: {\n            me: Object.fromEntries(\n              providerList.map(provider => [provider, fallbackValue])\n            ),\n          },\n        },\n      };\n    }\n\n    this.setState({notificationSettings: updatedNotificationSettings});\n\n    return updatedNotificationSettings;\n  };\n\n  getParentValues = (parentId: string): {[key: string]: string} => {\n    const {notificationType} = this.props;\n    const {notificationSettings} = this.state;\n\n    const parentKey = this.isGroupedByProject() ? 'project' : 'organization';\n\n    return (\n      notificationSettings[notificationType]?.[parentKey]?.[parentId] || {\n        email: 'default',\n      }\n    );\n  };\n\n  getStateToPutForDefault = (changedData: {[key: string]: string}) => {\n    /** This always updates \"user:me\". */\n    const {notificationType} = this.props;\n\n    const newValue = Object.values(changedData)[0];\n    const previousData = this.getUserDefaultValues();\n\n    const notificationSettings = {\n      [notificationType]: {\n        user: {\n          me: Object.fromEntries(\n            Object.keys(previousData).map(provider => [provider, newValue])\n          ),\n        },\n      },\n    };\n\n    this.setState({notificationSettings});\n\n    return notificationSettings;\n  };\n\n  getStateToPutForParent = (changedData: {[key: string]: string}, parentId: string) => {\n    /** Get the diff of the Notification Settings for this parent ID. */\n    const {notificationType} = this.props;\n\n    const parentKey = this.isGroupedByProject() ? 'project' : 'organization';\n    const newValue = Object.values(changedData)[0];\n    const previousData = this.getParentValues(parentId);\n\n    const notificationSettings = {\n      [notificationType]: {\n        [parentKey]: {\n          [parentId]: Object.fromEntries(\n            Object.entries(previousData).map(([provider, _]) => [provider, newValue])\n          ),\n        },\n      },\n    };\n    this.setState({notificationSettings});\n    return notificationSettings;\n  };\n\n  getGroupedParents = (): {[key: string]: Organization[] | Project[]} => {\n    /**\n     * The UI expects projects to be grouped by organization but can also use\n     * this function to make a single group with all organizations.\n     */\n    const {organizations} = this.props;\n    const {projects: stateProjects} = this.state;\n\n    return this.isGroupedByProject()\n      ? Object.fromEntries(\n          Object.values(\n            groupByOrganization(stateProjects)\n          ).map(({organization, projects}) => [`${organization.name} Projects`, projects])\n        )\n      : {organizations};\n  };\n\n  getParentField = (parent: Organization | Project): FieldObject => {\n    const {notificationType} = this.props;\n\n    const defaultFields = NOTIFICATION_SETTING_FIELDS[notificationType];\n    const currentDefault = Object.values(this.getUserDefaultValues())[0];\n\n    return Object.assign({}, defaultFields, {\n      label: (\n        <React.Fragment>\n          <Avatar\n            {...{[this.isGroupedByProject() ? 'project' : 'organization']: parent}}\n          />\n          {parent.slug}\n        </React.Fragment>\n      ),\n      getData: data => this.getStateToPutForParent(data, parent.id),\n      name: parent.id,\n      choices: defaultFields.choices?.concat([\n        [\n          'default',\n          `${getChoiceString(defaultFields.choices, currentDefault)} (${t('default')})`,\n        ],\n      ]),\n      defaultValue: 'default',\n    }) as any;\n  };\n\n  getDefaultSettings = (): [string, FieldObject[]] => {\n    const {notificationType} = this.props;\n\n    const title = this.isGroupedByProject() ? t('All Projects') : t('All Organizations');\n    const fields = [\n      Object.assign(\n        {\n          help: t('This is the default for all projects.'),\n          getData: data => this.getStateToPutForDefault(data),\n        },\n        NOTIFICATION_SETTING_FIELDS[notificationType]\n      ),\n      Object.assign(\n        {\n          help: t('Where personal notifications will be sent.'),\n          getData: data => this.getStateToPutForProvider(data),\n        },\n        NOTIFICATION_SETTING_FIELDS.provider\n      ),\n    ] as FieldObject[];\n    return [title, fields];\n  };\n\n  renderBody() {\n    const {notificationType} = this.props;\n\n    const {title, description} = ACCOUNT_NOTIFICATION_FIELDS[notificationType];\n    const groupedParents = this.getGroupedParents();\n    const userData = this.getUserDefaultValues();\n    const parentData = this.getParentData();\n    const [formTitle, fields] = this.getDefaultSettings();\n\n    return (\n      <React.Fragment>\n        <SettingsPageHeader title={title} />\n        {description && <TextBlock>{description}</TextBlock>}\n        <Form\n          saveOnBlur\n          apiMethod=\"PUT\"\n          apiEndpoint=\"/users/me/notification-settings/\"\n          initialData={{\n            [notificationType]: Object.values(userData)[0],\n            provider: providerListToString(Object.keys(userData)),\n          }}\n        >\n          <JsonForm title={formTitle} fields={fields} />\n        </Form>\n        <Form\n          saveOnBlur\n          apiMethod=\"PUT\"\n          apiEndpoint=\"/users/me/notification-settings/\"\n          initialData={parentData}\n        >\n          {Object.entries(groupedParents).map(([groupTitle, parents]) => (\n            <JsonForm\n              key={groupTitle}\n              title={groupTitle}\n              fields={parents.map(parent => this.getParentField(parent))}\n            />\n          ))}\n        </Form>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withOrganizations(NotificationSettings);\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport Pagination from 'app/components/pagination';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {fields} from 'app/data/forms/accountNotificationSettings';\nimport {t} from 'app/locale';\nimport {Organization, Project, UserEmail} from 'app/types';\nimport withOrganizations from 'app/utils/withOrganizations';\nimport AsyncView from 'app/views/asyncView';\nimport {\n  ACCOUNT_NOTIFICATION_FIELDS,\n  FineTuneField,\n} from 'app/views/settings/account/notifications/fields';\nimport NotificationSettings from 'app/views/settings/account/notifications/notificationSettings';\nimport {\n  groupByOrganization,\n  isGroupedByProject,\n} from 'app/views/settings/account/notifications/utils';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport SelectField from 'app/views/settings/components/forms/selectField';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\nconst PanelBodyLineItem = styled(PanelBody)`\n  font-size: 1.4rem;\n  &:not(:last-child) {\n    border-bottom: 1px solid ${p => p.theme.innerBorder};\n  }\n`;\n\ntype ANBPProps = {\n  projects: Project[];\n  field: FineTuneField;\n};\n\nconst AccountNotificationsByProject = ({projects, field}: ANBPProps) => {\n  const projectsByOrg = groupByOrganization(projects);\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const {title, description, ...fieldConfig} = field;\n\n  // Display as select box in this view regardless of the type specified in the config\n  const data = Object.values(projectsByOrg).map(org => ({\n    name: org.organization.name,\n    projects: org.projects.map(project => ({\n      ...fieldConfig,\n      // `name` key refers to field name\n      // we use project.id because slugs are not unique across orgs\n      name: project.id,\n      label: project.slug,\n    })),\n  }));\n\n  return (\n    <Fragment>\n      {data.map(({name, projects: projectFields}) => (\n        <div key={name}>\n          <PanelHeader>{name}</PanelHeader>\n          {projectFields.map(f => (\n            <PanelBodyLineItem key={f.name}>\n              <SelectField\n                defaultValue={f.defaultValue}\n                name={f.name}\n                choices={f.choices}\n                label={f.label}\n              />\n            </PanelBodyLineItem>\n          ))}\n        </div>\n      ))}\n    </Fragment>\n  );\n};\n\ntype ANBOProps = {\n  organizations: Organization[];\n  field: FineTuneField;\n};\n\nconst AccountNotificationsByOrganization = ({organizations, field}: ANBOProps) => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const {title, description, ...fieldConfig} = field;\n\n  // Display as select box in this view regardless of the type specified in the config\n  const data = organizations.map(org => ({\n    ...fieldConfig,\n    // `name` key refers to field name\n    // we use org.id to remain consistent project.id use (which is required because slugs are not unique across orgs)\n    name: org.id,\n    label: org.slug,\n  }));\n\n  return (\n    <Fragment>\n      {data.map(f => (\n        <PanelBodyLineItem key={f.name}>\n          <SelectField\n            defaultValue={f.defaultValue}\n            name={f.name}\n            choices={f.choices}\n            label={f.label}\n          />\n        </PanelBodyLineItem>\n      ))}\n    </Fragment>\n  );\n};\n\nconst AccountNotificationsByOrganizationContainer = withOrganizations(\n  AccountNotificationsByOrganization\n);\n\ntype Props = AsyncView['props'] &\n  RouteComponentProps<{fineTuneType: string}, {}> & {\n    organizations: Organization[];\n  };\n\ntype State = AsyncView['state'] & {\n  emails: UserEmail[] | null;\n  projects: Project[] | null;\n  notifications: Record<string, any> | null;\n  fineTuneData: Record<string, any> | null;\n};\n\nclass AccountNotificationFineTuning extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {fineTuneType} = this.props.params;\n    const endpoints = [\n      ['notifications', '/users/me/notifications/'],\n      ['fineTuneData', `/users/me/notifications/${fineTuneType}/`],\n    ];\n\n    if (isGroupedByProject(fineTuneType)) {\n      endpoints.push(['projects', '/projects/']);\n    }\n\n    endpoints.push(['emails', '/users/me/emails/']);\n    if (fineTuneType === 'email') {\n      endpoints.push(['emails', '/users/me/emails/']);\n    }\n\n    return endpoints as ReturnType<AsyncView['getEndpoints']>;\n  }\n\n  // Return a sorted list of user's verified emails\n  get emailChoices() {\n    return (\n      this.state.emails\n        ?.filter(({isVerified}) => isVerified)\n        ?.sort((a, b) => {\n          // Sort by primary -> email\n          if (a.isPrimary) {\n            return -1;\n          } else if (b.isPrimary) {\n            return 1;\n          }\n\n          return a.email < b.email ? -1 : 1;\n        }) ?? []\n    );\n  }\n\n  renderBody() {\n    const {params, organizations} = this.props;\n    const {fineTuneType} = params;\n\n    if (\n      ['alerts', 'deploy', 'workflow'].includes(fineTuneType) &&\n      organizations.some(organization =>\n        organization.features.includes('notification-platform')\n      )\n    ) {\n      return <NotificationSettings notificationType={fineTuneType} />;\n    }\n\n    const {notifications, projects, fineTuneData, projectsPageLinks} = this.state;\n\n    const isProject = isGroupedByProject(fineTuneType);\n    const field = ACCOUNT_NOTIFICATION_FIELDS[fineTuneType];\n    const {title, description} = field;\n\n    const [stateKey, url] = isProject ? this.getEndpoints()[2] : [];\n    const hasProjects = !!projects?.length;\n\n    if (fineTuneType === 'email') {\n      // Fetch verified email addresses\n      field.choices = this.emailChoices.map(({email}) => [email, email]);\n    }\n\n    if (!notifications || !fineTuneData) {\n      return null;\n    }\n\n    return (\n      <div>\n        <SettingsPageHeader title={title} />\n        {description && <TextBlock>{description}</TextBlock>}\n\n        {field &&\n          field.defaultFieldName &&\n          // not implemented yet\n          field.defaultFieldName !== 'weeklyReports' && (\n            <Form\n              saveOnBlur\n              apiMethod=\"PUT\"\n              apiEndpoint=\"/users/me/notifications/\"\n              initialData={notifications}\n            >\n              <JsonForm\n                title={`Default ${title}`}\n                fields={[fields[field.defaultFieldName]]}\n              />\n            </Form>\n          )}\n        <Panel>\n          <PanelBody>\n            <PanelHeader hasButtons={isProject}>\n              <Heading>{isProject ? t('Projects') : t('Organizations')}</Heading>\n              <div>\n                {isProject &&\n                  this.renderSearchInput({\n                    placeholder: t('Search Projects'),\n                    url,\n                    stateKey,\n                  })}\n              </div>\n            </PanelHeader>\n\n            <Form\n              saveOnBlur\n              apiMethod=\"PUT\"\n              apiEndpoint={`/users/me/notifications/${fineTuneType}/`}\n              initialData={fineTuneData}\n            >\n              {isProject && hasProjects && (\n                <AccountNotificationsByProject projects={projects!} field={field} />\n              )}\n\n              {isProject && !hasProjects && (\n                <EmptyMessage>{t('No projects found')}</EmptyMessage>\n              )}\n\n              {!isProject && (\n                <AccountNotificationsByOrganizationContainer field={field} />\n              )}\n            </Form>\n          </PanelBody>\n        </Panel>\n\n        {projects && <Pagination pageLinks={projectsPageLinks} {...this.props} />}\n      </div>\n    );\n  }\n}\n\nconst Heading = styled('div')`\n  flex: 1;\n`;\n\nexport default withOrganizations(AccountNotificationFineTuning);\n","import * as React from 'react';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {Scope} from 'app/types';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\nimport FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';\n\nimport {FieldObject, JsonFormObject} from './type';\n\ntype DefaultProps = {\n  additionalFieldProps: {[key: string]: any};\n};\n\ntype Props = DefaultProps & {\n  /**\n   * Panel title\n   */\n  title?: React.ReactNode;\n\n  /**\n   * List of fields to render\n   */\n  fields: FieldObject[];\n\n  access?: Set<Scope>;\n  features?: Record<string, any>;\n\n  /**\n   * The name of the field that should be highlighted\n   */\n  highlighted?: string;\n\n  /**\n   * Renders inside of PanelBody at the start\n   */\n  renderHeader?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Renders inside of PanelBody before PanelBody close\n   */\n  renderFooter?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Disables the entire form\n   */\n  disabled?: boolean;\n};\n\nexport default class FormPanel extends React.Component<Props> {\n  static defaultProps: DefaultProps = {\n    additionalFieldProps: {},\n  };\n\n  render() {\n    const {\n      title,\n      fields,\n      access,\n      disabled,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      ...otherProps\n    } = this.props;\n\n    return (\n      <Panel id={typeof title === 'string' ? sanitizeQuerySelector(title) : undefined}>\n        {title && <PanelHeader>{title}</PanelHeader>}\n        <PanelBody>\n          {typeof renderHeader === 'function' && renderHeader({title, fields})}\n\n          {fields.map(field => {\n            if (typeof field === 'function') {\n              return field();\n            }\n\n            const {defaultValue: _, ...fieldWithoutDefaultValue} = field;\n\n            // Allow the form panel disabled prop to override the fields\n            // disabled prop, with fallback to the fields disabled state.\n            if (disabled === true) {\n              fieldWithoutDefaultValue.disabled = true;\n              fieldWithoutDefaultValue.disabledReason = undefined;\n            }\n\n            return (\n              <FieldFromConfig\n                access={access}\n                disabled={disabled}\n                key={field.name}\n                {...otherProps}\n                {...additionalFieldProps}\n                field={fieldWithoutDefaultValue}\n                highlighted={this.props.highlighted === `#${field.name}`}\n              />\n            );\n          })}\n          {typeof renderFooter === 'function' && renderFooter({title, fields})}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n","import * as React from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport * as Sentry from '@sentry/react';\nimport scrollToElement from 'scroll-to-element';\n\nimport {defined} from 'app/utils';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\n\nimport FormPanel from './formPanel';\nimport {Field, FieldObject, JsonFormObject} from './type';\n\ntype Props = {\n  /**\n   * Fields that are grouped by \"section\"\n   */\n  forms?: JsonFormObject[];\n\n  /**\n   * If `forms` is not defined, `title` + `fields` must be required.\n   * Allows more fine grain control of title/fields\n   */\n  fields?: FieldObject[];\n\n  additionalFieldProps?: {[key: string]: any};\n} & WithRouterProps &\n  Omit<\n    React.ComponentProps<typeof FormPanel>,\n    'highlighted' | 'fields' | 'additionalFieldProps'\n  >;\n\ntype State = {\n  // Field name that should be highlighted\n  highlighted?: string;\n};\n\nclass JsonForm extends React.Component<Props, State> {\n  state: State = {\n    // location.hash is optional because of tests.\n    highlighted: this.props.location?.hash,\n  };\n\n  componentDidMount() {\n    this.scrollToHash();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (this.props.location.hash !== nextProps.location.hash) {\n      const hash = nextProps.location.hash;\n      this.scrollToHash(hash);\n      this.setState({highlighted: hash});\n    }\n  }\n\n  scrollToHash(toHash?: string): void {\n    // location.hash is optional because of tests.\n    const hash = toHash || this.props.location?.hash;\n\n    if (!hash) {\n      return;\n    }\n\n    // Push onto callback queue so it runs after the DOM is updated,\n    // this is required when navigating from a different page so that\n    // the element is rendered on the page before trying to getElementById.\n    try {\n      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {\n        align: 'middle',\n        offset: -100,\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n  }\n\n  shouldDisplayForm(fields: FieldObject[]) {\n    const fieldsWithVisibleProp = fields.filter(\n      field => typeof field !== 'function' && defined(field?.visible)\n    ) as Array<Omit<Field, 'visible'> & Required<Pick<Field, 'visible'>>>;\n\n    if (fields.length === fieldsWithVisibleProp.length) {\n      const {additionalFieldProps, ...props} = this.props;\n\n      const areAllFieldsHidden = fieldsWithVisibleProp.every(field => {\n        if (typeof field.visible === 'function') {\n          return !field.visible({...props, ...additionalFieldProps});\n        }\n        return !field.visible;\n      });\n\n      return !areAllFieldsHidden;\n    }\n\n    return true;\n  }\n\n  renderForm({\n    fields,\n    formPanelProps,\n    title,\n  }: {\n    fields: FieldObject[];\n    formPanelProps: Pick<\n      Props,\n      | 'access'\n      | 'disabled'\n      | 'features'\n      | 'additionalFieldProps'\n      | 'renderFooter'\n      | 'renderHeader'\n    > &\n      Pick<State, 'highlighted'>;\n    title?: React.ReactNode;\n  }) {\n    const shouldDisplayForm = this.shouldDisplayForm(fields);\n\n    if (\n      !shouldDisplayForm &&\n      !formPanelProps?.renderFooter &&\n      !formPanelProps?.renderHeader\n    ) {\n      return null;\n    }\n\n    return <FormPanel title={title} fields={fields} {...formPanelProps} />;\n  }\n\n  render() {\n    const {\n      access,\n      fields,\n      title,\n      forms,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      location: _location,\n      ...otherProps\n    } = this.props;\n\n    const formPanelProps = {\n      access,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      highlighted: this.state.highlighted,\n    };\n\n    return (\n      <div {...otherProps}>\n        {typeof forms !== 'undefined' &&\n          forms.map((formGroup, i) => (\n            <React.Fragment key={i}>\n              {this.renderForm({formPanelProps, ...formGroup})}\n            </React.Fragment>\n          ))}\n        {typeof forms === 'undefined' &&\n          typeof fields !== 'undefined' &&\n          this.renderForm({fields, formPanelProps, title})}\n      </div>\n    );\n  }\n}\n\nexport default withRouter(JsonForm);\n"],"sourceRoot":""}