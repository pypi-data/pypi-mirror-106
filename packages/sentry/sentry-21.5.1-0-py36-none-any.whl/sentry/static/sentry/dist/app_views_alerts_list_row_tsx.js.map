{"version":3,"sources":["webpack:///./app/views/alerts/list/sparkLine.tsx","webpack:///./app/views/alerts/list/row.tsx","webpack:///./app/views/alerts/list/styles.tsx","webpack:///./app/views/alerts/rules/details/constants.tsx"],"names":["Sparklines","React","SparklinesLine","SparkLine","this","props","className","error","eventStats","SparklineError","SparkLinePlaceholder","data","map","value","Array","isArray","length","count","fallback","data-test-id","width","height","style","stroke","theme","fill","strokeWidth","StyledSparkLine","Placeholder","makeRuleDetailsQuery","incident","timeWindowMillis","alertRule","timeWindow","minRange","API_INTERVAL_POINTS_MIN","maxRange","API_INTERVAL_POINTS_LIMIT","now","moment","startDate","dateStarted","endDate","dateClosed","incidentRange","Math","max","diff","range","min","halfRange","start","getUtcDateString","subtract","end","add","AlertListRow","memoize","slug","projects","find","project","getIncidentMetricPreset","undefined","orgId","filteredStatus","identifier","renderBody","date","CreatedResolvedTime","status","isResolved","IncidentStatus","isWarning","color","text","t","title","tct","StatusIndicator","projectsLoaded","organization","state","stats","started","duration","Date","as","alertLink","isIssueAlert","features","includes","pathname","alertDetailsLink","query","alert","IncidentPanelItem","Title","renderStatusIndicator","IncidentLink","to","id","ErrorLoadingStatsIcon","ProjectBadge","avatarSize","getProject","renderTimeSince","seconds","getDynamicText","fixed","AsyncComponent","overflowEllipsis","IdBadge","p","Link","space","PanelItem","fontSizeMedium","TableLayout","TitleAndSparkLine","TIME_OPTIONS","label","TimePeriod","TIME_WINDOWS","TimeWindow"],"mappings":"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","file":"app_views_alerts_list_row_tsx.e9a83cf6cd2cecc38c4b.js","sourcesContent":["import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport Placeholder from 'app/components/placeholder';\nimport theme from 'app/utils/theme';\nimport {IncidentStats} from 'app/views/alerts/types';\n\n// Height of sparkline\nconst SPARKLINE_HEIGHT = 38;\n\ntype Props = {\n  className?: string;\n  eventStats: IncidentStats['eventStats'];\n  error?: React.ReactNode;\n};\n\nconst Sparklines = React.lazy(() => import('app/components/sparklines'));\nconst SparklinesLine = React.lazy(() => import('app/components/sparklines/line'));\n\nclass SparkLine extends React.Component<Props> {\n  render() {\n    const {className, error, eventStats} = this.props;\n\n    if (error) {\n      return <SparklineError error={error} />;\n    }\n\n    if (!eventStats) {\n      return <SparkLinePlaceholder />;\n    }\n\n    const data = eventStats.data.map(([, value]) =>\n      value && Array.isArray(value) && value.length ? value[0].count || 0 : 0\n    );\n\n    return (\n      <React.Suspense fallback={<SparkLinePlaceholder />}>\n        <div data-test-id=\"incident-sparkline\" className={className}>\n          <Sparklines data={data} width={100} height={32}>\n            <SparklinesLine\n              style={{stroke: theme.gray300, fill: 'none', strokeWidth: 2}}\n            />\n          </Sparklines>\n        </div>\n      </React.Suspense>\n    );\n  }\n}\n\nconst StyledSparkLine = styled(SparkLine)`\n  flex-shrink: 0;\n  width: 100%;\n  height: ${SPARKLINE_HEIGHT}px;\n`;\n\nconst SparkLinePlaceholder = styled(Placeholder)`\n  height: ${SPARKLINE_HEIGHT}px;\n`;\n\nconst SparklineError = styled(SparkLinePlaceholder)`\n  align-items: center;\n  line-height: 1;\n`;\n\nexport default StyledSparkLine;\n","import styled from '@emotion/styled';\nimport memoize from 'lodash/memoize';\nimport moment from 'moment';\n\nimport AsyncComponent from 'app/components/asyncComponent';\nimport Duration from 'app/components/duration';\nimport ErrorBoundary from 'app/components/errorBoundary';\nimport IdBadge from 'app/components/idBadge';\nimport Link from 'app/components/links/link';\nimport {PanelItem} from 'app/components/panels';\nimport TimeSince from 'app/components/timeSince';\nimport Tooltip from 'app/components/tooltip';\nimport {IconWarning} from 'app/icons';\nimport {t, tct} from 'app/locale';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport space from 'app/styles/space';\nimport {Organization, Project} from 'app/types';\nimport {getUtcDateString} from 'app/utils/dates';\nimport getDynamicText from 'app/utils/getDynamicText';\nimport theme from 'app/utils/theme';\nimport {alertDetailsLink} from 'app/views/alerts/details';\n\nimport {\n  API_INTERVAL_POINTS_LIMIT,\n  API_INTERVAL_POINTS_MIN,\n} from '../rules/details/constants';\nimport {Incident, IncidentStats, IncidentStatus} from '../types';\nimport {getIncidentMetricPreset, isIssueAlert} from '../utils';\n\nimport SparkLine from './sparkLine';\nimport {TableLayout, TitleAndSparkLine} from './styles';\n\n/**\n * Retrieve the start/end for showing the graph of the metric\n * Will show at least 150 and no more than 10,000 data points\n */\nexport const makeRuleDetailsQuery = (\n  incident: Incident\n): {start: string; end: string} => {\n  const {timeWindow} = incident.alertRule;\n  const timeWindowMillis = timeWindow * 60 * 1000;\n  const minRange = timeWindowMillis * API_INTERVAL_POINTS_MIN;\n  const maxRange = timeWindowMillis * API_INTERVAL_POINTS_LIMIT;\n  const now = moment.utc();\n  const startDate = moment.utc(incident.dateStarted);\n  // make a copy of now since we will modify endDate and use now for comparing\n  const endDate = incident.dateClosed ? moment.utc(incident.dateClosed) : moment(now);\n  const incidentRange = Math.max(endDate.diff(startDate), 3 * timeWindowMillis);\n  const range = Math.min(maxRange, Math.max(minRange, incidentRange));\n  const halfRange = moment.duration(range / 2);\n\n  return {\n    start: getUtcDateString(startDate.subtract(halfRange)),\n    end: getUtcDateString(moment.min(endDate.add(halfRange), now)),\n  };\n};\n\ntype Props = {\n  incident: Incident;\n  projects: Project[];\n  projectsLoaded: boolean;\n  orgId: string;\n  filteredStatus: 'open' | 'closed';\n  organization: Organization;\n} & AsyncComponent['props'];\n\ntype State = {\n  stats: IncidentStats;\n} & AsyncComponent['state'];\n\nclass AlertListRow extends AsyncComponent<Props, State> {\n  get metricPreset() {\n    const {incident} = this.props;\n    return incident ? getIncidentMetricPreset(incident) : undefined;\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {orgId, incident, filteredStatus} = this.props;\n\n    if (filteredStatus === 'open') {\n      return [\n        ['stats', `/organizations/${orgId}/incidents/${incident.identifier}/stats/`],\n      ];\n    }\n\n    return [];\n  }\n\n  /**\n   * Memoized function to find a project from a list of projects\n   */\n  getProject = memoize((slug: string, projects: Project[]) =>\n    projects.find(project => project.slug === slug)\n  );\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderError() {\n    return this.renderBody();\n  }\n\n  renderTimeSince(date: string) {\n    return (\n      <CreatedResolvedTime>\n        <TimeSince date={date} />\n      </CreatedResolvedTime>\n    );\n  }\n\n  renderStatusIndicator() {\n    const {status} = this.props.incident;\n    const isResolved = status === IncidentStatus.CLOSED;\n    const isWarning = status === IncidentStatus.WARNING;\n\n    const color = isResolved ? theme.gray200 : isWarning ? theme.orange300 : theme.red200;\n    const text = isResolved ? t('Resolved') : isWarning ? t('Warning') : t('Critical');\n\n    return (\n      <Tooltip title={tct('Status: [text]', {text})}>\n        <StatusIndicator color={color} />\n      </Tooltip>\n    );\n  }\n\n  renderBody() {\n    const {\n      incident,\n      orgId,\n      projectsLoaded,\n      projects,\n      filteredStatus,\n      organization,\n    } = this.props;\n    const {error, stats} = this.state;\n    const started = moment(incident.dateStarted);\n    const duration = moment\n      .duration(moment(incident.dateClosed || new Date()).diff(started))\n      .as('seconds');\n    const slug = incident.projects[0];\n\n    const hasRedesign =\n      !isIssueAlert(incident.alertRule) &&\n      organization.features.includes('alert-details-redesign');\n\n    const alertLink = hasRedesign\n      ? {\n          pathname: alertDetailsLink(organization, incident),\n          query: {alert: incident.identifier},\n        }\n      : {\n          pathname: `/organizations/${orgId}/alerts/${incident.identifier}/`,\n        };\n\n    return (\n      <ErrorBoundary>\n        <IncidentPanelItem>\n          <TableLayout status={filteredStatus}>\n            <TitleAndSparkLine status={filteredStatus}>\n              <Title>\n                {this.renderStatusIndicator()}\n                <IncidentLink to={alertLink}>Alert #{incident.id}</IncidentLink>\n                {incident.title}\n              </Title>\n\n              {filteredStatus === 'open' && (\n                <SparkLine\n                  error={error && <ErrorLoadingStatsIcon />}\n                  eventStats={stats?.eventStats}\n                />\n              )}\n            </TitleAndSparkLine>\n\n            <ProjectBadge\n              avatarSize={18}\n              project={!projectsLoaded ? {slug} : this.getProject(slug, projects)}\n            />\n\n            {this.renderTimeSince(incident.dateStarted)}\n\n            {filteredStatus === 'closed' && (\n              <Duration seconds={getDynamicText({value: duration, fixed: 1200})} />\n            )}\n\n            {filteredStatus === 'closed' &&\n              incident.dateClosed &&\n              this.renderTimeSince(incident.dateClosed)}\n          </TableLayout>\n        </IncidentPanelItem>\n      </ErrorBoundary>\n    );\n  }\n}\n\nfunction ErrorLoadingStatsIcon() {\n  return (\n    <Tooltip title={t('Error loading alert stats')}>\n      <IconWarning />\n    </Tooltip>\n  );\n}\n\nconst CreatedResolvedTime = styled('div')`\n  ${overflowEllipsis}\n  line-height: 1.4;\n  display: flex;\n  align-items: center;\n`;\n\nconst ProjectBadge = styled(IdBadge)`\n  flex-shrink: 0;\n`;\n\nconst StatusIndicator = styled('div')<{color: string}>`\n  width: 10px;\n  height: 12px;\n  background: ${p => p.color};\n  display: inline-block;\n  border-top-right-radius: 40%;\n  border-bottom-right-radius: 40%;\n  margin-bottom: -1px;\n`;\n\nconst Title = styled('span')`\n  ${overflowEllipsis}\n`;\n\nconst IncidentLink = styled(Link)`\n  padding: 0 ${space(1)};\n`;\n\nconst IncidentPanelItem = styled(PanelItem)`\n  font-size: ${p => p.theme.fontSizeMedium};\n  padding: ${space(1.5)} ${space(2)} ${space(1.5)} 0;\n`;\n\nexport default AlertListRow;\n","import styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\n\nconst TableLayout = styled('div')<{status: 'open' | 'closed'}>`\n  display: grid;\n  grid-template-columns: ${p =>\n    p.status === 'open' ? '4fr 1fr 2fr' : '3fr 2fr 2fr 1fr 2fr'};\n  grid-column-gap: ${space(1.5)};\n  width: 100%;\n  align-items: center;\n`;\n\nconst TitleAndSparkLine = styled('div')<{status: 'open' | 'closed'}>`\n  display: ${p => (p.status === 'open' ? 'grid' : 'flex')};\n  grid-gap: ${space(1)};\n  grid-template-columns: auto 120px;\n  align-items: center;\n  padding-right: ${space(2)};\n  overflow: hidden;\n`;\n\nexport {TableLayout, TitleAndSparkLine};\n","import * as React from 'react';\n\nimport {t} from 'app/locale';\nimport {SelectValue} from 'app/types';\nimport {TimePeriod, TimeWindow} from 'app/views/settings/incidentRules/types';\n\nexport const TIME_OPTIONS: SelectValue<string>[] = [\n  {label: t('Last 6 hours'), value: TimePeriod.SIX_HOURS},\n  {label: t('Last 24 hours'), value: TimePeriod.ONE_DAY},\n  {label: t('Last 3 days'), value: TimePeriod.THREE_DAYS},\n  {label: t('Last 7 days'), value: TimePeriod.SEVEN_DAYS},\n];\n\nexport const TIME_WINDOWS = {\n  [TimePeriod.SIX_HOURS]: TimeWindow.ONE_HOUR * 6 * 60 * 1000,\n  [TimePeriod.ONE_DAY]: TimeWindow.ONE_DAY * 60 * 1000,\n  [TimePeriod.THREE_DAYS]: TimeWindow.ONE_DAY * 3 * 60 * 1000,\n  [TimePeriod.SEVEN_DAYS]: TimeWindow.ONE_DAY * 7 * 60 * 1000,\n};\n\nexport const API_INTERVAL_POINTS_LIMIT = 10000;\nexport const API_INTERVAL_POINTS_MIN = 150;\n\nexport type TimePeriodType = {\n  start: string;\n  end: string;\n  period: string;\n  label: string;\n  display: React.ReactNode;\n  custom?: boolean;\n};\n"],"sourceRoot":""}