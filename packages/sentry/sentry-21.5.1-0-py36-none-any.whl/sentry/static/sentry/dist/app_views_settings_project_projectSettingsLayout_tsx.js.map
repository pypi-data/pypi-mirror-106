{"version":3,"sources":["webpack:///./app/actionCreators/teams.tsx","webpack:///./app/components/projects/missingProjectMembership.tsx","webpack:///./app/views/settings/project/appStoreConnectContext.tsx","webpack:///./app/views/projects/projectContext.tsx","webpack:///./app/views/settings/project/projectSettingsNavigation.tsx","webpack:///./app/views/settings/project/projectSettingsLayout.tsx"],"names":["doCallback","params","name","args","callIfFunction","fetchTeamDetails","api","options","TeamActions","teamId","request","orgId","success","data","error","updateTeamSuccess","updateTeam","endpoint","method","joinTeam","memberId","id","uniqueId","leaveTeam","createTeam","team","requestPromise","then","addSuccessMessage","tct","slug","organization","err","addErrorMessage","removeTeam","MissingProjectMembership","props","teamObj","value","setState","label","DisabledLabel","t","projectSlug","project","projects","find","p","state","loading","teamSlug","this","features","TeamStore","has","busy","isPending","disabled","priority","type","onClick","bind","pending","teams","forEach","push","Set","teamAccess","getTeamsForAccess","map","getPendingTeamOption","StyledPanel","length","icon","size","title","description","action","Field","StyledSelectControl","placeholder","onChange","handleChangeTeam","renderJoinTeam","Component","Panel","space","SelectControl","withApi","AppStoreConnectContext","createContext","undefined","Provider","withProject","children","orgSlug","useState","appStoreConnectValidationData","setAppStoreConnectValidationData","getAppStoreConnectSymbolSourceId","symbolSources","JSON","parse","symbolSouce","appStoreConnectSymbolSourceId","response","useEffect","fetchAppStoreConnectValidationData","Consumer","ErrorTypes","ProjectContext","createReactClass","displayName","childContextTypes","SentryTypes","mixins","Reflux","MemberListStore","ProjectsStore","getInitialState","errorType","memberList","getChildContext","componentWillMount","fetchData","componentWillReceiveProps","nextProps","projectId","skipReload","remountComponent","componentDidUpdate","prevProps","prevState","docTitle","docTitleRef","forceUpdate","getTitle","onProjectChange","projectIds","identifyProject","activeProject","hasAccess","setActiveProject","projectRequest","UNKNOWN","fetchOrgMembers","isMember","MISSING_MEMBERSHIP","PROJECT_NOT_FOUND","renderBody","className","style","margin","ErrorWrapper","onRetry","render","ref","withOrganization","withProjects","ProjectSettingsNavigation","appStoreConnectContext","useContext","debugFilesNeedsReview","Object","keys","some","key","navigationObjects","getConfiguration","access","ProjectSettingsLayout","routes","renderNavigation","React"],"mappings":"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","file":"app_views_settings_project_projectSettingsLayout_tsx.094cb0462c256706ce44.js","sourcesContent":["import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport TeamActions from 'app/actions/teamActions';\nimport {Client} from 'app/api';\nimport {tct} from 'app/locale';\nimport {Team} from 'app/types';\nimport {callIfFunction} from 'app/utils/callIfFunction';\nimport {uniqueId} from 'app/utils/guid';\n\ntype CallbackOptions = {\n  success?: Function;\n  error?: Function;\n};\n\nconst doCallback = (\n  params: CallbackOptions = {},\n  name: keyof CallbackOptions,\n  ...args: any[]\n) => {\n  callIfFunction(params[name], ...args);\n};\n\n/**\n * Note these are both slugs\n */\ntype OrgSlug = {orgId: string};\ntype OrgAndTeamSlug = OrgSlug & {teamId: string};\n\ntype TeamData = {data: Team};\n\n/**\n * This is the actual internal id, not username or email\n */\ntype MemberId = {memberId: string};\n\n// Fetch teams for org\nexport function fetchTeams(api: Client, params: OrgSlug, options: CallbackOptions) {\n  TeamActions.fetchAll(params.orgId);\n  return api.request(`/teams/${params.orgId}/`, {\n    success: data => {\n      TeamActions.fetchAllSuccess(params.orgId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchAllError(params.orgId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function fetchTeamDetails(\n  api: Client,\n  params: OrgAndTeamSlug,\n  options?: CallbackOptions\n) {\n  TeamActions.fetchDetails(params.teamId);\n  return api.request(`/teams/${params.orgId}/${params.teamId}/`, {\n    success: data => {\n      TeamActions.fetchDetailsSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchDetailsError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function updateTeamSuccess(teamId: OrgAndTeamSlug['teamId'], data: Team) {\n  TeamActions.updateSuccess(teamId, data);\n}\n\nexport function updateTeam(\n  api: Client,\n  params: OrgAndTeamSlug & TeamData,\n  options: CallbackOptions\n) {\n  const endpoint = `/teams/${params.orgId}/${params.teamId}/`;\n  TeamActions.update(params.teamId, params.data);\n\n  return api.request(endpoint, {\n    method: 'PUT',\n    data: params.data,\n    success: data => {\n      updateTeamSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function joinTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId ?? 'me'\n  }/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'POST',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function leaveTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId || 'me'\n  }/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'DELETE',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function createTeam(api: Client, team: Pick<Team, 'slug'>, params: OrgSlug) {\n  TeamActions.createTeam(team);\n\n  return api\n    .requestPromise(`/organizations/${params.orgId}/teams/`, {\n      method: 'POST',\n      data: team,\n    })\n    .then(\n      data => {\n        TeamActions.createTeamSuccess(data);\n        addSuccessMessage(\n          tct('[team] has been added to the [organization] organization', {\n            team: `#${data.slug}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.createTeamError(team.slug, err);\n        addErrorMessage(\n          tct('Unable to create [team] in the [organization] organization', {\n            team: `#${team.slug}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n\nexport function removeTeam(api: Client, params: OrgAndTeamSlug) {\n  TeamActions.removeTeam(params.teamId);\n\n  return api\n    .requestPromise(`/teams/${params.orgId}/${params.teamId}/`, {\n      method: 'DELETE',\n    })\n    .then(\n      data => {\n        TeamActions.removeTeamSuccess(params.teamId, data);\n        addSuccessMessage(\n          tct('[team] has been removed from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.removeTeamError(params.teamId, err);\n        addErrorMessage(\n          tct('Unable to remove [team] from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {joinTeam} from 'app/actionCreators/teams';\nimport {Client} from 'app/api';\nimport Button from 'app/components/button';\nimport SelectControl from 'app/components/forms/selectControl';\nimport {Panel} from 'app/components/panels';\nimport {IconFlag} from 'app/icons';\nimport {t} from 'app/locale';\nimport TeamStore from 'app/stores/teamStore';\nimport space from 'app/styles/space';\nimport {Organization, Project} from 'app/types';\nimport withApi from 'app/utils/withApi';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\n\ntype SelectOption = Record<'value' | 'label', string>;\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n  projectSlug?: string;\n};\n\ntype State = {\n  loading: boolean;\n  error: boolean;\n  project?: Project;\n  team: string | null;\n};\n\nclass MissingProjectMembership extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    const {organization, projectSlug} = this.props;\n    const project = organization.projects?.find(p => p.slug === projectSlug);\n\n    this.state = {\n      loading: false,\n      error: false,\n      project,\n      team: '',\n    };\n  }\n\n  joinTeam(teamSlug: string) {\n    this.setState({\n      loading: true,\n    });\n\n    joinTeam(\n      this.props.api,\n      {\n        orgId: this.props.organization.slug,\n        teamId: teamSlug,\n      },\n      {\n        success: () => {\n          this.setState({\n            loading: false,\n            error: false,\n          });\n          addSuccessMessage(t('Request to join team sent.'));\n        },\n        error: () => {\n          this.setState({\n            loading: false,\n            error: true,\n          });\n          addErrorMessage(t('There was an error while trying to request access.'));\n        },\n      }\n    );\n  }\n\n  renderJoinTeam(teamSlug: string, features: Set<string>) {\n    const team = TeamStore.getBySlug(teamSlug);\n\n    if (!team) {\n      return null;\n    }\n    if (this.state.loading) {\n      if (features.has('open-membership')) {\n        return <Button busy>{t('Join Team')}</Button>;\n      }\n      return <Button busy>{t('Request Access')}</Button>;\n    } else if (team?.isPending) {\n      return <Button disabled>{t('Request Pending')}</Button>;\n    } else if (features.has('open-membership')) {\n      return (\n        <Button\n          priority=\"primary\"\n          type=\"button\"\n          onClick={this.joinTeam.bind(this, teamSlug)}\n        >\n          {t('Join Team')}\n        </Button>\n      );\n    }\n    return (\n      <Button\n        priority=\"primary\"\n        type=\"button\"\n        onClick={this.joinTeam.bind(this, teamSlug)}\n      >\n        {t('Request Access')}\n      </Button>\n    );\n  }\n\n  getTeamsForAccess() {\n    const request: string[] = [];\n    const pending: string[] = [];\n    const teams = this.state.project?.teams ?? [];\n    teams.forEach(({slug}) => {\n      const team = TeamStore.getBySlug(slug);\n      if (!team) {\n        return;\n      }\n      team.isPending ? pending.push(team.slug) : request.push(team.slug);\n    });\n\n    return [request, pending];\n  }\n\n  handleChangeTeam = (teamObj: SelectOption | null) => {\n    const team = teamObj ? teamObj.value : null;\n    this.setState({team});\n  };\n\n  getPendingTeamOption = (team: string) => {\n    return {\n      value: team,\n      label: <DisabledLabel>{t(`#${team}`)}</DisabledLabel>,\n    };\n  };\n\n  render() {\n    const {organization} = this.props;\n    const teamSlug = this.state.team;\n    const teams = this.state.project?.teams ?? [];\n    const features = new Set(organization.features);\n\n    const teamAccess = [\n      {\n        label: t('Request Access'),\n        options: this.getTeamsForAccess()[0].map(request => ({\n          value: request,\n          label: t(`#${request}`),\n        })),\n      },\n      {\n        label: t('Pending Requests'),\n        options: this.getTeamsForAccess()[1].map(pending =>\n          this.getPendingTeamOption(pending)\n        ),\n      },\n    ];\n\n    return (\n      <StyledPanel>\n        {!teams.length ? (\n          <EmptyMessage icon={<IconFlag size=\"xl\" />}>\n            {t(\n              'No teams have access to this project yet. Ask an admin to add your team to this project.'\n            )}\n          </EmptyMessage>\n        ) : (\n          <EmptyMessage\n            icon={<IconFlag size=\"xl\" />}\n            title={t(\"You're not a member of this project.\")}\n            description={t(\n              `You'll need to join a team with access before you can view this data.`\n            )}\n            action={\n              <Field>\n                <StyledSelectControl\n                  name=\"select\"\n                  placeholder={t('Select a Team')}\n                  options={teamAccess}\n                  onChange={this.handleChangeTeam}\n                />\n                {teamSlug ? (\n                  this.renderJoinTeam(teamSlug, features)\n                ) : (\n                  <Button disabled>{t('Select a Team')}</Button>\n                )}\n              </Field>\n            }\n          />\n        )}\n      </StyledPanel>\n    );\n  }\n}\n\nconst StyledPanel = styled(Panel)`\n  margin: ${space(2)} 0;\n`;\n\nconst Field = styled('div')`\n  display: grid;\n  grid-auto-flow: column;\n  gap: ${space(2)};\n  text-align: left;\n`;\n\nconst StyledSelectControl = styled(SelectControl)`\n  width: 250px;\n`;\n\nconst DisabledLabel = styled('div')`\n  display: flex;\n  opacity: 0.5;\n  overflow: hidden;\n`;\n\nexport {MissingProjectMembership};\n\nexport default withApi(MissingProjectMembership);\n","import {createContext, useEffect, useState} from 'react';\n\nimport {Client} from 'app/api';\nimport {Organization, Project} from 'app/types';\nimport {AppStoreConnectValidationData} from 'app/types/debugFiles';\nimport withApi from 'app/utils/withApi';\nimport withProject from 'app/utils/withProject';\n\nconst AppStoreConnectContext = createContext<AppStoreConnectValidationData | undefined>(\n  undefined\n);\n\ntype ProviderProps = {\n  children: React.ReactNode;\n  project: Project;\n  orgSlug: Organization['slug'];\n  api: Client;\n};\n\nconst Provider = withApi(\n  withProject(({api, children, project, orgSlug}: ProviderProps) => {\n    const [appStoreConnectValidationData, setAppStoreConnectValidationData] = useState<\n      AppStoreConnectValidationData | undefined\n    >();\n\n    useEffect(() => {\n      fetchAppStoreConnectValidationData();\n    }, [project]);\n\n    function getAppStoreConnectSymbolSourceId() {\n      return (project.symbolSources ? JSON.parse(project.symbolSources) : []).find(\n        symbolSouce => symbolSouce.type === 'appStoreConnect'\n      )?.id;\n    }\n\n    async function fetchAppStoreConnectValidationData() {\n      const appStoreConnectSymbolSourceId = getAppStoreConnectSymbolSourceId();\n\n      if (!appStoreConnectSymbolSourceId) {\n        return;\n      }\n\n      try {\n        const response: AppStoreConnectValidationData = await api.requestPromise(\n          `/projects/${orgSlug}/${project.slug}/appstoreconnect/validate/${appStoreConnectSymbolSourceId}/`\n        );\n        setAppStoreConnectValidationData(response);\n      } catch {\n        // do nothing\n      }\n    }\n\n    return (\n      <AppStoreConnectContext.Provider value={appStoreConnectValidationData}>\n        {children}\n      </AppStoreConnectContext.Provider>\n    );\n  })\n);\n\nconst Consumer = AppStoreConnectContext.Consumer;\n\nexport {Provider, Consumer};\n\nexport default AppStoreConnectContext;\n","import DocumentTitle from 'react-document-title';\nimport styled from '@emotion/styled';\nimport createReactClass from 'create-react-class';\nimport Reflux from 'reflux';\n\nimport {fetchOrgMembers} from 'app/actionCreators/members';\nimport {setActiveProject} from 'app/actionCreators/projects';\nimport {Client} from 'app/api';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport MissingProjectMembership from 'app/components/projects/missingProjectMembership';\nimport {t} from 'app/locale';\nimport SentryTypes from 'app/sentryTypes';\nimport MemberListStore from 'app/stores/memberListStore';\nimport ProjectsStore from 'app/stores/projectsStore';\nimport space from 'app/styles/space';\nimport {Member, Organization, Project} from 'app/types';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\nimport withProjects from 'app/utils/withProjects';\n\nenum ErrorTypes {\n  MISSING_MEMBERSHIP = 'MISSING_MEMBERSHIP',\n  PROJECT_NOT_FOUND = 'PROJECT_NOT_FOUND',\n  UNKNOWN = 'UNKNOWN',\n}\n\ntype Props = {\n  api: Client;\n  /**\n   * If true, this will not change `state.loading` during `fetchData` phase\n   */\n  skipReload?: boolean;\n  organization: Organization;\n  projects: Project[];\n  projectId: string;\n  orgId: string;\n};\n\ntype State = {\n  memberList: Member[];\n  project: Project | null;\n  loading: boolean;\n  error: boolean;\n  errorType: ErrorTypes | null;\n};\n\n/**\n * Higher-order component that sets `project` as a child context\n * value to be accessed by child elements.\n *\n * Additionally delays rendering of children until project XHR has finished\n * and context is populated.\n */\nconst ProjectContext = createReactClass<Props, State>({\n  displayName: 'ProjectContext',\n\n  childContextTypes: {\n    project: SentryTypes.Project,\n  },\n\n  mixins: [\n    Reflux.connect(MemberListStore, 'memberList') as any,\n    Reflux.listenTo(ProjectsStore, 'onProjectChange') as any,\n  ],\n\n  getInitialState() {\n    return {\n      loading: true,\n      error: false,\n      errorType: null,\n      memberList: [],\n      project: null,\n    };\n  },\n\n  getChildContext() {\n    return {\n      project: this.state.project,\n    };\n  },\n\n  componentWillMount() {\n    this.fetchData();\n  },\n\n  componentWillReceiveProps(nextProps: Props) {\n    if (nextProps.projectId === this.props.projectId) {\n      return;\n    }\n\n    if (!nextProps.skipReload) {\n      this.remountComponent();\n    }\n  },\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    if (prevProps.projectId !== this.props.projectId) {\n      this.fetchData();\n    }\n\n    // Project list has changed. Likely indicating that a new project has been\n    // added. Re-fetch project details in case that the new project is the active\n    // project.\n    //\n    // For now, only compare lengths. It is possible that project slugs within\n    // the list could change, but it doesn't seem to be broken anywhere else at\n    // the moment that would require deeper checks.\n    if (prevProps.projects.length !== this.props.projects.length) {\n      this.fetchData();\n    }\n\n    // Call forceUpdate() on <DocumentTitle/> if either project or organization\n    // state has changed. This is because <DocumentTitle/>'s shouldComponentUpdate()\n    // returns false unless props differ; meaning context changes for project/org\n    // do NOT trigger renders for <DocumentTitle/> OR any subchildren. The end result\n    // being that child elements that listen for context changes on project/org will\n    // NOT update (without this hack).\n    // See: https://github.com/gaearon/react-document-title/issues/35\n\n    // intentionally shallow comparing references\n    if (prevState.project !== this.state.project) {\n      if (!this.docTitle) {\n        return;\n      }\n      const docTitle = this.docTitleRef.docTitle;\n      if (docTitle) {\n        docTitle.forceUpdate();\n      }\n    }\n  },\n\n  remountComponent() {\n    this.setState(this.getInitialState!());\n  },\n\n  getTitle() {\n    return this.state.project?.slug ?? 'Sentry';\n  },\n\n  onProjectChange(projectIds: Set<string>) {\n    if (!this.state.project) {\n      return;\n    }\n    if (!projectIds.has(this.state.project.id)) {\n      return;\n    }\n\n    this.setState({\n      project: {...ProjectsStore.getById(this.state.project.id)},\n    });\n  },\n\n  identifyProject() {\n    const {projects, projectId} = this.props;\n    const projectSlug = projectId;\n    return projects.find(({slug}) => slug === projectSlug) || null;\n  },\n\n  async fetchData() {\n    const {orgId, projectId, skipReload} = this.props;\n    // we fetch core access/information from the global organization data\n    const activeProject = this.identifyProject();\n    const hasAccess = activeProject && activeProject.hasAccess;\n\n    this.setState((state: State) => ({\n      // if `skipReload` is true, then don't change loading state\n      loading: skipReload ? state.loading : true,\n      // we bind project initially, but it'll rebind\n      project: activeProject,\n    }));\n\n    if (activeProject && hasAccess) {\n      setActiveProject(null);\n      const projectRequest = this.props.api.requestPromise(\n        `/projects/${orgId}/${projectId}/`\n      );\n\n      try {\n        const project = await projectRequest;\n        this.setState({\n          loading: false,\n          project,\n          error: false,\n          errorType: null,\n        });\n\n        // assuming here that this means the project is considered the active project\n        setActiveProject(project);\n      } catch (error) {\n        this.setState({\n          loading: false,\n          error: false,\n          errorType: ErrorTypes.UNKNOWN,\n        });\n      }\n\n      fetchOrgMembers(this.props.api, orgId, activeProject.id);\n\n      return;\n    }\n\n    // User is not a memberof the active project\n    if (activeProject && !activeProject.isMember) {\n      this.setState({\n        loading: false,\n        error: true,\n        errorType: ErrorTypes.MISSING_MEMBERSHIP,\n      });\n\n      return;\n    }\n\n    // There is no active project. This likely indicates either the project\n    // *does not exist* or the project has not yet been added to the store.\n    // Either way, make a request to check for existence of the project.\n    try {\n      await this.props.api.requestPromise(`/projects/${orgId}/${projectId}/`);\n    } catch (error) {\n      this.setState({\n        loading: false,\n        error: true,\n        errorType: ErrorTypes.PROJECT_NOT_FOUND,\n      });\n    }\n  },\n\n  renderBody() {\n    if (this.state.loading) {\n      return (\n        <div className=\"loading-full-layout\">\n          <LoadingIndicator />\n        </div>\n      );\n    }\n\n    if (!this.state.error) {\n      return this.props.children;\n    }\n\n    switch (this.state.errorType) {\n      case ErrorTypes.PROJECT_NOT_FOUND:\n        // TODO(chrissy): use scale for margin values\n        return (\n          <div className=\"container\">\n            <div className=\"alert alert-block\" style={{margin: '30px 0 10px'}}>\n              {t('The project you were looking for was not found.')}\n            </div>\n          </div>\n        );\n      case ErrorTypes.MISSING_MEMBERSHIP:\n        // TODO(dcramer): add various controls to improve this flow and break it\n        // out into a reusable missing access error component\n        return (\n          <ErrorWrapper>\n            <MissingProjectMembership\n              organization={this.props.organization}\n              projectSlug={this.state.project.slug}\n            />\n          </ErrorWrapper>\n        );\n      default:\n        return <LoadingError onRetry={this.remountComponent} />;\n    }\n  },\n\n  render() {\n    return (\n      <DocumentTitle ref={ref => (this.docTitleRef = ref)} title={this.getTitle()}>\n        {this.renderBody()}\n      </DocumentTitle>\n    );\n  },\n});\n\nexport {ProjectContext};\n\nexport default withApi(withOrganization(withProjects(ProjectContext)));\n\nconst ErrorWrapper = styled('div')`\n  width: 100%;\n  margin: ${space(2)} ${space(4)};\n`;\n","import {useContext} from 'react';\n\nimport {Organization, Project} from 'app/types';\nimport withProject from 'app/utils/withProject';\nimport SettingsNavigation from 'app/views/settings/components/settingsNavigation';\nimport getConfiguration from 'app/views/settings/project/navigationConfiguration';\n\nimport AppStoreConnectContext from './appStoreConnectContext';\n\ntype Props = {\n  organization: Organization;\n  project?: Project;\n};\n\nconst ProjectSettingsNavigation = ({organization, project}: Props) => {\n  const appStoreConnectContext = useContext(AppStoreConnectContext);\n\n  const debugFilesNeedsReview = appStoreConnectContext\n    ? Object.keys(appStoreConnectContext ?? {}).some(key => !appStoreConnectContext[key])\n    : false;\n\n  return (\n    <SettingsNavigation\n      navigationObjects={getConfiguration({project, organization, debugFilesNeedsReview})}\n      access={new Set(organization.access)}\n      features={new Set(organization.features)}\n      organization={organization}\n      project={project}\n    />\n  );\n};\n\nexport default withProject(ProjectSettingsNavigation);\n","import * as React from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {Organization} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\nimport ProjectContext from 'app/views/projects/projectContext';\nimport SettingsLayout from 'app/views/settings/components/settingsLayout';\nimport ProjectSettingsNavigation from 'app/views/settings/project/projectSettingsNavigation';\n\nimport * as AppStoreConnectContext from './appStoreConnectContext';\n\ntype Props = {\n  organization: Organization;\n  children: React.ReactNode;\n} & RouteComponentProps<{orgId: string; projectId: string}, {}>;\n\nfunction ProjectSettingsLayout({\n  params,\n  organization,\n  children,\n  routes,\n  ...props\n}: Props) {\n  const {orgId, projectId} = params;\n\n  return (\n    <ProjectContext orgId={orgId} projectId={projectId}>\n      <AppStoreConnectContext.Provider orgSlug={orgId}>\n        <SettingsLayout\n          params={params}\n          routes={routes}\n          {...props}\n          renderNavigation={() => (\n            <ProjectSettingsNavigation organization={organization} />\n          )}\n        >\n          {children && React.isValidElement(children)\n            ? React.cloneElement(children, {\n                organization,\n              })\n            : children}\n        </SettingsLayout>\n      </AppStoreConnectContext.Provider>\n    </ProjectContext>\n  );\n}\n\nexport default withOrganization(ProjectSettingsLayout);\n"],"sourceRoot":""}