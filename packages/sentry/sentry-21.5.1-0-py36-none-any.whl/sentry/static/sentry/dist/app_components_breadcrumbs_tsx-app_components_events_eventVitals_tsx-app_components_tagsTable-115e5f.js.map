{"version":3,"sources":["webpack:///./app/components/breadcrumbs.tsx","webpack:///./app/utils/measurements/index.tsx","webpack:///./app/components/events/eventVitals.tsx","webpack:///./app/components/keyValueTable.tsx","webpack:///./app/components/tagsTable.tsx","webpack:///./app/utils/performance/quickTrace/traceMetaQuery.tsx","webpack:///./app/views/performance/transactionDetails/quickTraceMeta.tsx","webpack:///./app/views/performance/transactionDetails/eventMetas.tsx","webpack:///./app/views/performance/transactionDetails/styles.tsx"],"names":["BreadcrumbList","space","Breadcrumbs","crumbs","linkLastItem","props","length","to","map","index","label","preserveGlobalSelection","key","labelKey","mapKey","BreadcrumbLink","BreadcrumbItem","BreadcrumbDividerIcon","size","direction","getBreadcrumbListItemStyles","p","theme","gray300","overflowEllipsis","textColor","subText","IconChevron","formattedValue","record","value","type","getDuration","toFixed","isOutdatedSdk","event","sdk","version","sdkVersion","startsWith","EventVitals","showSectionHeader","measurementNames","Object","keys","measurements","filter","name","Boolean","WEB_VITAL_DETAILS","sort","component","Measurements","EventVital","Container","t","WarningIconContainer","title","position","containerDisplayMode","failedThreshold","poorThreshold","currentValue","thresholdValue","EventVitalContainer","StyledPanel","Name","ValueRow","FireIconContainer","Value","fontSizeMedium","Panel","red300","iconSizes","fontSizeExtraLarge","KeyValueTable","KeyValueTableRow","keyName","Key","commonStyles","backgroundSecondary","TagsTable","query","generateUrl","tags","StyledTagsTable","tag","tagInQuery","includes","target","undefined","renderTagValue","anchor","withPackage","TraceMetaQuery","traceId","start","end","statsPeriod","children","isLoading","error","meta","eventView","makeEventView","route","beforeFetch","getRequestPayload","getTraceRequestPayload","tableData","rest","withApi","QuickTraceMeta","body","footer","location","organization","quickTrace","traceMeta","errorDest","transactionDest","project","features","noFeatureMessage","docsLink","getConfigureTracingDocsLink","contexts","trace","trace_id","traceTarget","generateTraceTarget","height","mini","onClick","trackAnalyticsEvent","eventKey","eventName","organization_id","parseInt","id","source","handleTraceLink","tct","getShortEventId","events","tn","transactions","errors","href","hookName","hasFeature","hideHelpToggle","message","featureName","QuickTraceMetaBase","headingText","badge","tooltipText","bodyText","data-test-id","subtext","BREAKPOINT_MEDIA_QUERY","EventMetas","isLargeScreen","window","matchMedia","matches","changed","setState","this","mq","addListener","handleMediaQueryChange","removeListener","projectId","state","isTransaction","timestamp","date","dateCreated","endTimestamp","httpStatus","HttpStatus","orgId","slug","slugs","projects","find","EventDetailHeader","EventID","avatarSize","startTimestamp","getDynamicText","fixed","status","QuickTraceContainer","React","breakpoints","eventID","EventIDContainer","EventIDWrapper","color","emptyStatus","Array","isArray","tagObject","MetaData","HeaderInfo","StyledSectionHeading","StyledFeatureBadge","SectionBody","SectionSubtext","SectionHeading","FeatureBadge"],"mappings":"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","file":"app_components_breadcrumbs_tsx-app_components_events_eventVitals_tsx-app_components_tagsTable-115e5f.16cccca937034e8379ca.js","sourcesContent":["import * as React from 'react';\nimport styled from '@emotion/styled';\nimport {LocationDescriptor} from 'history';\n\nimport GlobalSelectionLink from 'app/components/globalSelectionLink';\nimport Link from 'app/components/links/link';\nimport {IconChevron} from 'app/icons';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport space from 'app/styles/space';\nimport {Theme} from 'app/utils/theme';\n\nconst BreadcrumbList = styled('div')`\n  display: flex;\n  align-items: center;\n  padding: ${space(1)} 0;\n`;\n\nexport type Crumb = {\n  /**\n   * Label of the crumb\n   */\n  label: React.ReactNode;\n\n  /**\n   * Link of the crumb\n   */\n  to?: React.ComponentProps<typeof Link>['to'] | null;\n\n  /**\n   * It will keep the global selection values (projects, environments, time) in the\n   * querystring when navigating (GlobalSelectionLink)\n   */\n  preserveGlobalSelection?: boolean;\n\n  /**\n   * Component will try to come up with unique key, but you can provide your own\n   * (used when mapping over crumbs)\n   */\n  key?: string;\n};\n\ntype Props = React.ComponentPropsWithoutRef<typeof BreadcrumbList> & {\n  /**\n   * Array of crumbs that will be rendered\n   */\n  crumbs: Crumb[];\n\n  /**\n   * As a general rule of thumb we don't want the last item to be link as it most likely\n   * points to the same page we are currently on. This is by default false, so that\n   * people don't have to check if crumb is last in the array and then manually\n   * assign `to: null/undefined` when passing props to this component.\n   */\n  linkLastItem?: boolean;\n};\n\n/**\n * Page breadcrumbs used for navigation, not to be confused with sentry's event breadcrumbs\n */\nconst Breadcrumbs = ({crumbs, linkLastItem = false, ...props}: Props) => {\n  if (crumbs.length === 0) {\n    return null;\n  }\n\n  if (!linkLastItem) {\n    crumbs[crumbs.length - 1].to = null;\n  }\n\n  return (\n    <BreadcrumbList {...props}>\n      {crumbs.map(({label, to, preserveGlobalSelection, key}, index) => {\n        const labelKey = typeof label === 'string' ? label : '';\n        const mapKey =\n          key ?? typeof to === 'string' ? `${labelKey}${to}` : `${labelKey}${index}`;\n\n        return (\n          <React.Fragment key={mapKey}>\n            {to ? (\n              <BreadcrumbLink to={to} preserveGlobalSelection={preserveGlobalSelection}>\n                {label}\n              </BreadcrumbLink>\n            ) : (\n              <BreadcrumbItem>{label}</BreadcrumbItem>\n            )}\n\n            {index < crumbs.length - 1 && (\n              <BreadcrumbDividerIcon size=\"xs\" direction=\"right\" />\n            )}\n          </React.Fragment>\n        );\n      })}\n    </BreadcrumbList>\n  );\n};\n\nconst getBreadcrumbListItemStyles = (p: {theme: Theme}) => `\n  color: ${p.theme.gray300};\n  ${overflowEllipsis};\n  width: auto;\n\n  &:last-child {\n    color: ${p.theme.textColor};\n  }\n`;\n\ntype BreadcrumbLinkProps = {\n  to: React.ComponentProps<typeof Link>['to'];\n  preserveGlobalSelection?: boolean;\n  children?: React.ReactNode;\n};\n\nconst BreadcrumbLink = styled(\n  ({preserveGlobalSelection, to, ...props}: BreadcrumbLinkProps) =>\n    preserveGlobalSelection ? (\n      <GlobalSelectionLink to={to as LocationDescriptor} {...props} />\n    ) : (\n      <Link to={to} {...props} />\n    )\n)`\n  ${getBreadcrumbListItemStyles}\n\n  &:hover,\n  &:active {\n    color: ${p => p.theme.subText};\n  }\n`;\n\nconst BreadcrumbItem = styled('span')`\n  ${getBreadcrumbListItemStyles}\n  max-width: 400px;\n`;\n\nconst BreadcrumbDividerIcon = styled(IconChevron)`\n  color: ${p => p.theme.gray300};\n  margin: 0 ${space(1)};\n  flex-shrink: 0;\n`;\n\nexport default Breadcrumbs;\n","import {getDuration} from 'app/utils/formatters';\nimport {Vital} from 'app/utils/performance/vitals/types';\n\nexport function formattedValue(record: Vital | undefined, value: number): string {\n  if (record && record.type === 'duration') {\n    return getDuration(value / 1000, 3);\n  }\n\n  return value.toFixed(3);\n}\n","import styled from '@emotion/styled';\n\nimport {SectionHeading} from 'app/components/charts/styles';\nimport {Panel} from 'app/components/panels';\nimport Tooltip from 'app/components/tooltip';\nimport {IconFire, IconWarning} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Event} from 'app/types/event';\nimport {formattedValue} from 'app/utils/measurements/index';\nimport {WEB_VITAL_DETAILS} from 'app/utils/performance/vitals/constants';\nimport {IconSize} from 'app/utils/theme';\n\ntype Props = {\n  event: Event;\n  showSectionHeader?: boolean;\n};\n\nfunction isOutdatedSdk(event: Event): boolean {\n  if (!event.sdk?.version) {\n    return false;\n  }\n\n  const sdkVersion = event.sdk.version;\n  return (\n    sdkVersion.startsWith('5.26.') ||\n    sdkVersion.startsWith('5.27.0') ||\n    sdkVersion.startsWith('5.27.1') ||\n    sdkVersion.startsWith('5.27.2')\n  );\n}\n\nexport default function EventVitals({event, showSectionHeader = true}: Props) {\n  const measurementNames = Object.keys(event.measurements ?? {})\n    .filter(name => Boolean(WEB_VITAL_DETAILS[`measurements.${name}`]))\n    .sort();\n\n  if (measurementNames.length === 0) {\n    return null;\n  }\n\n  const component = (\n    <Measurements>\n      {measurementNames.map(name => (\n        <EventVital key={name} event={event} name={name} />\n      ))}\n    </Measurements>\n  );\n\n  if (showSectionHeader) {\n    return (\n      <Container>\n        <SectionHeading>\n          {t('Web Vitals')}\n          {isOutdatedSdk(event) && (\n            <WarningIconContainer size=\"sm\">\n              <Tooltip\n                title={t(\n                  'These vitals were collected using an outdated SDK version and may not be accurate. To ensure accurate web vitals in new transaction events, please update your SDK to the latest version.'\n                )}\n                position=\"top\"\n                containerDisplayMode=\"inline-block\"\n              >\n                <IconWarning size=\"sm\" />\n              </Tooltip>\n            </WarningIconContainer>\n          )}\n        </SectionHeading>\n        {component}\n      </Container>\n    );\n  }\n\n  return component;\n}\n\ntype EventVitalProps = Props & {\n  name: string;\n};\n\nfunction EventVital({event, name}: EventVitalProps) {\n  const value = event.measurements?.[name].value ?? null;\n  if (value === null) {\n    return null;\n  }\n\n  // Measurements are referred to by their full name `measurements.<name>`\n  // here but are stored using their abbreviated name `<name>`. Make sure\n  // to convert it appropriately.\n  const record = WEB_VITAL_DETAILS[`measurements.${name}`];\n\n  if (!record) {\n    return null;\n  }\n\n  const failedThreshold = value >= record.poorThreshold;\n\n  const currentValue = formattedValue(record, value);\n  const thresholdValue = formattedValue(record, record?.poorThreshold ?? 0);\n\n  return (\n    <EventVitalContainer>\n      <StyledPanel failedThreshold={failedThreshold}>\n        <Name>{record.name ?? name}</Name>\n        <ValueRow>\n          {failedThreshold ? (\n            <FireIconContainer size=\"sm\">\n              <Tooltip\n                title={t('Fails threshold at %s.', thresholdValue)}\n                position=\"top\"\n                containerDisplayMode=\"inline-block\"\n              >\n                <IconFire size=\"sm\" />\n              </Tooltip>\n            </FireIconContainer>\n          ) : null}\n          <Value failedThreshold={failedThreshold}>{currentValue}</Value>\n        </ValueRow>\n      </StyledPanel>\n    </EventVitalContainer>\n  );\n}\n\nconst Measurements = styled('div')`\n  display: grid;\n  grid-column-gap: ${space(1)};\n`;\n\nconst Container = styled('div')`\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin-bottom: ${space(4)};\n`;\n\nconst StyledPanel = styled(Panel)<{failedThreshold: boolean}>`\n  padding: ${space(1)} ${space(1.5)};\n  margin-bottom: ${space(1)};\n  ${p => p.failedThreshold && `border: 1px solid ${p.theme.red300};`}\n`;\n\nconst Name = styled('div')``;\n\nconst ValueRow = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst WarningIconContainer = styled('span')<{size: IconSize | string}>`\n  display: inline-block;\n  height: ${p => p.theme.iconSizes[p.size] ?? p.size};\n  line-height: ${p => p.theme.iconSizes[p.size] ?? p.size};\n  margin-left: ${space(0.5)};\n  color: ${p => p.theme.red300};\n`;\n\nconst FireIconContainer = styled('span')<{size: IconSize | string}>`\n  display: inline-block;\n  height: ${p => p.theme.iconSizes[p.size] ?? p.size};\n  line-height: ${p => p.theme.iconSizes[p.size] ?? p.size};\n  margin-right: ${space(0.5)};\n  color: ${p => p.theme.red300};\n`;\n\nconst Value = styled('span')<{failedThreshold: boolean}>`\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  ${p => p.failedThreshold && `color: ${p.theme.red300};`}\n`;\n\nexport const EventVitalContainer = styled('div')``;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport space from 'app/styles/space';\nimport {Theme} from 'app/utils/theme';\n\ntype Props = {\n  keyName: React.ReactNode;\n  value: React.ReactNode;\n};\n\nexport const KeyValueTable = styled('dl')`\n  display: grid;\n  grid-template-columns: 50% 50%;\n`;\n\nexport const KeyValueTableRow = ({keyName, value}: Props) => {\n  return (\n    <React.Fragment>\n      <Key>{keyName}</Key>\n      <Value>{value}</Value>\n    </React.Fragment>\n  );\n};\n\nconst commonStyles = ({theme}: {theme: Theme}) => `\nfont-size: ${theme.fontSizeMedium};\npadding: ${space(0.5)} ${space(1)};\nfont-weight: normal;\nline-height: inherit;\n${overflowEllipsis};\n&:nth-of-type(2n-1) {\n  background-color: ${theme.backgroundSecondary};\n}\n`;\n\nconst Key = styled('dt')`\n  ${commonStyles};\n  color: ${p => p.theme.textColor};\n`;\n\nconst Value = styled('dd')`\n  ${commonStyles};\n  color: ${p => p.theme.subText};\n  text-align: right;\n`;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\nimport {LocationDescriptor} from 'history';\n\nimport {SectionHeading} from 'app/components/charts/styles';\nimport {KeyValueTable, KeyValueTableRow} from 'app/components/keyValueTable';\nimport Link from 'app/components/links/link';\nimport Tooltip from 'app/components/tooltip';\nimport Version from 'app/components/version';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Event, EventTag} from 'app/types/event';\n\ntype Props = {\n  event: Event;\n  query: string;\n  generateUrl: (tag: EventTag) => LocationDescriptor;\n  title?: React.ReactNode;\n};\n\nconst TagsTable = ({event, query, generateUrl, title = t('Tag Details')}: Props) => {\n  const tags = event.tags;\n\n  return (\n    <StyledTagsTable>\n      <SectionHeading>{title}</SectionHeading>\n      <KeyValueTable>\n        {tags.map(tag => {\n          const tagInQuery = query.includes(`${tag.key}:`);\n          const target = tagInQuery ? undefined : generateUrl(tag);\n\n          const renderTagValue = () => {\n            switch (tag.key) {\n              case 'release':\n                return <Version version={tag.value} anchor={false} withPackage />;\n              default:\n                return tag.value;\n            }\n          };\n\n          return (\n            <KeyValueTableRow\n              key={tag.key}\n              keyName={tag.key}\n              value={\n                tagInQuery ? (\n                  <Tooltip title={t('This tag is in the current filter conditions')}>\n                    <span>{renderTagValue()}</span>\n                  </Tooltip>\n                ) : (\n                  <Link to={target || ''}>{renderTagValue()}</Link>\n                )\n              }\n            />\n          );\n        })}\n      </KeyValueTable>\n    </StyledTagsTable>\n  );\n};\n\nconst StyledTagsTable = styled('div')`\n  margin-bottom: ${space(3)};\n`;\n\nexport default TagsTable;\n","import * as React from 'react';\n\nimport GenericDiscoverQuery from 'app/utils/discover/genericDiscoverQuery';\nimport {\n  BaseTraceChildrenProps,\n  TraceMeta,\n  TraceRequestProps,\n} from 'app/utils/performance/quickTrace/types';\nimport {\n  beforeFetch,\n  getTraceRequestPayload,\n  makeEventView,\n} from 'app/utils/performance/quickTrace/utils';\nimport withApi from 'app/utils/withApi';\n\nexport type TraceMetaQueryChildrenProps = BaseTraceChildrenProps & {\n  meta: TraceMeta | null;\n};\n\ntype QueryProps = Omit<TraceRequestProps, 'eventView'> & {\n  children: (props: TraceMetaQueryChildrenProps) => React.ReactNode;\n};\n\nfunction TraceMetaQuery({\n  traceId,\n  start,\n  end,\n  statsPeriod,\n  children,\n  ...props\n}: QueryProps) {\n  if (!traceId) {\n    return (\n      <React.Fragment>\n        {children({\n          isLoading: false,\n          error: null,\n          meta: null,\n        })}\n      </React.Fragment>\n    );\n  }\n\n  const eventView = makeEventView({start, end, statsPeriod});\n\n  return (\n    <GenericDiscoverQuery<TraceMeta, {}>\n      route={`events-trace-meta/${traceId}`}\n      beforeFetch={beforeFetch}\n      getRequestPayload={getTraceRequestPayload}\n      eventView={eventView}\n      {...props}\n    >\n      {({tableData, ...rest}) => {\n        return children({\n          meta: tableData,\n          ...rest,\n        });\n      }}\n    </GenericDiscoverQuery>\n  );\n}\n\nexport default withApi(TraceMetaQuery);\n","import {ComponentProps, ReactNode} from 'react';\nimport {Location} from 'history';\n\nimport Feature from 'app/components/acl/feature';\nimport FeatureDisabled from 'app/components/acl/featureDisabled';\nimport ErrorBoundary from 'app/components/errorBoundary';\nimport Hovercard from 'app/components/hovercard';\nimport ExternalLink from 'app/components/links/externalLink';\nimport Link from 'app/components/links/link';\nimport Placeholder from 'app/components/placeholder';\nimport QuickTrace from 'app/components/quickTrace';\nimport {generateTraceTarget} from 'app/components/quickTrace/utils';\nimport {t, tct, tn} from 'app/locale';\nimport {AvatarProject, OrganizationSummary} from 'app/types';\nimport {Event} from 'app/types/event';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\nimport {getConfigureTracingDocsLink} from 'app/utils/docs';\nimport {getShortEventId} from 'app/utils/events';\nimport {\n  QuickTraceQueryChildrenProps,\n  TraceMeta,\n} from 'app/utils/performance/quickTrace/types';\n\nimport {MetaData} from './styles';\n\ntype Props = Pick<ComponentProps<typeof QuickTrace>, 'errorDest' | 'transactionDest'> & {\n  event: Event;\n  location: Location;\n  organization: OrganizationSummary;\n  quickTrace: QuickTraceQueryChildrenProps | null;\n  traceMeta: TraceMeta | null;\n  anchor: 'left' | 'right';\n  project?: AvatarProject;\n};\n\nfunction handleTraceLink(organization: OrganizationSummary) {\n  trackAnalyticsEvent({\n    eventKey: 'quick_trace.trace_id.clicked',\n    eventName: 'Quick Trace: Trace ID clicked',\n    organization_id: parseInt(organization.id, 10),\n    source: 'events',\n  });\n}\n\nexport default function QuickTraceMeta({\n  event,\n  location,\n  organization,\n  quickTrace,\n  traceMeta,\n  anchor,\n  errorDest,\n  transactionDest,\n  project,\n}: Props) {\n  const features = ['performance-view'];\n\n  const noFeatureMessage = t('Requires performance monitoring.');\n\n  const docsLink = getConfigureTracingDocsLink(project);\n\n  const traceId = event.contexts?.trace?.trace_id ?? null;\n  const traceTarget = generateTraceTarget(event, organization);\n\n  let body: ReactNode;\n  let footer: ReactNode;\n\n  if (!traceId || !quickTrace || quickTrace.trace === null) {\n    // this platform doesn't support performance don't show anything here\n    if (docsLink === null) {\n      return null;\n    }\n\n    body = t('Missing Trace');\n\n    // need to configure tracing\n    footer = <ExternalLink href={docsLink}>{t('Read the docs')}</ExternalLink>;\n  } else {\n    if (quickTrace.isLoading) {\n      body = <Placeholder height=\"24px\" />;\n    } else if (quickTrace.error) {\n      body = '\\u2014';\n    } else {\n      body = (\n        <ErrorBoundary mini>\n          <QuickTrace\n            event={event}\n            quickTrace={{\n              type: quickTrace.type,\n              trace: quickTrace.trace,\n            }}\n            location={location}\n            organization={organization}\n            anchor={anchor}\n            errorDest={errorDest}\n            transactionDest={transactionDest}\n          />\n        </ErrorBoundary>\n      );\n    }\n\n    footer = (\n      <Link to={traceTarget} onClick={() => handleTraceLink(organization)}>\n        {tct('Trace ID: [id][events]', {\n          id: getShortEventId(traceId ?? ''),\n          events: traceMeta\n            ? tn(' (%s event)', ' (%s events)', traceMeta.transactions + traceMeta.errors)\n            : '',\n        })}\n      </Link>\n    );\n  }\n\n  return (\n    <Feature hookName=\"feature-disabled:performance-quick-trace\" features={features}>\n      {({hasFeature}) => {\n        // also need to enable the performance feature\n        if (!hasFeature) {\n          footer = (\n            <Hovercard\n              body={\n                <FeatureDisabled\n                  features={features}\n                  hideHelpToggle\n                  message={noFeatureMessage}\n                  featureName={noFeatureMessage}\n                />\n              }\n            >\n              {footer}\n            </Hovercard>\n          );\n        }\n\n        return <QuickTraceMetaBase body={body} footer={footer} />;\n      }}\n    </Feature>\n  );\n}\n\nexport function QuickTraceMetaBase({body, footer}: {body: ReactNode; footer: ReactNode}) {\n  return (\n    <MetaData\n      headingText={t('Quick Trace')}\n      badge=\"new\"\n      tooltipText={t(\n        'A minified version of the full trace. Related frontend and backend services can be added to provide further visibility.'\n      )}\n      bodyText={<div data-test-id=\"quick-trace-body\">{body}</div>}\n      subtext={<div data-test-id=\"quick-trace-footer\">{footer}</div>}\n    />\n  );\n}\n","import * as React from 'react';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport Clipboard from 'app/components/clipboard';\nimport DateTime from 'app/components/dateTime';\nimport ProjectBadge from 'app/components/idBadge/projectBadge';\nimport TimeSince from 'app/components/timeSince';\nimport Tooltip from 'app/components/tooltip';\nimport {IconCopy} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {OrganizationSummary} from 'app/types';\nimport {Event} from 'app/types/event';\nimport {getShortEventId} from 'app/utils/events';\nimport {getDuration} from 'app/utils/formatters';\nimport getDynamicText from 'app/utils/getDynamicText';\nimport {\n  QuickTraceQueryChildrenProps,\n  TraceMeta,\n} from 'app/utils/performance/quickTrace/types';\nimport {isTransaction} from 'app/utils/performance/quickTrace/utils';\nimport Projects from 'app/utils/projects';\nimport theme from 'app/utils/theme';\n\nimport QuickTraceMeta from './quickTraceMeta';\nimport {MetaData} from './styles';\n\ntype Props = Pick<\n  React.ComponentProps<typeof QuickTraceMeta>,\n  'errorDest' | 'transactionDest'\n> & {\n  event: Event;\n  organization: OrganizationSummary;\n  projectId: string;\n  location: Location;\n  quickTrace: QuickTraceQueryChildrenProps | null;\n  meta: TraceMeta | null;\n};\n\ntype State = {\n  isLargeScreen: boolean;\n};\n\n/**\n * This should match the breakpoint chosen for the `EventDetailHeader` below\n */\nconst BREAKPOINT_MEDIA_QUERY = `(min-width: ${theme.breakpoints[2]})`;\n\nclass EventMetas extends React.Component<Props, State> {\n  state: State = {\n    isLargeScreen: window.matchMedia?.(BREAKPOINT_MEDIA_QUERY)?.matches,\n  };\n\n  componentDidMount() {\n    if (this.mq) {\n      this.mq.addListener(this.handleMediaQueryChange);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.mq) {\n      this.mq.removeListener(this.handleMediaQueryChange);\n    }\n  }\n\n  mq = window.matchMedia?.(BREAKPOINT_MEDIA_QUERY);\n\n  handleMediaQueryChange = (changed: MediaQueryListEvent) => {\n    this.setState({\n      isLargeScreen: changed.matches,\n    });\n  };\n\n  render() {\n    const {\n      event,\n      organization,\n      projectId,\n      location,\n      quickTrace,\n      meta,\n      errorDest,\n      transactionDest,\n    } = this.props;\n    const {isLargeScreen} = this.state;\n\n    const type = isTransaction(event) ? 'transaction' : 'event';\n\n    const timestamp = (\n      <TimeSince date={event.dateCreated || (event.endTimestamp || 0) * 1000} />\n    );\n\n    const httpStatus = <HttpStatus event={event} />;\n\n    return (\n      <Projects orgId={organization.slug} slugs={[projectId]}>\n        {({projects}) => {\n          const project = projects.find(p => p.slug === projectId);\n          return (\n            <EventDetailHeader type={type}>\n              <MetaData\n                headingText={t('Event ID')}\n                tooltipText={t('The unique ID assigned to this %s.', type)}\n                bodyText={<EventID event={event} />}\n                subtext={\n                  <ProjectBadge\n                    project={project ? project : {slug: projectId}}\n                    avatarSize={16}\n                  />\n                }\n              />\n              {isTransaction(event) ? (\n                <MetaData\n                  headingText={t('Event Duration')}\n                  tooltipText={t(\n                    'The time elapsed between the start and end of this transaction.'\n                  )}\n                  bodyText={getDuration(\n                    event.endTimestamp - event.startTimestamp,\n                    2,\n                    true\n                  )}\n                  subtext={timestamp}\n                />\n              ) : (\n                <MetaData\n                  headingText={t('Created')}\n                  tooltipText={t('The time at which this event was created.')}\n                  bodyText={timestamp}\n                  subtext={getDynamicText({\n                    value: <DateTime date={event.dateCreated} />,\n                    fixed: 'May 6, 2021 3:27:01 UTC',\n                  })}\n                />\n              )}\n              {isTransaction(event) && (\n                <MetaData\n                  headingText={t('Status')}\n                  tooltipText={t(\n                    'The status of this transaction indicating if it succeeded or otherwise.'\n                  )}\n                  bodyText={event.contexts?.trace?.status ?? '\\u2014'}\n                  subtext={httpStatus}\n                />\n              )}\n              <QuickTraceContainer>\n                <QuickTraceMeta\n                  event={event}\n                  project={project}\n                  organization={organization}\n                  location={location}\n                  quickTrace={quickTrace}\n                  traceMeta={meta}\n                  anchor={isLargeScreen ? 'right' : 'left'}\n                  errorDest={errorDest}\n                  transactionDest={transactionDest}\n                />\n              </QuickTraceContainer>\n            </EventDetailHeader>\n          );\n        }}\n      </Projects>\n    );\n  }\n}\n\nconst EventDetailHeader = styled('div')<{type?: 'transaction' | 'event'}>`\n  display: grid;\n  grid-template-columns: repeat(${p => (p.type === 'transaction' ? 3 : 2)}, 1fr);\n  grid-template-rows: repeat(2, auto);\n  grid-gap: ${space(2)};\n  margin-bottom: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints[1]}) {\n    margin-bottom: 0;\n  }\n\n  /* This should match the breakpoint chosen for BREAKPOINT_MEDIA_QUERY above. */\n  @media (min-width: ${p => p.theme.breakpoints[2]}) {\n    ${p =>\n      p.type === 'transaction'\n        ? 'grid-template-columns: minmax(160px, 1fr) minmax(160px, 1fr) minmax(160px, 1fr) 6fr;'\n        : 'grid-template-columns: minmax(160px, 1fr) minmax(200px, 1fr) 6fr;'};\n    grid-row-gap: 0;\n  }\n`;\n\nconst QuickTraceContainer = styled('div')`\n  grid-column: 1/4;\n\n  @media (min-width: ${p => p.theme.breakpoints[2]}) {\n    justify-self: flex-end;\n    min-width: 325px;\n    grid-column: unset;\n  }\n`;\n\nfunction EventID({event}: {event: Event}) {\n  return (\n    <Clipboard value={event.eventID}>\n      <EventIDContainer>\n        <EventIDWrapper>{getShortEventId(event.eventID)}</EventIDWrapper>\n        <Tooltip title={event.eventID} position=\"top\">\n          <IconCopy color=\"subText\" />\n        </Tooltip>\n      </EventIDContainer>\n    </Clipboard>\n  );\n}\n\nconst EventIDContainer = styled('div')`\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n`;\n\nconst EventIDWrapper = styled('span')`\n  margin-right: ${space(1)};\n`;\n\nfunction HttpStatus({event}: {event: Event}) {\n  const {tags} = event;\n\n  const emptyStatus = <React.Fragment>{'\\u2014'}</React.Fragment>;\n\n  if (!Array.isArray(tags)) {\n    return emptyStatus;\n  }\n\n  const tag = tags.find(tagObject => tagObject.key === 'http.status_code');\n\n  if (!tag) {\n    return emptyStatus;\n  }\n\n  return <React.Fragment>HTTP {tag.value}</React.Fragment>;\n}\n\nexport default EventMetas;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport {SectionHeading} from 'app/components/charts/styles';\nimport FeatureBadge from 'app/components/featureBadge';\nimport QuestionTooltip from 'app/components/questionTooltip';\nimport space from 'app/styles/space';\n\ntype MetaDataProps = {\n  headingText: string;\n  tooltipText: string;\n  bodyText: React.ReactNode;\n  subtext: React.ReactNode;\n  badge?: 'alpha' | 'beta' | 'new';\n};\n\nexport function MetaData({\n  headingText,\n  tooltipText,\n  bodyText,\n  subtext,\n  badge,\n}: MetaDataProps) {\n  return (\n    <HeaderInfo>\n      <StyledSectionHeading>\n        {headingText}\n        <QuestionTooltip\n          position=\"top\"\n          size=\"sm\"\n          containerDisplayMode=\"block\"\n          title={tooltipText}\n        />\n        {badge && <StyledFeatureBadge type={badge} />}\n      </StyledSectionHeading>\n      <SectionBody>{bodyText}</SectionBody>\n      <SectionSubtext>{subtext}</SectionSubtext>\n    </HeaderInfo>\n  );\n}\n\nconst HeaderInfo = styled('div')`\n  height: 78px;\n`;\n\nconst StyledSectionHeading = styled(SectionHeading)`\n  margin: 0;\n`;\n\nconst SectionBody = styled('div')`\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  padding: ${space(0.5)} 0;\n  max-height: 32px;\n`;\n\nconst StyledFeatureBadge = styled(FeatureBadge)`\n  margin: 0;\n`;\n\nexport const SectionSubtext = styled('div')<{type?: 'error' | 'default'}>`\n  color: ${p => (p.type === 'error' ? p.theme.error : p.theme.subText)};\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n"],"sourceRoot":""}