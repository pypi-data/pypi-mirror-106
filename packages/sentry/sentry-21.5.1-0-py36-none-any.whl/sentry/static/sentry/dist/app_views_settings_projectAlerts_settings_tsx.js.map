{"version":3,"sources":["webpack:///./app/components/alertLink.tsx","webpack:///./app/components/inactivePlugins.tsx","webpack:///./app/components/pluginList.tsx","webpack:///./app/data/forms/projectAlerts.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/forms/formPanel.tsx","webpack:///./app/views/settings/components/forms/jsonForm.tsx","webpack:///./app/views/settings/project/permissionAlert.tsx","webpack:///./app/views/settings/projectAlerts/settings.tsx"],"names":["AlertLink","this","props","size","priority","icon","children","onClick","withoutMarginBottom","openInNewTab","to","href","dataTestId","StyledLink","data-test-id","IconWrapper","AlertLinkText","IconLink","direction","React","linkProps","omit","p","theme","alert","backgroundLight","textColor","border","space","InactivePlugins","plugins","onEnablePlugin","length","t","Plugins","map","plugin","IntegrationButton","className","id","Label","StyledPluginIcon","pluginId","shortName","name","fontSizeSmall","borderRadius","PluginIcon","PluginList","organization","project","pluginList","onDisablePlugin","handleDisablePlugin","disablePlugin","projectId","slug","orgId","filter","enabled","data","isHidden","enablePlugin","route","formatMinutes","value","Number","tn","fields","subjectTemplate","type","label","placeholder","help","digestsMinDelay","min","max","step","defaultValue","formatLabel","digestsMaxDelay","routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","AsyncView","title","getTitle","renderComponent","AsyncComponent","FormPanel","access","disabled","additionalFieldProps","renderFooter","renderHeader","otherProps","sanitizeQuerySelector","undefined","field","fieldWithoutDefaultValue","disabledReason","highlighted","JsonForm","location","hash","scrollToHash","nextProps","setState","toHash","scrollToElement","decodeURIComponent","align","offset","err","Sentry","fieldsWithVisibleProp","defined","visible","every","formPanelProps","shouldDisplayForm","forms","features","state","formGroup","i","renderForm","withRouter","PermissionAlert","hasAccess","prevState","params","getProjectEndpoint","routeTitleGen","canEditRule","projectEndpoint","Fragment","action","pathname","query","saveOnBlur","allowUndo","initialData","apiMethod","apiEndpoint","hasConfiguration","handleEnablePlugin"],"mappings":"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","file":"app_views_settings_projectAlerts_settings_tsx.1fee350716f2be45267f.js","sourcesContent":["import * as React from 'react';\nimport styled from '@emotion/styled';\nimport omit from 'lodash/omit';\n\nimport ExternalLink from 'app/components/links/externalLink';\nimport Link from 'app/components/links/link';\nimport {IconChevron} from 'app/icons';\nimport space from 'app/styles/space';\n\ntype Size = 'small' | 'normal';\ntype Priority = 'info' | 'warning' | 'success' | 'error' | 'muted';\n\ntype LinkProps = React.ComponentPropsWithoutRef<typeof Link>;\n\ntype OtherProps = {\n  ['data-test-id']?: string;\n  icon?: string | React.ReactNode;\n  onClick?: (e: React.MouseEvent) => void;\n};\n\ntype DefaultProps = {\n  size: Size;\n  priority: Priority;\n  withoutMarginBottom: boolean;\n  openInNewTab: boolean;\n  href?: string;\n};\n\ntype Props = OtherProps & DefaultProps & Partial<Pick<LinkProps, 'to'>>;\n\ntype StyledLinkProps = DefaultProps &\n  Partial<Pick<LinkProps, 'to'>> &\n  Omit<LinkProps, 'to' | 'size'>;\n\nclass AlertLink extends React.Component<Props> {\n  static defaultProps: DefaultProps = {\n    priority: 'warning',\n    size: 'normal',\n    withoutMarginBottom: false,\n    openInNewTab: false,\n  };\n\n  render() {\n    const {\n      size,\n      priority,\n      icon,\n      children,\n      onClick,\n      withoutMarginBottom,\n      openInNewTab,\n      to,\n      href,\n      ['data-test-id']: dataTestId,\n    } = this.props;\n\n    return (\n      <StyledLink\n        data-test-id={dataTestId}\n        to={to}\n        href={href}\n        onClick={onClick}\n        size={size}\n        priority={priority}\n        withoutMarginBottom={withoutMarginBottom}\n        openInNewTab={openInNewTab}\n      >\n        {icon && <IconWrapper>{icon}</IconWrapper>}\n        <AlertLinkText>{children}</AlertLinkText>\n        <IconLink>\n          <IconChevron direction=\"right\" />\n        </IconLink>\n      </StyledLink>\n    );\n  }\n}\n\nexport default AlertLink;\n\nconst StyledLink = styled(({openInNewTab, to, href, ...props}: StyledLinkProps) => {\n  const linkProps = omit(props, ['withoutMarginBottom', 'priority', 'size']);\n  if (href) {\n    return <ExternalLink {...linkProps} href={href} openInNewTab={openInNewTab} />;\n  }\n\n  return <Link {...linkProps} to={to || ''} />;\n})`\n  display: flex;\n  background-color: ${p => p.theme.alert[p.priority].backgroundLight};\n  color: ${p => p.theme.textColor};\n  border: 1px dashed ${p => p.theme.alert[p.priority].border};\n  padding: ${p => (p.size === 'small' ? `${space(1)} ${space(1.5)}` : space(2))};\n  margin-bottom: ${p => (p.withoutMarginBottom ? 0 : space(3))};\n  border-radius: 0.25em;\n  transition: 0.2s border-color;\n\n  &.focus-visible {\n    outline: none;\n    box-shadow: ${p => p.theme.alert[p.priority].border}7f 0 0 0 2px;\n  }\n`;\n\nconst IconWrapper = styled('span')`\n  display: flex;\n  margin: ${space(0.5)} ${space(1.5)} ${space(0.5)} 0;\n`;\n\nconst IconLink = styled(IconWrapper)`\n  margin: ${space(0.5)} 0;\n`;\n\nconst AlertLinkText = styled('div')`\n  line-height: 1.5;\n  flex-grow: 1;\n`;\n","import styled from '@emotion/styled';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport TextOverflow from 'app/components/textOverflow';\nimport {t} from 'app/locale';\nimport PluginIcon from 'app/plugins/components/pluginIcon';\nimport space from 'app/styles/space';\nimport {Plugin} from 'app/types';\n\ntype Props = {\n  plugins: Plugin[];\n  onEnablePlugin: (plugin: Plugin) => void;\n};\n\nconst InactivePlugins = ({plugins, onEnablePlugin}: Props) => {\n  if (plugins.length === 0) {\n    return null;\n  }\n\n  return (\n    <Panel>\n      <PanelHeader>{t('Inactive Integrations')}</PanelHeader>\n\n      <PanelBody>\n        <Plugins>\n          {plugins.map(plugin => (\n            <IntegrationButton\n              key={plugin.id}\n              onClick={() => onEnablePlugin(plugin)}\n              className={`ref-plugin-enable-${plugin.id}`}\n            >\n              <Label>\n                <StyledPluginIcon pluginId={plugin.id} />\n                <TextOverflow>{plugin.shortName || plugin.name}</TextOverflow>\n              </Label>\n            </IntegrationButton>\n          ))}\n        </Plugins>\n      </PanelBody>\n    </Panel>\n  );\n};\n\nconst Plugins = styled('div')`\n  display: flex;\n  padding: ${space(1)};\n  flex: 1;\n  flex-wrap: wrap;\n`;\n\nconst IntegrationButton = styled('button')`\n  margin: ${space(1)};\n  width: 175px;\n  text-align: center;\n  font-size: ${p => p.theme.fontSizeSmall};\n  color: #889ab0;\n  letter-spacing: 0.1px;\n  font-weight: 600;\n  text-transform: uppercase;\n  border: 1px solid #eee;\n  background: inherit;\n  border-radius: ${p => p.theme.borderRadius};\n  padding: 10px;\n\n  &:hover {\n    border-color: #ccc;\n  }\n`;\n\nconst Label = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst StyledPluginIcon = styled(PluginIcon)`\n  margin-right: ${space(1)};\n`;\n\nexport default InactivePlugins;\n","import {disablePlugin, enablePlugin} from 'app/actionCreators/plugins';\nimport InactivePlugins from 'app/components/inactivePlugins';\nimport PluginConfig from 'app/components/pluginConfig';\nimport {t} from 'app/locale';\nimport {Organization, Plugin, Project} from 'app/types';\n\nimport {Panel, PanelItem} from './panels';\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n  pluginList: Plugin[];\n  onDisablePlugin?: (plugin: Plugin) => void;\n  onEnablePlugin?: (plugin: Plugin) => void;\n};\n\nconst PluginList = ({\n  organization,\n  project,\n  pluginList,\n  onDisablePlugin = () => {},\n  onEnablePlugin = () => {},\n}: Props) => {\n  const handleEnablePlugin = (plugin: Plugin) => {\n    enablePlugin({\n      projectId: project.slug,\n      orgId: organization.slug,\n      pluginId: plugin.slug,\n    });\n\n    onEnablePlugin(plugin);\n  };\n\n  const handleDisablePlugin = (plugin: Plugin) => {\n    disablePlugin({\n      projectId: project.slug,\n      orgId: organization.slug,\n      pluginId: plugin.slug,\n    });\n\n    onDisablePlugin(plugin);\n  };\n\n  if (!pluginList.length) {\n    return (\n      <Panel>\n        <PanelItem>\n          {t(\"Oops! Looks like there aren't any available integrations installed.\")}\n        </PanelItem>\n      </Panel>\n    );\n  }\n\n  return (\n    <div>\n      {pluginList\n        .filter(p => p.enabled)\n        .map(data => (\n          <PluginConfig\n            data={data}\n            organization={organization}\n            project={project}\n            key={data.id}\n            onDisablePlugin={handleDisablePlugin}\n          />\n        ))}\n\n      <InactivePlugins\n        plugins={pluginList.filter(p => !p.enabled && !p.isHidden)}\n        onEnablePlugin={handleEnablePlugin}\n      />\n    </div>\n  );\n};\n\nexport default PluginList;\n","import {t, tn} from 'app/locale';\nimport {Field} from 'app/views/settings/components/forms/type';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/projects/:projectId/alerts/';\n\nconst formatMinutes = (value: number | '') => {\n  value = Number(value) / 60;\n  return tn('%s minute', '%s minutes', value);\n};\n\nexport const fields: {[key: string]: Field} = {\n  subjectTemplate: {\n    name: 'subjectTemplate',\n    type: 'string',\n\n    // additional data/props that is related to rendering of form field rather than data\n    label: t('Subject Template'),\n    placeholder: 'e.g. $shortID - $title',\n    help: t(\n      'The email subject to use (excluding the prefix) for individual alerts. Usable variables include: $title, $shortID, $projectID, $orgID, and ${tag:key}, such as ${tag:environment} or ${tag:release}.'\n    ),\n  },\n  digestsMinDelay: {\n    name: 'digestsMinDelay',\n    type: 'range',\n    min: 60,\n    max: 3600,\n    step: 60,\n    defaultValue: 300,\n    label: t('Minimum delivery interval'),\n    help: t('Notifications will be delivered at most this often.'),\n    formatLabel: formatMinutes,\n  },\n  digestsMaxDelay: {\n    name: 'digestsMaxDelay',\n    type: 'range',\n    min: 60,\n    max: 3600,\n    step: 60,\n    defaultValue: 300,\n    label: t('Maximum delivery interval'),\n    help: t('Notifications will be delivered at least this often.'),\n    formatLabel: formatMinutes,\n  },\n};\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import * as React from 'react';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {Scope} from 'app/types';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\nimport FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';\n\nimport {FieldObject, JsonFormObject} from './type';\n\ntype DefaultProps = {\n  additionalFieldProps: {[key: string]: any};\n};\n\ntype Props = DefaultProps & {\n  /**\n   * Panel title\n   */\n  title?: React.ReactNode;\n\n  /**\n   * List of fields to render\n   */\n  fields: FieldObject[];\n\n  access?: Set<Scope>;\n  features?: Record<string, any>;\n\n  /**\n   * The name of the field that should be highlighted\n   */\n  highlighted?: string;\n\n  /**\n   * Renders inside of PanelBody at the start\n   */\n  renderHeader?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Renders inside of PanelBody before PanelBody close\n   */\n  renderFooter?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Disables the entire form\n   */\n  disabled?: boolean;\n};\n\nexport default class FormPanel extends React.Component<Props> {\n  static defaultProps: DefaultProps = {\n    additionalFieldProps: {},\n  };\n\n  render() {\n    const {\n      title,\n      fields,\n      access,\n      disabled,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      ...otherProps\n    } = this.props;\n\n    return (\n      <Panel id={typeof title === 'string' ? sanitizeQuerySelector(title) : undefined}>\n        {title && <PanelHeader>{title}</PanelHeader>}\n        <PanelBody>\n          {typeof renderHeader === 'function' && renderHeader({title, fields})}\n\n          {fields.map(field => {\n            if (typeof field === 'function') {\n              return field();\n            }\n\n            const {defaultValue: _, ...fieldWithoutDefaultValue} = field;\n\n            // Allow the form panel disabled prop to override the fields\n            // disabled prop, with fallback to the fields disabled state.\n            if (disabled === true) {\n              fieldWithoutDefaultValue.disabled = true;\n              fieldWithoutDefaultValue.disabledReason = undefined;\n            }\n\n            return (\n              <FieldFromConfig\n                access={access}\n                disabled={disabled}\n                key={field.name}\n                {...otherProps}\n                {...additionalFieldProps}\n                field={fieldWithoutDefaultValue}\n                highlighted={this.props.highlighted === `#${field.name}`}\n              />\n            );\n          })}\n          {typeof renderFooter === 'function' && renderFooter({title, fields})}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n","import * as React from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport * as Sentry from '@sentry/react';\nimport scrollToElement from 'scroll-to-element';\n\nimport {defined} from 'app/utils';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\n\nimport FormPanel from './formPanel';\nimport {Field, FieldObject, JsonFormObject} from './type';\n\ntype Props = {\n  /**\n   * Fields that are grouped by \"section\"\n   */\n  forms?: JsonFormObject[];\n\n  /**\n   * If `forms` is not defined, `title` + `fields` must be required.\n   * Allows more fine grain control of title/fields\n   */\n  fields?: FieldObject[];\n\n  additionalFieldProps?: {[key: string]: any};\n} & WithRouterProps &\n  Omit<\n    React.ComponentProps<typeof FormPanel>,\n    'highlighted' | 'fields' | 'additionalFieldProps'\n  >;\n\ntype State = {\n  // Field name that should be highlighted\n  highlighted?: string;\n};\n\nclass JsonForm extends React.Component<Props, State> {\n  state: State = {\n    // location.hash is optional because of tests.\n    highlighted: this.props.location?.hash,\n  };\n\n  componentDidMount() {\n    this.scrollToHash();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (this.props.location.hash !== nextProps.location.hash) {\n      const hash = nextProps.location.hash;\n      this.scrollToHash(hash);\n      this.setState({highlighted: hash});\n    }\n  }\n\n  scrollToHash(toHash?: string): void {\n    // location.hash is optional because of tests.\n    const hash = toHash || this.props.location?.hash;\n\n    if (!hash) {\n      return;\n    }\n\n    // Push onto callback queue so it runs after the DOM is updated,\n    // this is required when navigating from a different page so that\n    // the element is rendered on the page before trying to getElementById.\n    try {\n      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {\n        align: 'middle',\n        offset: -100,\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n  }\n\n  shouldDisplayForm(fields: FieldObject[]) {\n    const fieldsWithVisibleProp = fields.filter(\n      field => typeof field !== 'function' && defined(field?.visible)\n    ) as Array<Omit<Field, 'visible'> & Required<Pick<Field, 'visible'>>>;\n\n    if (fields.length === fieldsWithVisibleProp.length) {\n      const {additionalFieldProps, ...props} = this.props;\n\n      const areAllFieldsHidden = fieldsWithVisibleProp.every(field => {\n        if (typeof field.visible === 'function') {\n          return !field.visible({...props, ...additionalFieldProps});\n        }\n        return !field.visible;\n      });\n\n      return !areAllFieldsHidden;\n    }\n\n    return true;\n  }\n\n  renderForm({\n    fields,\n    formPanelProps,\n    title,\n  }: {\n    fields: FieldObject[];\n    formPanelProps: Pick<\n      Props,\n      | 'access'\n      | 'disabled'\n      | 'features'\n      | 'additionalFieldProps'\n      | 'renderFooter'\n      | 'renderHeader'\n    > &\n      Pick<State, 'highlighted'>;\n    title?: React.ReactNode;\n  }) {\n    const shouldDisplayForm = this.shouldDisplayForm(fields);\n\n    if (\n      !shouldDisplayForm &&\n      !formPanelProps?.renderFooter &&\n      !formPanelProps?.renderHeader\n    ) {\n      return null;\n    }\n\n    return <FormPanel title={title} fields={fields} {...formPanelProps} />;\n  }\n\n  render() {\n    const {\n      access,\n      fields,\n      title,\n      forms,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      location: _location,\n      ...otherProps\n    } = this.props;\n\n    const formPanelProps = {\n      access,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      highlighted: this.state.highlighted,\n    };\n\n    return (\n      <div {...otherProps}>\n        {typeof forms !== 'undefined' &&\n          forms.map((formGroup, i) => (\n            <React.Fragment key={i}>\n              {this.renderForm({formPanelProps, ...formGroup})}\n            </React.Fragment>\n          ))}\n        {typeof forms === 'undefined' &&\n          typeof fields !== 'undefined' &&\n          this.renderForm({fields, formPanelProps, title})}\n      </div>\n    );\n  }\n}\n\nexport default withRouter(JsonForm);\n","import * as React from 'react';\n\nimport Access from 'app/components/acl/access';\nimport Alert from 'app/components/alert';\nimport {IconWarning} from 'app/icons';\nimport {t} from 'app/locale';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> &\n  Pick<React.ComponentProps<typeof Access>, 'access'>;\n\nconst PermissionAlert = ({access = ['project:write'], ...props}: Props) => (\n  <Access access={access}>\n    {({hasAccess}) =>\n      !hasAccess && (\n        <Alert type=\"warning\" icon={<IconWarning size=\"xs\" />} {...props}>\n          {t(\n            'These settings can only be edited by users with the organization owner, manager, or admin role.'\n          )}\n        </Alert>\n      )\n    }\n  </Access>\n);\n\nexport default PermissionAlert;\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport AlertLink from 'app/components/alertLink';\nimport Button from 'app/components/button';\nimport {PanelAlert} from 'app/components/panels';\nimport PluginList from 'app/components/pluginList';\nimport {fields} from 'app/data/forms/projectAlerts';\nimport {IconMail} from 'app/icons';\nimport {t} from 'app/locale';\nimport {Organization, Plugin, Project} from 'app/types';\nimport routeTitleGen from 'app/utils/routeTitle';\nimport AsyncView from 'app/views/asyncView';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport PermissionAlert from 'app/views/settings/project/permissionAlert';\n\ntype RouteParams = {orgId: string; projectId: string};\ntype Props = RouteComponentProps<RouteParams, {}> &\n  AsyncView['props'] & {\n    canEditRule: boolean;\n    organization: Organization;\n    project: Project;\n  };\n\ntype State = AsyncView['state'] & {\n  project: Project | null;\n  pluginList: Array<Plugin> | null;\n};\n\nclass Settings extends AsyncView<Props, State> {\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      project: null,\n      pluginList: [],\n    };\n  }\n  getProjectEndpoint({orgId, projectId}: RouteParams) {\n    return `/projects/${orgId}/${projectId}/`;\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {params} = this.props;\n    const {orgId, projectId} = params;\n    const projectEndpoint = this.getProjectEndpoint(params);\n    return [\n      ['project', projectEndpoint],\n      ['pluginList', `/projects/${orgId}/${projectId}/plugins/`],\n    ];\n  }\n\n  handleEnablePlugin = (plugin: Plugin) => {\n    this.setState(prevState => ({\n      pluginList: (prevState.pluginList ?? []).map(p => {\n        if (p.id !== plugin.id) {\n          return p;\n        }\n        return {\n          ...plugin,\n          enabled: true,\n        };\n      }),\n    }));\n  };\n\n  handleDisablePlugin = (plugin: Plugin) => {\n    this.setState(prevState => ({\n      pluginList: (prevState.pluginList ?? []).map(p => {\n        if (p.id !== plugin.id) {\n          return p;\n        }\n        return {\n          ...plugin,\n          enabled: false,\n        };\n      }),\n    }));\n  };\n\n  getTitle() {\n    const {projectId} = this.props.params;\n    return routeTitleGen(t('Alerts Settings'), projectId, false);\n  }\n\n  renderBody() {\n    const {canEditRule, organization, params} = this.props;\n    const {orgId} = params;\n    const {project, pluginList} = this.state;\n\n    if (!project) {\n      return null;\n    }\n\n    const projectEndpoint = this.getProjectEndpoint(params);\n\n    return (\n      <Fragment>\n        <SettingsPageHeader\n          title={t('Alerts Settings')}\n          action={\n            <Button\n              to={{\n                pathname: `/organizations/${orgId}/alerts/rules/`,\n                query: {project: project.id},\n              }}\n              size=\"small\"\n            >\n              {t('View Alert Rules')}\n            </Button>\n          }\n        />\n        <PermissionAlert />\n        <AlertLink to=\"/settings/account/notifications/\" icon={<IconMail />}>\n          {t(\n            'Looking to fine-tune your personal notification preferences? Visit your Account Settings'\n          )}\n        </AlertLink>\n\n        <Form\n          saveOnBlur\n          allowUndo\n          initialData={{\n            subjectTemplate: project.subjectTemplate,\n            digestsMinDelay: project.digestsMinDelay,\n            digestsMaxDelay: project.digestsMaxDelay,\n          }}\n          apiMethod=\"PUT\"\n          apiEndpoint={projectEndpoint}\n        >\n          <JsonForm\n            disabled={!canEditRule}\n            title={t('Email Settings')}\n            fields={[fields.subjectTemplate]}\n          />\n\n          <JsonForm\n            title={t('Digests')}\n            disabled={!canEditRule}\n            fields={[fields.digestsMinDelay, fields.digestsMaxDelay]}\n            renderHeader={() => (\n              <PanelAlert type=\"info\">\n                {t(\n                  'Sentry will automatically digest alerts sent by some services to avoid flooding your inbox with individual issue notifications. To control how frequently notifications are delivered, use the sliders below.'\n                )}\n              </PanelAlert>\n            )}\n          />\n        </Form>\n\n        {canEditRule && (\n          <PluginList\n            organization={organization}\n            project={project}\n            pluginList={(pluginList ?? []).filter(\n              p => p.type === 'notification' && p.hasConfiguration\n            )}\n            onEnablePlugin={this.handleEnablePlugin}\n            onDisablePlugin={this.handleDisablePlugin}\n          />\n        )}\n      </Fragment>\n    );\n  }\n}\n\nexport default Settings;\n"],"sourceRoot":""}