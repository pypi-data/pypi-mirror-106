{"version":3,"sources":["webpack:///./app/components/issues/compactIssue.tsx","webpack:///./app/views/asyncView.tsx"],"names":["CompactIssueHeader","this","props","data","organization","projectId","eventId","basePath","slug","issueLink","id","commentColor","subscriptionDetails","reason","Fragment","IssueHeaderMetaWrapper","StyledErrorLevel","size","level","title","className","IconLink","to","status","isBookmarked","isSolid","project","numComments","color","getMessage","Component","CompactIssue","createReactClass","displayName","mixins","Reflux","GroupStore","getInitialState","issue","componentWillReceiveProps","nextProps","setState","onGroupChange","itemIds","has","onSnooze","duration","ignoreDuration","onUpdate","state","addLoadingMessage","t","bulkUpdate","api","orgId","complete","clearIndicators","render","hasSeen","statsPeriod","IssueRow","onClick","toggleSelect","children","withApi","withOrganization","ErrorLevel","space","Link","PanelItem","AsyncView","getTitle","renderComponent","AsyncComponent"],"mappings":"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","file":"app_components_issues_compactIssue_tsx-app_views_asyncView_tsx.44d29e8d0b148131d31c.js","sourcesContent":["import {Component, Fragment} from 'react';\nimport styled from '@emotion/styled';\nimport createReactClass from 'create-react-class';\nimport Reflux from 'reflux';\n\nimport {bulkUpdate} from 'app/actionCreators/group';\nimport {addLoadingMessage, clearIndicators} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport EventOrGroupTitle from 'app/components/eventOrGroupTitle';\nimport ErrorLevel from 'app/components/events/errorLevel';\nimport Link from 'app/components/links/link';\nimport {PanelItem} from 'app/components/panels';\nimport GroupChart from 'app/components/stream/groupChart';\nimport {IconChat, IconMute, IconStar} from 'app/icons';\nimport {t} from 'app/locale';\nimport GroupStore from 'app/stores/groupStore';\nimport space from 'app/styles/space';\nimport {Group, LightWeightOrganization} from 'app/types';\nimport {getMessage} from 'app/utils/events';\nimport {Aliases} from 'app/utils/theme';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\n\ntype HeaderProps = {\n  organization: LightWeightOrganization;\n  projectId: string;\n  data: Group;\n  eventId?: string;\n};\n\nclass CompactIssueHeader extends Component<HeaderProps> {\n  render() {\n    const {data, organization, projectId, eventId} = this.props;\n\n    const basePath = `/organizations/${organization.slug}/issues/`;\n\n    const issueLink = eventId\n      ? `/organizations/${organization.slug}/projects/${projectId}/events/${eventId}/`\n      : `${basePath}${data.id}/`;\n\n    const commentColor: keyof Aliases =\n      data.subscriptionDetails && data.subscriptionDetails.reason === 'mentioned'\n        ? 'success'\n        : 'textColor';\n\n    return (\n      <Fragment>\n        <IssueHeaderMetaWrapper>\n          <StyledErrorLevel size=\"12px\" level={data.level} title={data.level} />\n          <h3 className=\"truncate\">\n            <IconLink to={issueLink || ''}>\n              {data.status === 'ignored' && <IconMute size=\"xs\" />}\n              {data.isBookmarked && <IconStar isSolid size=\"xs\" />}\n              <EventOrGroupTitle data={data} />\n            </IconLink>\n          </h3>\n        </IssueHeaderMetaWrapper>\n        <div className=\"event-extra\">\n          <span className=\"project-name\">\n            <strong>{data.project.slug}</strong>\n          </span>\n          {data.numComments !== 0 && (\n            <span>\n              <IconLink to={`${basePath}${data.id}/activity/`} className=\"comments\">\n                <IconChat size=\"xs\" color={commentColor} />\n                <span className=\"tag-count\">{data.numComments}</span>\n              </IconLink>\n            </span>\n          )}\n          <span className=\"culprit\">{getMessage(data)}</span>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\ntype Props = {\n  api: Client;\n  id: string;\n  organization: LightWeightOrganization;\n  statsPeriod?: string;\n  eventId?: string;\n  data?: Group;\n};\n\ntype State = {\n  issue: Group;\n};\n\nconst CompactIssue = createReactClass<Props, State>({\n  displayName: 'CompactIssue',\n\n  mixins: [Reflux.listenTo(GroupStore, 'onGroupChange') as any],\n\n  getInitialState() {\n    return {\n      issue: this.props.data || GroupStore.get(this.props.id),\n    };\n  },\n\n  componentWillReceiveProps(nextProps: Props) {\n    if (nextProps.id !== this.props.id) {\n      this.setState({\n        issue: GroupStore.get(this.props.id),\n      });\n    }\n  },\n\n  onGroupChange(itemIds: Set<string>) {\n    if (!itemIds.has(this.props.id)) {\n      return;\n    }\n    const id = this.props.id;\n    const issue = GroupStore.get(id);\n    this.setState({\n      issue,\n    });\n  },\n\n  onSnooze(duration) {\n    const data: Record<string, string> = {\n      status: 'ignored',\n    };\n\n    if (duration) {\n      data.ignoreDuration = duration;\n    }\n\n    this.onUpdate(data);\n  },\n\n  onUpdate(data: Record<string, string>) {\n    const issue = this.state.issue;\n    addLoadingMessage(t('Saving changes\\u2026'));\n\n    bulkUpdate(\n      this.props.api,\n      {\n        orgId: this.props.organization.slug,\n        projectId: issue.project.slug,\n        itemIds: [issue.id],\n        data,\n      },\n      {\n        complete: () => {\n          clearIndicators();\n        },\n      }\n    );\n  },\n\n  render() {\n    const issue = this.state.issue;\n    const {organization} = this.props;\n\n    let className = 'issue';\n    if (issue.isBookmarked) {\n      className += ' isBookmarked';\n    }\n    if (issue.hasSeen) {\n      className += ' hasSeen';\n    }\n    if (issue.status === 'resolved') {\n      className += ' isResolved';\n    }\n    if (issue.status === 'ignored') {\n      className += ' isIgnored';\n    }\n    if (this.props.statsPeriod) {\n      className += ' with-graph';\n    }\n\n    return (\n      <IssueRow className={className} onClick={this.toggleSelect}>\n        <CompactIssueHeader\n          data={issue}\n          organization={organization}\n          projectId={issue.project.slug}\n          eventId={this.props.eventId}\n        />\n        {this.props.statsPeriod && (\n          <div className=\"event-graph\">\n            <GroupChart statsPeriod={this.props.statsPeriod} data={this.props.data} />\n          </div>\n        )}\n        {this.props.children}\n      </IssueRow>\n    );\n  },\n});\n\nexport {CompactIssue};\nexport default withApi(withOrganization(CompactIssue));\n\nconst IssueHeaderMetaWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst StyledErrorLevel = styled(ErrorLevel)`\n  display: block;\n  margin-right: ${space(1)};\n`;\n\nconst IconLink = styled(Link)`\n  & > svg {\n    margin-right: ${space(0.5)};\n  }\n`;\n\nconst IssueRow = styled(PanelItem)`\n  padding-top: ${space(1.5)};\n  padding-bottom: ${space(0.75)};\n  flex-direction: column;\n`;\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n"],"sourceRoot":""}