{"version":3,"sources":["webpack:///./app/views/settings/components/forms/form.tsx"],"names":["Form","props","context","model","FormModel","e","skipPreventDefault","preventDefault","isSaving","onPreSubmit","onSubmit","getData","onSubmitSuccess","onSubmitError","saveForm","data","submitSuccess","error","submitError","saveOnBlur","apiEndpoint","apiMethod","resetOnError","onFieldChange","initialData","allowUndo","setInitialData","setFormOptions","this","form","reset","className","children","footerClass","footerStyle","submitDisabled","submitLabel","submitPriority","cancelLabel","onCancel","extraButton","requireChanges","hideFooter","shouldShowFooter","data-test-id","isRenderFunc","StyledFooter","style","DefaultButtons","type","disabled","onClick","marginLeft","t","priority","isError","formChanged","React","PropTypes","p","Panel","space"],"mappings":"mwCAgEqBA,E,wcAMnB,WAAYC,EAAcC,GAAkB,sBAC1C,cAAMD,EAAOC,IAD6B,0BAsCzB,EAAKD,MAAME,OAAS,IAAIC,MAtCC,8BAwCjC,SAAAC,GAAK,SACb,EAAKJ,MAAMK,oBAAsBD,EAAEE,iBAChC,EAAKJ,MAAMK,WAIf,eAAKP,OAAMQ,mBAAX,iBAEI,EAAKR,MAAMS,SACb,EAAKT,MAAMS,SACT,EAAKP,MAAMQ,UACX,EAAKC,gBACL,EAAKC,cACLR,EACA,EAAKF,OAGP,EAAKA,MAAMW,gBAzD6B,qCA6D1B,SAAAC,GAAQ,IACjBH,EAAmB,EAAKX,MAAxBW,gBACP,EAAKT,MAAMa,cAAcD,GAErBH,GACFA,EAAgBG,EAAM,EAAKZ,WAlEa,mCAsE5B,SAAAc,GAAS,IAChBJ,EAAiB,EAAKZ,MAAtBY,cACP,EAAKV,MAAMe,YAAYD,GAEnBJ,GACFA,EAAcI,EAAO,EAAKd,UA3Ec,IAGxCgB,EASElB,EATFkB,WACAC,EAQEnB,EARFmB,YACAC,EAOEpB,EAPFoB,UACAC,EAMErB,EANFqB,aACAV,EAKEX,EALFW,gBACAC,EAIEZ,EAJFY,cACAU,EAGEtB,EAHFsB,cACAC,EAEEvB,EAFFuB,YACAC,EACExB,EADFwB,UAXwC,OAc1C,EAAKtB,MAAMuB,eAAeF,GAC1B,EAAKrB,MAAMwB,eAAe,CACxBL,eACAG,YACAF,gBACAX,kBACAC,gBACAM,aACAC,cACAC,cAvBwC,E,8CA2B5C,WACE,MAAO,CACLF,WAAYS,KAAK3B,MAAMkB,WACvBU,KAAMD,KAAKzB,S,kCAIf,WACEyB,KAAKzB,MAAM2B,U,oBA4Cb,WAAS,aAeHF,KAAK3B,MAbP8B,EAFK,EAELA,UACAC,EAHK,EAGLA,SACAC,EAJK,EAILA,YACAC,EALK,EAKLA,YACAC,EANK,EAMLA,eACAC,EAPK,EAOLA,YACAC,EARK,EAQLA,eACAC,EATK,EASLA,YACAC,EAVK,EAULA,SACAC,EAXK,EAWLA,YACAC,EAZK,EAYLA,eACAtB,EAbK,EAaLA,WACAuB,EAdK,EAcLA,WAEIC,OACkB,IAAfD,GAA8BA,GAAcvB,EAErD,OACE,gBACET,SAAUkB,KAAKlB,SACfqB,UAAWA,UAAa,eACxBa,eAAchB,KAAK3B,MAAM,gBAH3B,WAKE,yBACG4C,OAAyBb,GAAYA,EAAS,CAAC7B,MAAOyB,KAAKzB,QAAU6B,IAGvEW,IACC,QAACG,EAAD,CACEf,UAAWE,EACXc,MAAOb,EACPf,WAAYA,EAHd,UAKGqB,GACD,QAACQ,EAAD,WACGT,IACC,QAAC,KAAD,UACG,kBACC,QAAC,KAAD,CACEU,KAAK,SACLC,SAAU,EAAK/C,MAAMK,SACrB2C,QAASZ,EACTQ,MAAO,CAACK,WAAY,GAJtB,SAMGd,WAAee,OAAE,gBAM1B,QAAC,KAAD,UACG,kBACC,QAAC,KAAD,CACET,eAAa,cACbU,SAAUjB,UAAkB,UAC5Ba,SACE,EAAK/C,MAAMoD,SACX,EAAKpD,MAAMK,UACX2B,KACCM,IAAkB,EAAKtC,MAAMqD,YAEhCP,KAAK,SATP,SAWGb,WAAeiB,OAAE,kC,GAtJJI,aAAbzD,E,2BAAAA,E,oBACQ,CACzBmB,WAAYuC,SACZ7B,KAAM6B,aA+JV,IAAMZ,GAAe,OAAO,MAAP,sBAAH,2IASd,SAAAa,GAAC,OACAA,EAAExC,YAAH,cAEAyC,IAFA,+SAVc,KA6BZZ,GAAiB,OAAO,MAAP,sBAAH,0BAENa,OAAM,GAFA","file":"app_views_settings_components_forms_form_tsx.56a0623b0799bd0d9c94.js","sourcesContent":["import * as React from 'react';\nimport styled from '@emotion/styled';\nimport {Observer} from 'mobx-react';\nimport PropTypes from 'prop-types';\n\nimport {APIRequestMethod} from 'app/api';\nimport Button from 'app/components/button';\nimport Panel from 'app/components/panels/panel';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {isRenderFunc} from 'app/utils/isRenderFunc';\nimport FormModel, {FormOptions} from 'app/views/settings/components/forms/model';\n\ntype Data = Record<string, any>;\n\ntype RenderProps = {\n  model: FormModel;\n};\n\ntype RenderFunc = (props: RenderProps) => React.ReactNode;\n\ntype Props = {\n  apiMethod?: APIRequestMethod;\n  apiEndpoint?: string;\n  children?: React.ReactNode | RenderFunc;\n  className?: string;\n  cancelLabel?: string;\n  submitDisabled?: boolean;\n  submitLabel?: string;\n  submitPriority?: React.ComponentProps<typeof Button>['priority'];\n  footerClass?: string;\n  footerStyle?: React.CSSProperties;\n  extraButton?: React.ReactNode;\n  initialData?: Data;\n  // Require changes before able to submit form\n  requireChanges?: boolean;\n  // Reset form when there are errors; after submit\n  resetOnError?: boolean;\n  hideFooter?: boolean;\n  allowUndo?: boolean;\n  // Save field on control blur\n  saveOnBlur?: boolean;\n  model?: FormModel;\n  // if set to true, preventDefault is not called\n  skipPreventDefault?: boolean;\n  additionalFieldProps?: {[key: string]: any};\n  'data-test-id'?: string;\n\n  onCancel?: (e: React.MouseEvent) => void;\n  onSubmit?: (\n    data: Data,\n    onSubmitSuccess: (data: Data) => void,\n    onSubmitError: (error: any) => void,\n    e: React.FormEvent,\n    model: FormModel\n  ) => void;\n  onPreSubmit?: () => void;\n} & Pick<FormOptions, 'onSubmitSuccess' | 'onSubmitError' | 'onFieldChange'>;\n\ntype Context = {\n  saveOnBlur: boolean;\n  form: FormModel;\n};\n\nexport default class Form extends React.Component<Props> {\n  static childContextTypes = {\n    saveOnBlur: PropTypes.bool,\n    form: PropTypes.object,\n  };\n\n  constructor(props: Props, context: Context) {\n    super(props, context);\n    const {\n      saveOnBlur,\n      apiEndpoint,\n      apiMethod,\n      resetOnError,\n      onSubmitSuccess,\n      onSubmitError,\n      onFieldChange,\n      initialData,\n      allowUndo,\n    } = props;\n\n    this.model.setInitialData(initialData);\n    this.model.setFormOptions({\n      resetOnError,\n      allowUndo,\n      onFieldChange,\n      onSubmitSuccess,\n      onSubmitError,\n      saveOnBlur,\n      apiEndpoint,\n      apiMethod,\n    });\n  }\n\n  getChildContext() {\n    return {\n      saveOnBlur: this.props.saveOnBlur,\n      form: this.model,\n    };\n  }\n\n  componentWillUnmount() {\n    this.model.reset();\n  }\n\n  model: FormModel = this.props.model || new FormModel();\n\n  onSubmit = e => {\n    !this.props.skipPreventDefault && e.preventDefault();\n    if (this.model.isSaving) {\n      return;\n    }\n\n    this.props.onPreSubmit?.();\n\n    if (this.props.onSubmit) {\n      this.props.onSubmit(\n        this.model.getData(),\n        this.onSubmitSuccess,\n        this.onSubmitError,\n        e,\n        this.model\n      );\n    } else {\n      this.model.saveForm();\n    }\n  };\n\n  onSubmitSuccess = data => {\n    const {onSubmitSuccess} = this.props;\n    this.model.submitSuccess(data);\n\n    if (onSubmitSuccess) {\n      onSubmitSuccess(data, this.model);\n    }\n  };\n\n  onSubmitError = error => {\n    const {onSubmitError} = this.props;\n    this.model.submitError(error);\n\n    if (onSubmitError) {\n      onSubmitError(error, this.model);\n    }\n  };\n\n  render() {\n    const {\n      className,\n      children,\n      footerClass,\n      footerStyle,\n      submitDisabled,\n      submitLabel,\n      submitPriority,\n      cancelLabel,\n      onCancel,\n      extraButton,\n      requireChanges,\n      saveOnBlur,\n      hideFooter,\n    } = this.props;\n    const shouldShowFooter =\n      typeof hideFooter !== 'undefined' ? !hideFooter : !saveOnBlur;\n\n    return (\n      <form\n        onSubmit={this.onSubmit}\n        className={className ?? 'form-stacked'}\n        data-test-id={this.props['data-test-id']}\n      >\n        <div>\n          {isRenderFunc<RenderFunc>(children) ? children({model: this.model}) : children}\n        </div>\n\n        {shouldShowFooter && (\n          <StyledFooter\n            className={footerClass}\n            style={footerStyle}\n            saveOnBlur={saveOnBlur}\n          >\n            {extraButton}\n            <DefaultButtons>\n              {onCancel && (\n                <Observer>\n                  {() => (\n                    <Button\n                      type=\"button\"\n                      disabled={this.model.isSaving}\n                      onClick={onCancel}\n                      style={{marginLeft: 5}}\n                    >\n                      {cancelLabel ?? t('Cancel')}\n                    </Button>\n                  )}\n                </Observer>\n              )}\n\n              <Observer>\n                {() => (\n                  <Button\n                    data-test-id=\"form-submit\"\n                    priority={submitPriority ?? 'primary'}\n                    disabled={\n                      this.model.isError ||\n                      this.model.isSaving ||\n                      submitDisabled ||\n                      (requireChanges ? !this.model.formChanged : false)\n                    }\n                    type=\"submit\"\n                  >\n                    {submitLabel ?? t('Save Changes')}\n                  </Button>\n                )}\n              </Observer>\n            </DefaultButtons>\n          </StyledFooter>\n        )}\n      </form>\n    );\n  }\n}\n\nconst StyledFooter = styled('div')<{saveOnBlur?: boolean}>`\n  display: flex;\n  justify-content: flex-end;\n  margin-top: 25px;\n  border-top: 1px solid #e9ebec;\n  background: none;\n  padding: 16px 0 0;\n  margin-bottom: 16px;\n\n  ${p =>\n    !p.saveOnBlur &&\n    `\n  ${Panel} & {\n    margin-top: 0;\n    padding-right: 36px;\n  }\n\n  /* Better padding with form inside of a modal */\n  [role='document'] & {\n    padding-right: 30px;\n    margin-left: -30px;\n    margin-right: -30px;\n    margin-bottom: -30px;\n    margin-top: 16px;\n    padding-bottom: 16px;\n  }\n  `};\n`;\n\nconst DefaultButtons = styled('div')`\n  display: grid;\n  grid-gap: ${space(1)};\n  grid-auto-flow: column;\n  justify-content: flex-end;\n  flex: 1;\n`;\n"],"sourceRoot":""}