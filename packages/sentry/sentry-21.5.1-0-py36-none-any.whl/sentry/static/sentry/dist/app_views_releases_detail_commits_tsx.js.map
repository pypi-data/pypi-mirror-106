{"version":3,"sources":["webpack:///./app/views/releases/detail/commits.tsx"],"names":["Commits","this","props","params","projectSlug","orgId","routeTitleGen","t","formatVersion","release","commits","activeRepository","activeReleaseRepo","location","orgSlug","query","getQuery","encodeURIComponent","state","commitsPageLinks","length","name","commitsByRepository","getCommitsByRepository","reposToRender","getReposToRender","Object","keys","Fragment","map","repoName","commit","id","pageLinks","router","releaseRepos","repositories","renderContent","fullWidth","AsyncView","withReleaseRepos"],"mappings":"unFAgCMA,E,0iBACJ,WAAW,MACqBC,KAAKC,MAA5BC,EADE,EACFA,OAAQC,EADN,EACMA,YACRC,EAASF,EAATE,MAEP,OAAOC,QACLC,OAAE,wBAAwBC,QAAcL,EAAOM,UAC/CJ,GACA,EACAD,K,6BAIJ,WACE,mFAEEM,QAAS,O,0BAIb,WAAsD,MAOhDT,KAAKC,MALPE,EAFkD,EAElDA,YACmBO,EAH+B,EAGlDC,kBACAC,EAJkD,EAIlDA,SACAC,EALkD,EAKlDA,QACAL,EANkD,EAMlDA,QAGIM,GAAQC,QAAS,CAACH,WAAUF,qBAElC,MAAO,CACL,CACE,UADF,oBAEeG,EAFf,YAE0BV,EAF1B,qBAEkDa,mBAC9CR,GAHJ,aAKE,CAACM,a,2BAKP,WAAgB,MACsBd,KAAKiB,MAAlCR,EADO,EACPA,QAASS,EADF,EACEA,iBACTP,EAAqBX,KAAKC,MAA1BU,kBAEP,IAAKF,EAAQU,OACX,OACE,QAAC,IAAD,UACIR,GAEEL,OACE,0EACAK,EAAkBS,OAHpBd,OAAE,wDASZ,IAAMe,GAAsBC,QAAuBb,GAC7Cc,GAAgBC,QAAiBC,OAAOC,KAAKL,IAEnD,OACE,QAAC,EAAAM,SAAD,WACGJ,EAAcK,KAAI,SAAAC,GAAQ,aACzB,QAAC,KAAD,YACE,QAAC,KAAD,UAAcA,KACd,QAAC,IAAD,oBACGR,EAAoBQ,UADvB,aACG,EAA+BD,KAAI,SAAAE,GAAM,OACxC,QAAC,IAAD,CAA2BA,OAAQA,GAAnBA,EAAOC,WAJjBF,OASd,QAAC,IAAD,CAAYG,UAAWd,S,wBAK7B,WAAa,MACiDlB,KAAKC,MAA1DW,EADI,EACJA,SAAUqB,EADN,EACMA,OAAQtB,EADd,EACcA,kBAAmBuB,EADjC,EACiCA,aAE5C,OACE,QAAC,EAAAP,SAAD,WACGO,EAAaf,OAAS,IACrB,QAAC,IAAD,CACEgB,aAAcD,EACdxB,iBAAkBC,EAClBC,SAAUA,EACVqB,OAAQA,IAGXjC,KAAKoC,qB,6BAKZ,WACE,OACE,QAAC,KAAD,WACE,QAAC,KAAD,CAAMC,WAAS,EAAf,iF,GApGcC,KA0GtB,SAAeC,OAAiBxC","file":"app_views_releases_detail_commits_tsx.327709bb9d008126c973.js","sourcesContent":["import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport {Location} from 'history';\n\nimport CommitRow from 'app/components/commitRow';\nimport {Body, Main} from 'app/components/layouts/thirds';\nimport Pagination from 'app/components/pagination';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {t} from 'app/locale';\nimport {Commit, Organization, Project, Repository} from 'app/types';\nimport {formatVersion} from 'app/utils/formatters';\nimport routeTitleGen from 'app/utils/routeTitle';\nimport AsyncView from 'app/views/asyncView';\n\nimport EmptyState from './emptyState';\nimport RepositorySwitcher from './repositorySwitcher';\nimport {getCommitsByRepository, getQuery, getReposToRender} from './utils';\nimport withReleaseRepos from './withReleaseRepos';\n\ntype Props = RouteComponentProps<{orgId: string; release: string}, {}> & {\n  location: Location;\n  projectSlug: Project['slug'];\n  orgSlug: Organization['slug'];\n  release: string;\n  releaseRepos: Repository[];\n  activeReleaseRepo?: Repository;\n} & AsyncView['props'];\n\ntype State = {\n  commits: Commit[];\n} & AsyncView['state'];\n\nclass Commits extends AsyncView<Props, State> {\n  getTitle() {\n    const {params, projectSlug} = this.props;\n    const {orgId} = params;\n\n    return routeTitleGen(\n      t('Commits - Release %s', formatVersion(params.release)),\n      orgId,\n      false,\n      projectSlug\n    );\n  }\n\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      commits: [],\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {\n      projectSlug,\n      activeReleaseRepo: activeRepository,\n      location,\n      orgSlug,\n      release,\n    } = this.props;\n\n    const query = getQuery({location, activeRepository});\n\n    return [\n      [\n        'commits',\n        `/projects/${orgSlug}/${projectSlug}/releases/${encodeURIComponent(\n          release\n        )}/commits/`,\n        {query},\n      ],\n    ];\n  }\n\n  renderContent() {\n    const {commits, commitsPageLinks} = this.state;\n    const {activeReleaseRepo} = this.props;\n\n    if (!commits.length) {\n      return (\n        <EmptyState>\n          {!activeReleaseRepo\n            ? t('There are no commits associated with this release.')\n            : t(\n                'There are no commits associated with this release in the %s repository.',\n                activeReleaseRepo.name\n              )}\n        </EmptyState>\n      );\n    }\n\n    const commitsByRepository = getCommitsByRepository(commits);\n    const reposToRender = getReposToRender(Object.keys(commitsByRepository));\n\n    return (\n      <Fragment>\n        {reposToRender.map(repoName => (\n          <Panel key={repoName}>\n            <PanelHeader>{repoName}</PanelHeader>\n            <PanelBody>\n              {commitsByRepository[repoName]?.map(commit => (\n                <CommitRow key={commit.id} commit={commit} />\n              ))}\n            </PanelBody>\n          </Panel>\n        ))}\n        <Pagination pageLinks={commitsPageLinks} />\n      </Fragment>\n    );\n  }\n\n  renderBody() {\n    const {location, router, activeReleaseRepo, releaseRepos} = this.props;\n\n    return (\n      <Fragment>\n        {releaseRepos.length > 1 && (\n          <RepositorySwitcher\n            repositories={releaseRepos}\n            activeRepository={activeReleaseRepo}\n            location={location}\n            router={router}\n          />\n        )}\n        {this.renderContent()}\n      </Fragment>\n    );\n  }\n\n  renderComponent() {\n    return (\n      <Body>\n        <Main fullWidth>{super.renderComponent()}</Main>\n      </Body>\n    );\n  }\n}\n\nexport default withReleaseRepos(Commits);\n"],"sourceRoot":""}