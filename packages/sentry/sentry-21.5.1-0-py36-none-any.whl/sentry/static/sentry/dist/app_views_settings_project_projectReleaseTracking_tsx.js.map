{"version":3,"sources":["webpack:///./app/components/inactivePlugins.tsx","webpack:///./app/components/pluginList.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/stores/pluginsStore.tsx","webpack:///./app/utils/withPlugins.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/project/projectReleaseTracking.tsx"],"names":["InactivePlugins","plugins","onEnablePlugin","length","t","Plugins","map","plugin","IntegrationButton","onClick","className","id","Label","StyledPluginIcon","pluginId","shortName","name","space","p","theme","fontSizeSmall","borderRadius","PluginIcon","PluginList","organization","project","pluginList","onDisablePlugin","handleDisablePlugin","disablePlugin","projectId","slug","orgId","filter","enabled","data","isHidden","enablePlugin","routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","defaultState","loading","error","pageLinks","PluginStoreConfig","state","updating","Map","reset","this","getInitialState","getState","Array","from","values","init","listenTo","PluginActions","onFetchAll","onFetchAllSuccess","onFetchAllError","onUpdate","onUpdateSuccess","onUpdateError","triggerState","trigger","resetLoading","err","updateObj","get","newPlugin","set","_updateObj","origPlugin","Reflux","WrappedComponent","withOrganization","withProject","createReactClass","displayName","getDisplayName","mixins","PluginsStore","componentDidMount","fetchPlugins","componentDidUpdate","prevProps","_prevState","prevContext","props","prevOrg","prevProject","defined","isOrgSame","isProjectSame","render","store","AsyncView","title","getTitle","renderComponent","AsyncComponent","placeholderData","token","webhookUrl","ProjectReleaseTracking","params","api","request","method","success","setState","addSuccessMessage","addErrorMessage","routeTitleGen","allowError","status","hasWrite","access","includes","type","hasConfiguration","getDynamicText","value","fixed","icon","size","withPadding","tct","link","href","release","label","help","disabled","priority","onConfirm","handleRegenerateToken","message","getReleaseWebhookIntructions","withPlugins"],"mappings":"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","file":"app_views_settings_project_projectReleaseTracking_tsx.1bdd74c890d1fb9e1f70.js","sourcesContent":["import styled from '@emotion/styled';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport TextOverflow from 'app/components/textOverflow';\nimport {t} from 'app/locale';\nimport PluginIcon from 'app/plugins/components/pluginIcon';\nimport space from 'app/styles/space';\nimport {Plugin} from 'app/types';\n\ntype Props = {\n  plugins: Plugin[];\n  onEnablePlugin: (plugin: Plugin) => void;\n};\n\nconst InactivePlugins = ({plugins, onEnablePlugin}: Props) => {\n  if (plugins.length === 0) {\n    return null;\n  }\n\n  return (\n    <Panel>\n      <PanelHeader>{t('Inactive Integrations')}</PanelHeader>\n\n      <PanelBody>\n        <Plugins>\n          {plugins.map(plugin => (\n            <IntegrationButton\n              key={plugin.id}\n              onClick={() => onEnablePlugin(plugin)}\n              className={`ref-plugin-enable-${plugin.id}`}\n            >\n              <Label>\n                <StyledPluginIcon pluginId={plugin.id} />\n                <TextOverflow>{plugin.shortName || plugin.name}</TextOverflow>\n              </Label>\n            </IntegrationButton>\n          ))}\n        </Plugins>\n      </PanelBody>\n    </Panel>\n  );\n};\n\nconst Plugins = styled('div')`\n  display: flex;\n  padding: ${space(1)};\n  flex: 1;\n  flex-wrap: wrap;\n`;\n\nconst IntegrationButton = styled('button')`\n  margin: ${space(1)};\n  width: 175px;\n  text-align: center;\n  font-size: ${p => p.theme.fontSizeSmall};\n  color: #889ab0;\n  letter-spacing: 0.1px;\n  font-weight: 600;\n  text-transform: uppercase;\n  border: 1px solid #eee;\n  background: inherit;\n  border-radius: ${p => p.theme.borderRadius};\n  padding: 10px;\n\n  &:hover {\n    border-color: #ccc;\n  }\n`;\n\nconst Label = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst StyledPluginIcon = styled(PluginIcon)`\n  margin-right: ${space(1)};\n`;\n\nexport default InactivePlugins;\n","import {disablePlugin, enablePlugin} from 'app/actionCreators/plugins';\nimport InactivePlugins from 'app/components/inactivePlugins';\nimport PluginConfig from 'app/components/pluginConfig';\nimport {t} from 'app/locale';\nimport {Organization, Plugin, Project} from 'app/types';\n\nimport {Panel, PanelItem} from './panels';\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n  pluginList: Plugin[];\n  onDisablePlugin?: (plugin: Plugin) => void;\n  onEnablePlugin?: (plugin: Plugin) => void;\n};\n\nconst PluginList = ({\n  organization,\n  project,\n  pluginList,\n  onDisablePlugin = () => {},\n  onEnablePlugin = () => {},\n}: Props) => {\n  const handleEnablePlugin = (plugin: Plugin) => {\n    enablePlugin({\n      projectId: project.slug,\n      orgId: organization.slug,\n      pluginId: plugin.slug,\n    });\n\n    onEnablePlugin(plugin);\n  };\n\n  const handleDisablePlugin = (plugin: Plugin) => {\n    disablePlugin({\n      projectId: project.slug,\n      orgId: organization.slug,\n      pluginId: plugin.slug,\n    });\n\n    onDisablePlugin(plugin);\n  };\n\n  if (!pluginList.length) {\n    return (\n      <Panel>\n        <PanelItem>\n          {t(\"Oops! Looks like there aren't any available integrations installed.\")}\n        </PanelItem>\n      </Panel>\n    );\n  }\n\n  return (\n    <div>\n      {pluginList\n        .filter(p => p.enabled)\n        .map(data => (\n          <PluginConfig\n            data={data}\n            organization={organization}\n            project={project}\n            key={data.id}\n            onDisablePlugin={handleDisablePlugin}\n          />\n        ))}\n\n      <InactivePlugins\n        plugins={pluginList.filter(p => !p.enabled && !p.isHidden)}\n        onEnablePlugin={handleEnablePlugin}\n      />\n    </div>\n  );\n};\n\nexport default PluginList;\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import Reflux from 'reflux';\n\nimport PluginActions from 'app/actions/pluginActions';\nimport {Plugin} from 'app/types';\n\ntype PluginStoreInterface = {\n  state: {\n    loading: boolean;\n    plugins: Plugin[];\n    error: Error | null;\n    pageLinks: string | null;\n  };\n  plugins: Map<string, Plugin> | null;\n  updating: Map<string, Plugin>;\n};\n\nconst defaultState = {\n  loading: true,\n  plugins: [],\n  error: null,\n  pageLinks: null,\n};\n\nconst PluginStoreConfig: Reflux.StoreDefinition & PluginStoreInterface = {\n  plugins: null,\n  state: {...defaultState},\n  updating: new Map(),\n\n  reset() {\n    //reset our state\n    this.plugins = null;\n    this.state = {...defaultState};\n    this.updating = new Map();\n    return this.state;\n  },\n\n  getInitialState() {\n    return this.getState();\n  },\n\n  getState() {\n    const {plugins: _plugins, ...state} = this.state;\n\n    return {\n      ...state,\n      plugins: this.plugins ? Array.from(this.plugins.values()) : [],\n    };\n  },\n\n  init() {\n    this.reset();\n    this.listenTo(PluginActions.fetchAll, this.onFetchAll);\n    this.listenTo(PluginActions.fetchAllSuccess, this.onFetchAllSuccess);\n    this.listenTo(PluginActions.fetchAllError, this.onFetchAllError);\n    this.listenTo(PluginActions.update, this.onUpdate);\n    this.listenTo(PluginActions.updateSuccess, this.onUpdateSuccess);\n    this.listenTo(PluginActions.updateError, this.onUpdateError);\n  },\n\n  triggerState() {\n    this.trigger(this.getState());\n  },\n\n  onFetchAll({resetLoading}: {resetLoading?: boolean} = {}) {\n    if (resetLoading) {\n      this.state.loading = true;\n      this.state.error = null;\n      this.plugins = null;\n    }\n\n    this.triggerState();\n  },\n\n  onFetchAllSuccess(data: Plugin[], {pageLinks}: {pageLinks?: string}) {\n    this.plugins = new Map(data.map(plugin => [plugin.id, plugin]));\n    this.state.pageLinks = pageLinks || null;\n    this.state.loading = false;\n    this.triggerState();\n  },\n\n  onFetchAllError(err) {\n    this.plugins = null;\n    this.state.loading = false;\n    this.state.error = err;\n    this.triggerState();\n  },\n\n  onUpdate(id: string, updateObj: Partial<Plugin>) {\n    if (!this.plugins) {\n      return;\n    }\n\n    const plugin = this.plugins.get(id);\n    if (!plugin) {\n      return;\n    }\n    const newPlugin = {\n      ...plugin,\n      ...updateObj,\n    };\n\n    this.plugins.set(id, newPlugin);\n    this.updating.set(id, plugin);\n    this.triggerState();\n  },\n\n  onUpdateSuccess(id: string, _updateObj: Partial<Plugin>) {\n    this.updating.delete(id);\n  },\n\n  onUpdateError(id: string, _updateObj: Partial<Plugin>, err) {\n    const origPlugin = this.updating.get(id);\n    if (!origPlugin || !this.plugins) {\n      return;\n    }\n\n    this.plugins.set(id, origPlugin);\n    this.updating.delete(id);\n    this.state.error = err;\n    this.triggerState();\n  },\n};\n\ntype PluginStore = Reflux.Store & PluginStoreInterface;\n\nconst PluginStore = Reflux.createStore(PluginStoreConfig);\n\nexport default PluginStore as PluginStore;\n","import * as React from 'react';\nimport createReactClass from 'create-react-class';\nimport Reflux from 'reflux';\n\nimport {fetchPlugins} from 'app/actionCreators/plugins';\nimport PluginsStore from 'app/stores/pluginsStore';\nimport {Organization, Plugin, Project} from 'app/types';\nimport {defined} from 'app/utils';\nimport getDisplayName from 'app/utils/getDisplayName';\nimport withOrganization from 'app/utils/withOrganization';\nimport withProject from 'app/utils/withProject';\n\ntype WithPluginProps = {\n  organization: Organization;\n  project?: Project;\n};\n\ntype InjectedPluginProps = {\n  plugins: {plugins: Plugin[]; loading: boolean};\n};\n\n/**\n * Higher order component that fetches list of plugins and\n * passes PluginsStore to component as `plugins`\n */\nconst withPlugins = <P extends WithPluginProps>(\n  WrappedComponent: React.ComponentType<P>\n) =>\n  withOrganization(\n    withProject(\n      createReactClass<Omit<P, keyof InjectedPluginProps> & WithPluginProps, {}>({\n        displayName: `withPlugins(${getDisplayName(WrappedComponent)})`,\n        mixins: [Reflux.connect(PluginsStore, 'store') as any],\n\n        componentDidMount() {\n          this.fetchPlugins();\n        },\n\n        componentDidUpdate(prevProps, _prevState, prevContext) {\n          const {organization, project} = this.props;\n\n          // Only fetch plugins when a org slug or project slug has changed\n          const prevOrg =\n            prevProps.organization || (prevContext && prevContext.organization);\n          const prevProject = prevProps.project || (prevContext && prevContext.project);\n\n          // If previous org/project is undefined then it means:\n          // the HoC has mounted, `fetchPlugins` has been called (via cDM), and\n          // store was updated. We don't need to fetchPlugins again (or it will cause an infinite loop)\n          //\n          // This is for the unusual case where component is mounted and receives a new org/project prop\n          // e.g. when switching projects via breadcrumbs in settings.\n          if (!defined(prevProject) || !defined(prevOrg)) {\n            return;\n          }\n\n          const isOrgSame = prevOrg.slug === organization.slug;\n          const isProjectSame = prevProject.slug === project?.slug;\n\n          // Don't do anything if org and project are the same\n          if (isOrgSame && isProjectSame) {\n            return;\n          }\n\n          this.fetchPlugins();\n        },\n\n        fetchPlugins() {\n          const {organization, project} = this.props;\n\n          if (!project || !organization) {\n            return;\n          }\n\n          fetchPlugins({projectId: project.slug, orgId: organization.slug});\n        },\n\n        render() {\n          return (\n            <WrappedComponent\n              {...(this.props as P & WithPluginProps)}\n              plugins={this.state.store}\n            />\n          );\n        },\n      })\n    )\n  );\n\nexport default withPlugins;\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import {WithRouterProps} from 'react-router';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport Alert from 'app/components/alert';\nimport AutoSelectText from 'app/components/autoSelectText';\nimport Button from 'app/components/button';\nimport Confirm from 'app/components/confirm';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport PluginList from 'app/components/pluginList';\nimport {IconFlag} from 'app/icons';\nimport {t, tct} from 'app/locale';\nimport {Organization, Plugin, Project} from 'app/types';\nimport getDynamicText from 'app/utils/getDynamicText';\nimport routeTitleGen from 'app/utils/routeTitle';\nimport withPlugins from 'app/utils/withPlugins';\nimport AsyncView from 'app/views/asyncView';\nimport Field from 'app/views/settings/components/forms/field';\nimport TextCopyInput from 'app/views/settings/components/forms/textCopyInput';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\n\nconst TOKEN_PLACEHOLDER = 'YOUR_TOKEN';\nconst WEBHOOK_PLACEHOLDER = 'YOUR_WEBHOOK_URL';\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n  plugins: {plugins: Plugin[]; loading: boolean};\n} & WithRouterProps<{orgId: string; projectId: string}, {}>;\n\ntype State = {\n  data: {\n    token: string;\n    webhookUrl: string;\n  } | null;\n} & AsyncView['state'];\n\nconst placeholderData = {\n  token: TOKEN_PLACEHOLDER,\n  webhookUrl: WEBHOOK_PLACEHOLDER,\n};\n\nclass ProjectReleaseTracking extends AsyncView<Props, State> {\n  getTitle() {\n    const {projectId} = this.props.params;\n    return routeTitleGen(t('Releases'), projectId, false);\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {orgId, projectId} = this.props.params;\n\n    // Allow 403s\n    return [\n      [\n        'data',\n        `/projects/${orgId}/${projectId}/releases/token/`,\n        {},\n        {allowError: err => err && err.status === 403},\n      ],\n    ];\n  }\n\n  handleRegenerateToken = () => {\n    const {orgId, projectId} = this.props.params;\n    this.api.request(`/projects/${orgId}/${projectId}/releases/token/`, {\n      method: 'POST',\n      data: {project: projectId},\n      success: data => {\n        this.setState({\n          data: {\n            token: data.token,\n            webhookUrl: data.webhookUrl,\n          },\n        });\n        addSuccessMessage(\n          t(\n            'Your deploy token has been regenerated. You will need to update any existing deploy hooks.'\n          )\n        );\n      },\n      error: () => {\n        addErrorMessage(t('Unable to regenerate deploy token, please try again'));\n      },\n    });\n  };\n\n  getReleaseWebhookIntructions() {\n    const {webhookUrl} = this.state.data || placeholderData;\n    return (\n      'curl ' +\n      webhookUrl +\n      ' \\\\' +\n      '\\n  ' +\n      '-X POST \\\\' +\n      '\\n  ' +\n      \"-H 'Content-Type: application/json' \\\\\" +\n      '\\n  ' +\n      '-d \\'{\"version\": \"abcdefg\"}\\''\n    );\n  }\n\n  renderBody() {\n    const {organization, project, plugins} = this.props;\n    const hasWrite = organization.access.includes('project:write');\n\n    if (plugins.loading) {\n      return <LoadingIndicator />;\n    }\n\n    const pluginList = plugins.plugins.filter(\n      (p: Plugin) => p.type === 'release-tracking' && p.hasConfiguration\n    );\n\n    let {token, webhookUrl} = this.state.data || placeholderData;\n\n    token = getDynamicText({value: token, fixed: '__TOKEN__'});\n    webhookUrl = getDynamicText({value: webhookUrl, fixed: '__WEBHOOK_URL__'});\n\n    return (\n      <div>\n        <SettingsPageHeader title={t('Release Tracking')} />\n        {!hasWrite && (\n          <Alert icon={<IconFlag size=\"md\" />} type=\"warning\">\n            {t(\n              'You do not have sufficient permissions to access Release tokens, placeholders are displayed below.'\n            )}\n          </Alert>\n        )}\n        <p>\n          {t(\n            'Configure release tracking for this project to automatically record new releases of your application.'\n          )}\n        </p>\n\n        <Panel>\n          <PanelHeader>{t('Client Configuration')}</PanelHeader>\n          <PanelBody withPadding>\n            <p>\n              {tct(\n                'Start by binding the [release] attribute in your application, take a look at [link] to see how to configure this for the SDK you are using.',\n                {\n                  link: (\n                    <a href=\"https://docs.sentry.io/platform-redirect/?next=/configuration/releases/\">\n                      our docs\n                    </a>\n                  ),\n                  release: <code>release</code>,\n                }\n              )}\n            </p>\n            <p>\n              {t(\n                \"This will annotate each event with the version of your application, as well as automatically create a release entity in the system the first time it's seen.\"\n              )}\n            </p>\n            <p>\n              {t(\n                'In addition you may configure a release hook (or use our API) to push a release and include additional metadata with it.'\n              )}\n            </p>\n          </PanelBody>\n        </Panel>\n\n        <Panel>\n          <PanelHeader>{t('Deploy Token')}</PanelHeader>\n          <PanelBody>\n            <Field\n              label={t('Token')}\n              help={t('A unique secret which is used to generate deploy hook URLs')}\n            >\n              <TextCopyInput>{token}</TextCopyInput>\n            </Field>\n            <Field\n              label={t('Regenerate Token')}\n              help={t(\n                'If a service becomes compromised, you should regenerate the token and re-configure any deploy hooks with the newly generated URL.'\n              )}\n            >\n              <div>\n                <Confirm\n                  disabled={!hasWrite}\n                  priority=\"danger\"\n                  onConfirm={this.handleRegenerateToken}\n                  message={t(\n                    'Are you sure you want to regenerate your token? Your current token will no longer be usable.'\n                  )}\n                >\n                  <Button type=\"button\" priority=\"danger\" disabled={!hasWrite}>\n                    {t('Regenerate Token')}\n                  </Button>\n                </Confirm>\n              </div>\n            </Field>\n          </PanelBody>\n        </Panel>\n\n        <Panel>\n          <PanelHeader>{t('Webhook')}</PanelHeader>\n          <PanelBody withPadding>\n            <p>\n              {t(\n                'If you simply want to integrate with an existing system, sometimes its easiest just to use a webhook.'\n              )}\n            </p>\n\n            <AutoSelectText>\n              <pre>{webhookUrl}</pre>\n            </AutoSelectText>\n\n            <p>\n              {t(\n                'The release webhook accepts the same parameters as the \"Create a new Release\" API endpoint.'\n              )}\n            </p>\n\n            {getDynamicText({\n              value: (\n                <AutoSelectText>\n                  <pre>{this.getReleaseWebhookIntructions()}</pre>\n                </AutoSelectText>\n              ),\n              fixed: (\n                <pre>\n                  {`curl __WEBHOOK_URL__ \\\\\n  -X POST \\\\\n  -H 'Content-Type: application/json' \\\\\n  -d \\'{\"version\": \"abcdefg\"}\\'`}\n                </pre>\n              ),\n            })}\n          </PanelBody>\n        </Panel>\n\n        <PluginList\n          organization={organization}\n          project={project}\n          pluginList={pluginList}\n        />\n\n        <Panel>\n          <PanelHeader>{t('API')}</PanelHeader>\n          <PanelBody withPadding>\n            <p>\n              {t(\n                'You can notify Sentry when you release new versions of your application via our HTTP API.'\n              )}\n            </p>\n\n            <p>\n              {tct('See the [link:releases documentation] for more information.', {\n                link: <a href=\"https://docs.sentry.io/workflow/releases/\" />,\n              })}\n            </p>\n          </PanelBody>\n        </Panel>\n      </div>\n    );\n  }\n}\n\nexport default withPlugins(ProjectReleaseTracking);\n\n// Export for tests\nexport {ProjectReleaseTracking};\n"],"sourceRoot":""}