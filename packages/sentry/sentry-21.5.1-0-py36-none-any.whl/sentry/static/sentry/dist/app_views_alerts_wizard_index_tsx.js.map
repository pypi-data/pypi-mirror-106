{"version":3,"sources":["webpack:///./app/components/sentryDocumentTitle.tsx","webpack:///./app/views/alerts/builder/builderBreadCrumbs.tsx","webpack:///./app/views/alerts/wizard/radioPanelGroup.tsx","webpack:///./app/views/alerts/wizard/index.tsx","webpack:///./app/views/alerts/wizard/options.tsx","webpack:///./images/spot/alerts-wizard-apdex.svg","webpack:///./images/spot/alerts-wizard-cls.svg","webpack:///./images/spot/alerts-wizard-custom.svg","webpack:///./images/spot/alerts-wizard-errors.svg","webpack:///./images/spot/alerts-wizard-failure-rate.svg","webpack:///./images/spot/alerts-wizard-fid.svg","webpack:///./images/spot/alerts-wizard-issues.svg","webpack:///./images/spot/alerts-wizard-lcp.svg","webpack:///./images/spot/alerts-wizard-throughput.svg","webpack:///./images/spot/alerts-wizard-transaction-duration.svg","webpack:///./images/spot/alerts-wizard-users-experiencing-errors.svg"],"names":["SentryDocumentTitle","title","orgSlug","projectSlug","children","docTitle","BuilderBreadCrumbs","props","hasMetricAlerts","alertName","crumbs","to","label","t","preserveGlobalSelection","push","StyledBreadcrumbs","Breadcrumbs","space","RadioPanelGroup","value","choices","onChange","Container","role","aria-labelledby","map","index","id","name","extraContent","RadioPanel","RadioLineItem","aria-checked","radioSize","aria-label","checked","e","p","theme","subText","textColor","AlertWizard","alertOption","organization","setState","trackAnalyticsEvent","eventKey","eventName","organization_id","alert_type","this","project","location","state","metricRuleTemplate","AlertWizardRuleTemplates","isMetricAlert","isTransactionDataset","dataset","Dataset","pathname","slug","query","createFromWizard","referrer","noFeatureMessage","features","requireAll","hookName","renderDisabled","body","hideHelpToggle","message","featureName","hasFeature","WizardButtonContainer","onClick","disabled","priority","hideIcon","projectId","params","panelContent","AlertWizardPanelContent","Fragment","StyledLayoutBody","fullWidth","WizardBody","WizardOptions","Styledh2","AlertWizardOptions","i","categoryHeading","options","OptionsWrapper","alertType","AlertWizardAlertNames","handleChangeAlertOption","WizardPanel","visible","WizardPanelBody","withPadding","PanelDescription","description","docsLink","href","WizardImage","src","illustration","ExampleHeader","ExampleList","symbol","examples","example","ExampleItem","WizardFooter","renderCreateAlertButton","Component","Layout","fontSizeExtraLarge","Panel","List","PanelBody","fontSizeLarge","ListItem","fontSizeMedium","border","Set","issues","num_errors","users_experiencing_errors","throughput","trans_duration","apdex","failure_rate","lcp","fid","cls","custom","diagramIssues","diagramErrors","diagramUsers","diagramThroughput","diagramTransactionDuration","diagramApdex","diagramFailureRate","diagramLCP","diagramFID","diagramCLS","diagramCustom","aggregate","eventTypes","EventTypes","hidePrimarySelectorSet","hideParameterSelectorSet","getFunctionHelpText","timeWindowText","labelText","has","module","exports"],"mappings":"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","file":"app_views_alerts_wizard_index_tsx.c72b094321a9ff54cc3c.js","sourcesContent":["import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\ntype Props = {\n  // Main page title\n  title: string;\n  orgSlug?: string;\n  projectSlug?: string;\n  children?: React.ReactNode;\n};\n\nfunction SentryDocumentTitle({title, orgSlug, projectSlug, children}: Props) {\n  function getDocTitle() {\n    if (!orgSlug && !projectSlug) {\n      return title;\n    }\n\n    if (orgSlug && projectSlug) {\n      return `${title} - ${orgSlug} - ${projectSlug}`;\n    }\n\n    if (orgSlug) {\n      return `${title} - ${orgSlug}`;\n    }\n\n    return `${title} - ${projectSlug}`;\n  }\n\n  const docTitle = getDocTitle();\n\n  return (\n    <DocumentTitle title={`${docTitle} - Sentry`}>\n      {children as React.ReactChild}\n    </DocumentTitle>\n  );\n}\n\nexport default SentryDocumentTitle;\n","import styled from '@emotion/styled';\n\nimport Breadcrumbs, {Crumb} from 'app/components/breadcrumbs';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\n\ntype Props = {\n  hasMetricAlerts: boolean;\n  orgSlug: string;\n  title: string;\n  projectSlug: string;\n  alertName?: string;\n};\n\nfunction BuilderBreadCrumbs(props: Props) {\n  const {hasMetricAlerts, orgSlug, title, alertName, projectSlug} = props;\n  const crumbs: Crumb[] = [\n    {\n      to: hasMetricAlerts\n        ? `/organizations/${orgSlug}/alerts/`\n        : `/organizations/${orgSlug}/alerts/rules/`,\n      label: t('Alerts'),\n      preserveGlobalSelection: true,\n    },\n    {\n      label: title,\n      ...(alertName\n        ? {\n            to: `/organizations/${orgSlug}/alerts/${projectSlug}/wizard`,\n            preserveGlobalSelection: true,\n          }\n        : {}),\n    },\n  ];\n  if (alertName) {\n    crumbs.push({label: alertName});\n  }\n\n  return <StyledBreadcrumbs crumbs={crumbs} />;\n}\n\nconst StyledBreadcrumbs = styled(Breadcrumbs)`\n  font-size: 18px;\n  margin-bottom: ${space(3)};\n`;\n\nexport default BuilderBreadCrumbs;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport Radio from 'app/components/radio';\nimport space from 'app/styles/space';\n\ntype RadioPanelGroupProps<C extends string> = {\n  label: string;\n  /**\n   * An array of [id, name]\n   */\n  choices: [C, React.ReactNode, React.ReactNode?][];\n  value: string | null;\n  onChange: (id: C, e: React.FormEvent<HTMLInputElement>) => void;\n};\n\ntype Props<C extends string> = RadioPanelGroupProps<C> &\n  Omit<React.HTMLAttributes<HTMLDivElement>, keyof RadioPanelGroupProps<C>>;\n\nconst RadioPanelGroup = <C extends string>({\n  value,\n  choices,\n  label,\n  onChange,\n  ...props\n}: Props<C>) => (\n  <Container {...props} role=\"radiogroup\" aria-labelledby={label}>\n    {(choices || []).map(([id, name, extraContent], index) => (\n      <RadioPanel key={index}>\n        <RadioLineItem role=\"radio\" index={index} aria-checked={value === id}>\n          <Radio\n            radioSize=\"small\"\n            aria-label={id}\n            checked={value === id}\n            onChange={(e: React.FormEvent<HTMLInputElement>) => onChange(id, e)}\n          />\n          <div>{name}</div>\n          {extraContent}\n        </RadioLineItem>\n      </RadioPanel>\n    ))}\n  </Container>\n);\n\nexport default RadioPanelGroup;\n\nconst Container = styled('div')`\n  display: grid;\n  grid-gap: ${space(1)};\n  grid-auto-flow: row;\n  grid-auto-rows: max-content;\n  grid-auto-columns: auto;\n`;\n\nexport const RadioLineItem = styled('label')<{\n  index: number;\n}>`\n  display: grid;\n  grid-gap: ${space(0.25)} ${space(1)};\n  grid-template-columns: max-content auto max-content;\n  align-items: center;\n  cursor: pointer;\n  outline: none;\n  font-weight: normal;\n  margin: 0;\n  color: ${p => p.theme.subText};\n  transition: color 0.3s ease-in;\n  padding: 0;\n  position: relative;\n\n  &:hover,\n  &:focus {\n    color: ${p => p.theme.textColor};\n  }\n\n  svg {\n    display: none;\n    opacity: 0;\n  }\n\n  &[aria-checked='true'] {\n    color: ${p => p.theme.textColor};\n  }\n`;\n\nconst RadioPanel = styled('div')`\n  margin: 0;\n`;\n","import {Component, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport Feature from 'app/components/acl/feature';\nimport FeatureDisabled from 'app/components/acl/featureDisabled';\nimport CreateAlertButton from 'app/components/createAlertButton';\nimport Hovercard from 'app/components/hovercard';\nimport * as Layout from 'app/components/layouts/thirds';\nimport ExternalLink from 'app/components/links/externalLink';\nimport List from 'app/components/list';\nimport ListItem from 'app/components/list/listItem';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization, Project} from 'app/types';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\nimport BuilderBreadCrumbs from 'app/views/alerts/builder/builderBreadCrumbs';\nimport {Dataset} from 'app/views/settings/incidentRules/types';\n\nimport {\n  AlertType,\n  AlertWizardAlertNames,\n  AlertWizardOptions,\n  AlertWizardPanelContent,\n  AlertWizardRuleTemplates,\n} from './options';\nimport RadioPanelGroup from './radioPanelGroup';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  organization: Organization;\n  project: Project;\n  hasMetricAlerts: boolean;\n};\n\ntype State = {\n  alertOption: AlertType;\n};\nclass AlertWizard extends Component<Props, State> {\n  state: State = {\n    alertOption: 'issues',\n  };\n\n  handleChangeAlertOption = (alertOption: AlertType) => {\n    const {organization} = this.props;\n    this.setState({alertOption});\n    trackAnalyticsEvent({\n      eventKey: 'alert_wizard.option_viewed',\n      eventName: 'Alert Wizard: Option Viewed',\n      organization_id: organization.id,\n      alert_type: alertOption,\n    });\n  };\n\n  renderCreateAlertButton() {\n    const {organization, project, location} = this.props;\n    const {alertOption} = this.state;\n    const metricRuleTemplate = AlertWizardRuleTemplates[alertOption];\n    const isMetricAlert = !!metricRuleTemplate;\n    const isTransactionDataset = metricRuleTemplate?.dataset === Dataset.TRANSACTIONS;\n\n    const to = {\n      pathname: `/organizations/${organization.slug}/alerts/${project.slug}/new/`,\n      query: {\n        ...(metricRuleTemplate && metricRuleTemplate),\n        createFromWizard: true,\n        referrer: location?.query?.referrer,\n      },\n    };\n\n    const noFeatureMessage = t('Requires incidents feature.');\n    const renderNoAccess = p => (\n      <Hovercard\n        body={\n          <FeatureDisabled\n            features={p.features}\n            hideHelpToggle\n            message={noFeatureMessage}\n            featureName={noFeatureMessage}\n          />\n        }\n      >\n        {p.children(p)}\n      </Hovercard>\n    );\n\n    return (\n      <Feature\n        features={\n          isTransactionDataset\n            ? ['incidents', 'performance-view']\n            : isMetricAlert\n            ? ['incidents']\n            : []\n        }\n        requireAll\n        organization={organization}\n        hookName=\"feature-disabled:alert-wizard-performance\"\n        renderDisabled={renderNoAccess}\n      >\n        {({hasFeature}) => (\n          <WizardButtonContainer\n            onClick={() =>\n              trackAnalyticsEvent({\n                eventKey: 'alert_wizard.option_selected',\n                eventName: 'Alert Wizard: Option Selected',\n                organization_id: organization.id,\n                alert_type: alertOption,\n              })\n            }\n          >\n            <CreateAlertButton\n              organization={organization}\n              projectSlug={project.slug}\n              disabled={!hasFeature}\n              priority=\"primary\"\n              to={to}\n              hideIcon\n            >\n              {t('Set Conditions')}\n            </CreateAlertButton>\n          </WizardButtonContainer>\n        )}\n      </Feature>\n    );\n  }\n\n  render() {\n    const {\n      hasMetricAlerts,\n      organization,\n      params: {projectId},\n    } = this.props;\n    const {alertOption} = this.state;\n    const title = t('Alert Creation Wizard');\n    const panelContent = AlertWizardPanelContent[alertOption];\n    return (\n      <Fragment>\n        <SentryDocumentTitle title={title} projectSlug={projectId} />\n\n        <Feature features={['organizations:alert-wizard']}>\n          <Layout.Header>\n            <Layout.HeaderContent>\n              <BuilderBreadCrumbs\n                hasMetricAlerts={hasMetricAlerts}\n                orgSlug={organization.slug}\n                projectSlug={projectId}\n                title={t('Select Alert')}\n              />\n              <Layout.Title>{t('Select Alert')}</Layout.Title>\n            </Layout.HeaderContent>\n          </Layout.Header>\n          <StyledLayoutBody>\n            <Layout.Main fullWidth>\n              <WizardBody>\n                <WizardOptions>\n                  <Styledh2>{t('Errors')}</Styledh2>\n                  {AlertWizardOptions.map(({categoryHeading, options}, i) => (\n                    <OptionsWrapper key={categoryHeading}>\n                      {i > 0 && <Styledh2>{categoryHeading}</Styledh2>}\n                      <RadioPanelGroup\n                        choices={options.map(alertType => {\n                          return [alertType, AlertWizardAlertNames[alertType]];\n                        })}\n                        onChange={this.handleChangeAlertOption}\n                        value={alertOption}\n                        label=\"alert-option\"\n                      />\n                    </OptionsWrapper>\n                  ))}\n                </WizardOptions>\n                <WizardPanel visible={!!panelContent && !!alertOption}>\n                  <WizardPanelBody>\n                    <div>\n                      <PanelHeader>{AlertWizardAlertNames[alertOption]}</PanelHeader>\n                      <PanelBody withPadding>\n                        <PanelDescription>\n                          {panelContent.description}{' '}\n                          {panelContent.docsLink && (\n                            <ExternalLink href={panelContent.docsLink}>\n                              {t('Learn more')}\n                            </ExternalLink>\n                          )}\n                        </PanelDescription>\n                        <WizardImage src={panelContent.illustration} />\n                        <ExampleHeader>{t('Examples')}</ExampleHeader>\n                        <ExampleList symbol=\"bullet\">\n                          {panelContent.examples.map((example, i) => (\n                            <ExampleItem key={i}>{example}</ExampleItem>\n                          ))}\n                        </ExampleList>\n                      </PanelBody>\n                    </div>\n                    <WizardFooter>{this.renderCreateAlertButton()}</WizardFooter>\n                  </WizardPanelBody>\n                </WizardPanel>\n              </WizardBody>\n            </Layout.Main>\n          </StyledLayoutBody>\n        </Feature>\n      </Fragment>\n    );\n  }\n}\n\nconst StyledLayoutBody = styled(Layout.Body)`\n  margin-bottom: -${space(3)};\n`;\n\nconst Styledh2 = styled('h2')`\n  font-weight: normal;\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  margin-bottom: ${space(1)} !important;\n`;\n\nconst WizardBody = styled('div')`\n  display: flex;\n  padding-top: ${space(1)};\n`;\n\nconst WizardOptions = styled('div')`\n  flex: 3;\n  margin-right: ${space(3)};\n  padding-right: ${space(3)};\n  max-width: 300px;\n`;\n\nconst WizardImage = styled('img')`\n  max-height: 300px;\n`;\n\nconst WizardPanel = styled(Panel)<{visible?: boolean}>`\n  max-width: 700px;\n  position: sticky;\n  top: 20px;\n  flex: 5;\n  display: flex;\n  ${p => !p.visible && 'visibility: hidden'};\n  flex-direction: column;\n  align-items: start;\n  align-self: flex-start;\n  ${p => p.visible && 'animation: 0.6s pop ease forwards'};\n\n  @keyframes pop {\n    0% {\n      transform: translateY(30px);\n      opacity: 0;\n    }\n    100% {\n      transform: translateY(0);\n      opacity: 1;\n    }\n  }\n`;\n\nconst ExampleList = styled(List)`\n  margin-bottom: ${space(2)} !important;\n`;\n\nconst WizardPanelBody = styled(PanelBody)`\n  flex: 1;\n  min-width: 100%;\n`;\n\nconst PanelDescription = styled('p')`\n  margin-bottom: ${space(2)};\n`;\n\nconst ExampleHeader = styled('div')`\n  margin: 0 0 ${space(1)} 0;\n  font-size: ${p => p.theme.fontSizeLarge};\n`;\n\nconst ExampleItem = styled(ListItem)`\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nconst OptionsWrapper = styled('div')`\n  margin-bottom: ${space(4)};\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nconst WizardFooter = styled('div')`\n  border-top: 1px solid ${p => p.theme.border};\n  padding: ${space(1.5)} ${space(1.5)} ${space(1.5)} ${space(1.5)};\n`;\n\nconst WizardButtonContainer = styled('div')`\n  display: flex;\n  justify-content: flex-end;\n`;\n\nexport default AlertWizard;\n","import diagramApdex from 'sentry-images/spot/alerts-wizard-apdex.svg';\nimport diagramCLS from 'sentry-images/spot/alerts-wizard-cls.svg';\nimport diagramCustom from 'sentry-images/spot/alerts-wizard-custom.svg';\nimport diagramErrors from 'sentry-images/spot/alerts-wizard-errors.svg';\nimport diagramFailureRate from 'sentry-images/spot/alerts-wizard-failure-rate.svg';\nimport diagramFID from 'sentry-images/spot/alerts-wizard-fid.svg';\nimport diagramIssues from 'sentry-images/spot/alerts-wizard-issues.svg';\nimport diagramLCP from 'sentry-images/spot/alerts-wizard-lcp.svg';\nimport diagramThroughput from 'sentry-images/spot/alerts-wizard-throughput.svg';\nimport diagramTransactionDuration from 'sentry-images/spot/alerts-wizard-transaction-duration.svg';\nimport diagramUsers from 'sentry-images/spot/alerts-wizard-users-experiencing-errors.svg';\n\nimport {t} from 'app/locale';\nimport {Dataset, EventTypes} from 'app/views/settings/incidentRules/types';\n\nexport type AlertType =\n  | 'issues'\n  | 'num_errors'\n  | 'users_experiencing_errors'\n  | 'throughput'\n  | 'trans_duration'\n  | 'apdex'\n  | 'failure_rate'\n  | 'lcp'\n  | 'fid'\n  | 'cls'\n  | 'custom';\n\nexport const WebVitalAlertTypes = new Set(['lcp', 'fid', 'cls', 'fcp']);\n\nexport const AlertWizardAlertNames: Record<AlertType, string> = {\n  issues: t('Issues'),\n  num_errors: t('Number of Errors'),\n  users_experiencing_errors: t('Users Experiencing Errors'),\n  throughput: t('Throughput'),\n  trans_duration: t('Transaction Duration'),\n  apdex: t('Apdex'),\n  failure_rate: t('Failure Rate'),\n  lcp: t('Largest Contentful Paint'),\n  fid: t('First Input Delay'),\n  cls: t('Cumulative Layout Shift'),\n  custom: t('Custom Metric'),\n};\n\nexport const AlertWizardOptions: {\n  categoryHeading: string;\n  options: AlertType[];\n}[] = [\n  {\n    categoryHeading: t('Errors'),\n    options: ['issues', 'num_errors', 'users_experiencing_errors'],\n  },\n  {\n    categoryHeading: t('Performance'),\n    options: [\n      'throughput',\n      'trans_duration',\n      'apdex',\n      'failure_rate',\n      'lcp',\n      'fid',\n      'cls',\n    ],\n  },\n  {\n    categoryHeading: t('Other'),\n    options: ['custom'],\n  },\n];\n\ntype PanelContent = {\n  description: string;\n  docsLink?: string;\n  examples: string[];\n  illustration?: string;\n};\n\nexport const AlertWizardPanelContent: Record<AlertType, PanelContent> = {\n  issues: {\n    description: t(\n      'Issues are groups of errors that have a similar stacktrace. Set an alert for new issues, when an issue changes state, frequency of errors, or users affected by an issue.'\n    ),\n    examples: [\n      t(\"When the triggering event's level is fatal.\"),\n      t('When an issue was seen 100 times in the last 2 days.'),\n      t(\n        'Create a JIRA ticket when an issue changes state from resolved to unresolved and is unassigned.'\n      ),\n    ],\n    illustration: diagramIssues,\n  },\n  num_errors: {\n    description: t(\n      'Alert when the number of errors in a project matching your filters crosses a threshold. This is useful for monitoring the overall level or errors in your project or errors occurring in specific parts of your app.'\n    ),\n    examples: [\n      t('When the signup page has more than 10k errors in 5 minutes.'),\n      t('When there are more than 500k errors in 10 minutes from a specific file.'),\n    ],\n    illustration: diagramErrors,\n  },\n  users_experiencing_errors: {\n    description: t(\n      'Alert when the number of users affected by errors in your project crosses a threshold.'\n    ),\n    examples: [\n      t('When 100k users experience an error in 1 hour.'),\n      t('When 100 users experience a problem on the Checkout page.'),\n    ],\n    illustration: diagramUsers,\n  },\n  throughput: {\n    description: t(\n      'Throughput is the total number of transactions in a project and you can alert when it reaches a threshold within a period of time.'\n    ),\n    examples: [\n      t('When number of transactions on a key page exceeds 100k per minute.'),\n      t('When number of transactions drops below a threshold.'),\n    ],\n    illustration: diagramThroughput,\n  },\n  trans_duration: {\n    description: t(\n      'Monitor how long it takes for transactions to complete. Use flexible aggregates like percentiles, averages, and min/max.'\n    ),\n    examples: [\n      t('When any transaction is slower than 3 seconds.'),\n      t('When the 75th percentile response time is higher than 250 milliseconds.'),\n    ],\n    illustration: diagramTransactionDuration,\n  },\n  apdex: {\n    description: t(\n      'Apdex is a metric used to track and measure user satisfaction based on your application response times. The Apdex score provides the ratio of satisfactory, tolerable, and frustrated requests in a specific transaction or endpoint.'\n    ),\n    examples: [t('When apdex is below 300.')],\n    docsLink: 'https://docs.sentry.io/product/performance/metrics/#apdex',\n    illustration: diagramApdex,\n  },\n  failure_rate: {\n    description: t(\n      'Failure rate is the percentage of unsuccessful transactions. Sentry treats transactions with a status other than “ok,” “canceled,” and “unknown” as failures.'\n    ),\n    examples: [t('When the failure rate for an important endpoint reaches 10%.')],\n    docsLink: 'https://docs.sentry.io/product/performance/metrics/#failure-rate',\n    illustration: diagramFailureRate,\n  },\n  lcp: {\n    description: t(\n      'Largest Contentful Paint (LCP) measures loading performance. It marks the point when the largest image or text block is visible within the viewport. A fast LCP helps reassure the user that the page is useful, and so we recommend an LCP of less than 2.5 seconds.'\n    ),\n    examples: [\n      t('When the 75th percentile LCP of your homepage is longer than 2.5 seconds.'),\n    ],\n    docsLink: 'https://docs.sentry.io/product/performance/web-vitals',\n    illustration: diagramLCP,\n  },\n  fid: {\n    description: t(\n      'First Input Delay (FID) measures interactivity as the response time when the user tries to interact with the viewport. A low FID helps ensure that a page is useful, and we recommend a FID of less than 100 milliseconds.'\n    ),\n    examples: [t('When the average FID of a page is longer than 4 seconds.')],\n    docsLink: 'https://docs.sentry.io/product/performance/web-vitals',\n    illustration: diagramFID,\n  },\n  cls: {\n    description: t(\n      'Cumulative Layout Shift (CLS) measures visual stability by quantifying unexpected layout shifts that occur during the entire lifespan of the page. A CLS of less than 0.1 is a good user experience, while anything greater than 0.25 is poor.'\n    ),\n    examples: [t('When the CLS of a page is more than 0.5.')],\n    docsLink: 'https://docs.sentry.io/product/performance/web-vitals',\n    illustration: diagramCLS,\n  },\n  custom: {\n    description: t(\n      'Alert on metrics which are not listed above, such as first paint (FP), first contentful paint (FCP), and time to first byte (TTFB).'\n    ),\n    examples: [\n      t('When the 95th percentile FP of a page is longer than 250 milliseconds.'),\n      t('When the average TTFB of a page is longer than 600 millliseconds.'),\n    ],\n    illustration: diagramCustom,\n  },\n};\n\nexport type WizardRuleTemplate = {\n  aggregate: string;\n  dataset: Dataset;\n  eventTypes: EventTypes;\n};\n\nexport const AlertWizardRuleTemplates: Record<\n  Exclude<AlertType, 'issues'>,\n  WizardRuleTemplate\n> = {\n  num_errors: {\n    aggregate: 'count()',\n    dataset: Dataset.ERRORS,\n    eventTypes: EventTypes.ERROR,\n  },\n  users_experiencing_errors: {\n    aggregate: 'count_unique(tags[sentry:user])',\n    dataset: Dataset.ERRORS,\n    eventTypes: EventTypes.ERROR,\n  },\n  throughput: {\n    aggregate: 'count()',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  trans_duration: {\n    aggregate: 'p95(transaction.duration)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  apdex: {\n    aggregate: 'apdex(300)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  failure_rate: {\n    aggregate: 'failure_rate()',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  lcp: {\n    aggregate: 'p95(measurements.lcp)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  fid: {\n    aggregate: 'p95(measurements.fid)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  cls: {\n    aggregate: 'p95(measurements.cls)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  custom: {\n    aggregate: 'p95(measurements.fp)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n};\n\nexport const hidePrimarySelectorSet = new Set<AlertType>([\n  'num_errors',\n  'users_experiencing_errors',\n  'throughput',\n  'apdex',\n  'failure_rate',\n]);\n\nexport const hideParameterSelectorSet = new Set<AlertType>([\n  'trans_duration',\n  'lcp',\n  'fid',\n  'cls',\n]);\n\nexport function getFunctionHelpText(\n  alertType: AlertType\n): {labelText: string; timeWindowText?: string} {\n  const timeWindowText = t('over');\n  if (alertType === 'apdex') {\n    return {\n      labelText: t('Select apdex value and time interval'),\n      timeWindowText,\n    };\n  } else if (hidePrimarySelectorSet.has(alertType)) {\n    return {\n      labelText: t('Select time interval'),\n    };\n  } else {\n    return {\n      labelText: t('Select function and time interval'),\n      timeWindowText,\n    };\n  }\n}\n","module.exports = __webpack_public_path__ + \"spot/alerts-wizard-apdex.2d7b90.svg\";","module.exports = __webpack_public_path__ + \"spot/alerts-wizard-cls.cf220f.svg\";","module.exports = __webpack_public_path__ + \"spot/alerts-wizard-custom.e7e18f.svg\";","module.exports = __webpack_public_path__ + \"spot/alerts-wizard-errors.53d97e.svg\";","module.exports = __webpack_public_path__ + \"spot/alerts-wizard-failure-rate.550a98.svg\";","module.exports = __webpack_public_path__ + \"spot/alerts-wizard-fid.f583e0.svg\";","module.exports = __webpack_public_path__ + \"spot/alerts-wizard-issues.022643.svg\";","module.exports = __webpack_public_path__ + \"spot/alerts-wizard-lcp.7fba13.svg\";","module.exports = __webpack_public_path__ + \"spot/alerts-wizard-throughput.bde641.svg\";","module.exports = __webpack_public_path__ + \"spot/alerts-wizard-transaction-duration.bc8485.svg\";","module.exports = __webpack_public_path__ + \"spot/alerts-wizard-users-experiencing-errors.4c0ae6.svg\";"],"sourceRoot":""}