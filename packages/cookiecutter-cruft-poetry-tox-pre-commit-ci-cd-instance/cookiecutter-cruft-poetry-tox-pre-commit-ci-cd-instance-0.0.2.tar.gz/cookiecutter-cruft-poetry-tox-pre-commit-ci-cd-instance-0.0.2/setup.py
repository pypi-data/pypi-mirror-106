# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['cookiecutter_cruft_poetry_tox_pre_commit_ci_cd_instance']

package_data = \
{'': ['*']}

install_requires = \
['icontract>=2.5.1,<3.0.0',
 'importlib-metadata>=2.1.1,<3.0.0',
 'jupyter>=1.0.0,<2.0.0',
 'matplotlib>=3.4.2,<4.0.0',
 'python-dotenv>=0.15.0,<0.16.0',
 'sentry-sdk>=1.1.0,<2.0.0',
 'structlog-sentry-logger>=0.7.3,<0.8.0',
 'typeguard>=2.10.0,<3.0.0',
 'typer[all]>=0.3.2,<0.4.0']

extras_require = \
{'docs': ['myst-parser>=0.14.0,<0.15.0',
          'pygments>=2.8.1,<3.0.0',
          'sphinx>=3.5.3,<4.0.0',
          'sphinx-autodoc-typehints>=1.12.0,<2.0.0',
          'sphinx-icontract==2.0.2',
          'sphinx-rtd-theme>=0.5.1,<0.6.0',
          'sphinxcontrib-apidoc>=0.3.0,<0.4.0',
          'sphinxcontrib-confluencebuilder>=1.3.0,<2.0.0',
          'typer-cli>=0.0.11,<0.0.12']}

entry_points = \
{'console_scripts': ['cookiecutter-cruft-poetry-tox-pre-commit-ci-cd-instance '
                     '= '
                     'cookiecutter_cruft_poetry_tox_pre_commit_ci_cd_instance.main:app']}

setup_kwargs = {
    'name': 'cookiecutter-cruft-poetry-tox-pre-commit-ci-cd-instance',
    'version': '0.0.2',
    'description': 'Cookiecutter Cruft Poetry Tox Pre Commit Ci Cd Instance',
    'long_description': "cookiecutter-cruft-poetry-tox-pre-commit-ci-cd-instance\n==============================\n![CI](https://github.com/TeoZosa/cookiecutter-cruft-poetry-tox-pre-commit-ci-cd-instance/workflows/CI/badge.svg)\n![codecov](https://codecov.io/gh/TeoZosa/cookiecutter-cruft-poetry-tox-pre-commit-ci-cd-instance/branch/master/graph/badge.svg?token=3HF21UWY82)\n![License](https://img.shields.io/github/license/TeoZosa/cookiecutter-cruft-poetry-tox-pre-commit-ci-cd-instance?style=plastic)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/cookiecutter-cruft-poetry-tox-pre-commit-ci-cd-instance?style=plastic)\n![PyPI](https://img.shields.io/pypi/v/cookiecutter-cruft-poetry-tox-pre-commit-ci-cd-instance?color=informational&style=plastic)\n[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white)](https://github.com/pre-commit/pre-commit)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![powered by semgrep](https://img.shields.io/badge/powered%20by-semgrep-1B2F3D?labelColor=lightgrey&link=https://semgrep.dev/&logo=data%3Aimage%2Fpng%3Bbase64%2CiVBORw0KGgoAAAANSUhEUgAAAA0AAAAOCAYAAAD0f5bSAAAABmJLR0QA/gD+AP+cH+QUAAAACXBIWXMAAA3XAAAN1wFCKJt4AAAAB3RJTUUH5AYMEy0l8dkqrQAAAvFJREFUKBUB5gIZ/QEAAP8BAAAAAAMG6AD9+hn/GzA//wD//wAAAAD+AAAAAgABAQDl0MEBAwbmAf36GQAAAAAAAQEC9QH//gv/Gi1GFQEC+OoAAAAAAAAAAAABAQAA//8AAAAAAAAAAAD//ggX5tO66gID9AEBFSRxAgYLzRQAAADpAAAAAP7+/gDl0cMPAAAA+wAAAPkbLz39AgICAAAAAAAAAAAs+vU12AEbLz4bAAAA5P8AAAAA//4A5NDDEwEBAO///wABAQEAAP//ABwcMD7hAQEBAAAAAAAAAAAaAgAAAOAAAAAAAQEBAOXRwxUAAADw//8AAgAAAAD//wAAAAAA5OXRwhcAAQEAAAAAAAAAAOICAAAABP3+/gDjzsAT//8A7gAAAAEAAAD+AAAA/wAAAAAAAAAA//8A7ePOwA/+/v4AAAAABAIAAAAAAAAAAAAAAO8AAAABAAAAAAAAAAIAAAABAAAAAAAAAAgAAAD/AAAA8wAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAA8AAAAEAAAA/gAAAP8AAAADAAAA/gAAAP8AAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAA7wAAAPsAAAARAAAABAAAAP4AAAAAAAAAAgAAABYAAAAAAAAAAAIAAAD8AwICAB0yQP78/v4GAAAA/wAAAPAAAAD9AAAA/wAAAPr9//8aHTJA6AICAgAAAAD8AgAAADIAAAAAAP//AB4wPvgAAAARAQEA/gEBAP4BAQABAAAAGB0vPeIA//8AAAAAAAAAABAC+vUz1QAAAA8AAAAAAwMDABwwPu3//wAe//8AAv//ABAcMD7lAwMDAAAAAAAAAAAG+vU0+QEBAvUB//4L/xotRhUBAvjqAAAAAAAAAAAAAQEAAP//AAAAAAAAAAAA//4IF+bTuuoCA/QBAQAA/wEAAAAAAwboAP36Gf8bMD//AP//AAAAAP4AAAACAAEBAOXQwQEDBuYB/foZAAAAAAD4I6qbK3+1zQAAAABJRU5ErkJggg==)](https://semgrep.dev/)\n\n\n---\n\n**Documentation**: [https://cookiecutter-cruft-poetry-tox-pre-commit-ci-cd-instance.readthedocs.io](https://cookiecutter-cruft-poetry-tox-pre-commit-ci-cd-instance.readthedocs.io)\n\n**Source Code**: [https://github.com/TeoZosa/cookiecutter-cruft-poetry-tox-pre-commit-ci-cd-instance](https://github.com/TeoZosa/cookiecutter-cruft-poetry-tox-pre-commit-ci-cd-instance)\n\n---\n\nOverview\n--------\n- TODO\n\nFeatures\n--------\n- TODO\n\nRequirements\n------------\n- TODO\n\n------------\n\nTable of Contents\n\n<!-- toc -->\n\n- [Installation](#installation)\n- [Usage](#usage)\n  * [Running The Notebook](#running-the-notebook)\n    + [1. Docker Container Jupyter Environment (recommended)](#1-docker-container-jupyter-environment-recommended)\n    + [2. Locally via Poetry (development workflow)](#2-locally-via-poetry-development-workflow)\n- [Development](#development)\n  * [Package and Dependencies Installation](#package-and-dependencies-installation)\n  * [Docker Container Image Building/Deployment Orchestration](#docker-container-image-buildingdeployment-orchestration)\n  * [Testing](#testing)\n  * [Code Quality](#code-quality)\n    + [Automate via Git Pre-Commit Hooks](#automate-via-git-pre-commit-hooks)\n  * [Documentation](#documentation)\n- [Summary](#summary)\n- [Further Reading](#further-reading)\n- [Legal](#legal)\n  * [License](#license)\n  * [Credits](#credits)\n\n<!-- tocstop -->\n\nInstallation\n============\nYou can install Cookiecutter Cruft Poetry Tox Pre Commit Ci Cd Instance via [pip](https://pip.pypa.io/):\n ```shell script\npip install cookiecutter-cruft-poetry-tox-pre-commit-ci-cd-instance\n```\n\nUsage\n=====\n- TODO\n    - High-level usage overview\n------------\n- TODO\n    - Step 0 description\n```python\nimport cookiecutter_cruft_poetry_tox_pre_commit_ci_cd_instance\n\n# TODO\n```\n\n> 📝 **Note**  \n>  All following commands are relative to the project root directory and assume\n> `make` is installed.\n\n\n\nRunning The Notebook\n--------------------\nTo facilitate your interacting with notebooks with the minimal amount of\nfriction, here are two suggested options, in order of simplicity:\n### 1. Docker Container Jupyter Environment (recommended)\n\nRun:\n```shell script\n# Uncomment below to run with corresponding options.\n#export PORT=8888 # default value; change this value if you need to run the container on a different port\n# Note: *any* value other than `false` will trigger an option\n#export IS_INTERACTIVE_SESSION=true\n#export BIND_MOUNT_APPLICATION_DIR_ON_CONTAINER=true\nmake deploy-jupyter-docker-container\n```\n\nwhich will fetch and run the project container image\nthat launches a Jupyter notebook environment preloaded with all the production\ndependencies on `127.0.0.1:8888`.\n\nYou can then navigate to the Jupyter notebook URL displayed on your console.\n\n> 🔥 **Tip**  \n>  If you prefer to build and run the container locally, run:\n>  ```shell script\n>  make deploy-jupyter-docker-container-local\n>  ```\n\n### 2. Locally via Poetry (development workflow)\n\nRun:\n ```shell script\nmake provision-environment # Note: installs ALL dependencies!\npoetry shell # Activate the project's virtual environment\njupyter notebook # Launch the Jupyter server\n```\n\nDevelopment\n===========\n\n> 📝 **Note**  \n>  For convenience, many of the below processes are abstracted away\n>  and encapsulated in single [Make](https://www.gnu.org/software/make/) targets.\n\n\n> 🔥 **Tip**  \n>  Invoking `make` without any arguments will display\n>  auto-generated documentation on available commands.\n\nPackage and Dependencies Installation\n--------------------------------------\n\nMake sure you have Python 3.6+ and [`poetry`](https://python-poetry.org/)\ninstalled and configured.\n\nTo install the package and all dev dependencies, run:\n```shell script\nmake provision-environment\n```\n\n> 🔥 **Tip**  \n>  Invoking the above without `poetry` installed will emit a\n>  helpful error message letting you know how you can install poetry.\n\nDocker Container Image Building/Deployment Orchestration\n--------------------------------------------------------\n\nThe following set of `make` targets orchestrate the project's container image\nbuild and deploy steps:\n\n```shell\nbuild-container     Build cookiecutter-cruft-poetry-tox-pre-commit-ci-cd-instance container\ndeploy-jupyter-docker-container Deploy downloaded dockerized jupyter environment with preloaded dependencies\ndeploy-jupyter-docker-container-local Deploy locally-built dockerized jupyter environment with preloaded dependencies\npull-container      Pull cookiecutter-cruft-poetry-tox-pre-commit-ci-cd-instance container\npush-container      Push cookiecutter-cruft-poetry-tox-pre-commit-ci-cd-instance container\nstop-container      Stop container forcefully (i.e., when keyboard interrupts are disabled)\n```\n\nNote that the project's container image is insulated from the implementation\ndetails of the application's top-level setup and execution logic which falls\nunder the purview of the project's entrypoint script. As such, Dockerfile\nmodifications will generally only be necessary when updating non-Python\nenvironment dependencies (Python dependency updates are automatically reflected\nin new image builds via the `pyproject.toml` and `poetry.lock` files).\n\nTesting\n------------\n\nWe use [`tox`](https://tox.readthedocs.io/en/latest/) for our test automation framework\nand [`pytest`](https://pytest.readthedocs.io/) for our testing framework.\n\nTo invoke the tests, run:\n\n```shell script\nmake test\n```\n\nRun [mutation tests](https://opensource.com/article/20/7/mutmut-python) to validate test suite robustness (Optional):\n\n```shell script\nmake test-mutations\n```\n\n> 📝 **Note**  \n>  Test time scales with the complexity of the codebase. Results are cached\n>  in `.mutmut-cache`, so once you get past the initial [cold start problem](https://en.wikipedia.org/wiki/Cold_start_(recommender_systems)),\n>  subsequent mutation test runs will be much faster; new mutations will only\n>  be applied to modified code paths.\n\nCode Quality\n------------\n\nWe are using [`pre-commit`](https://pre-commit.com/) for our code quality\nstatic analysis automation and management framework.\n\nTo invoke the analyses and auto-formatting over all version-controlled files, run:\n\n```shell script\nmake lint\n```\n\n> 🚨 **Danger**  \n>  CI will fail if either testing or code quality fail,\n>  so it is recommended to automatically run the above locally\n>  prior to every commit that is pushed.\n\n### Automate via Git Pre-Commit Hooks\n\nTo automatically run code quality validation on every commit (over to-be-committed\nfiles), run:\n\n```shell script\nmake install-pre-commit-hooks\n```\n\n> ⚠️ Warning  \n>  This will prevent commits if any single pre-commit hook fails\n>  (unless it is allowed to fail)\n>  or a file is modified by an auto-formatting job;\n>  in the latter case, you may simply repeat the commit and it should pass.\n\nDocumentation\n--------------\n\n```shell script\nmake docs-clean docs-html\n```\n\n> 📝 **Note**  \n>  For faster feedback loops, this will attempt to automatically open the newly\n>  built documentation static HTML in your browser.\n\nSummary\n=======\n- TODO\n\nFurther Reading\n===============\n- TODO\n\n---\n\nLegal\n=====\n\nLicense\n-------\n\ncookiecutter-cruft-poetry-tox-pre-commit-ci-cd-instance is licensed under the Apache License, Version 2.0.\nSee [LICENSE](./LICENSE) for the full license text.\n\n\nCredits\n-------\n\nThis project was generated from\n[`@TeoZosa`'s](https://github.com/TeoZosa)\n[`cookiecutter-cruft-poetry-tox-pre-commit-ci-cd`](https://github.com/TeoZosa/cookiecutter-cruft-poetry-tox-pre-commit-ci-cd)\ntemplate.\n",
    'author': 'Teo Zosa',
    'author_email': 'teo@sonosim.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/TeoZosa/cookiecutter-cruft-poetry-tox-pre-commit-ci-cd-instance',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'extras_require': extras_require,
    'entry_points': entry_points,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
