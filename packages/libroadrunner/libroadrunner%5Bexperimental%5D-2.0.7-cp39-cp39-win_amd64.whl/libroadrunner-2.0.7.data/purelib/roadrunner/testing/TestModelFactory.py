# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _TestModelFactory
else:
    import _TestModelFactory

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TestModelFactory.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _TestModelFactory.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _TestModelFactory.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _TestModelFactory.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _TestModelFactory.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _TestModelFactory.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _TestModelFactory.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _TestModelFactory.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _TestModelFactory.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _TestModelFactory.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _TestModelFactory.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        return _TestModelFactory.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        return _TestModelFactory.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _TestModelFactory.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _TestModelFactory.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _TestModelFactory.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _TestModelFactory.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _TestModelFactory:
_TestModelFactory.SwigPyIterator_swigregister(SwigPyIterator)


def rrPyString_getCPPString(uni: "PyObject *") -> "std::string":
    return _TestModelFactory.rrPyString_getCPPString(uni)

def rrPyCompareString(uni: "PyObject *", str: "char const *") -> "int":
    return _TestModelFactory.rrPyCompareString(uni, str)

def rrPyString_FromString(s: "char const *") -> "PyObject *":
    return _TestModelFactory.rrPyString_FromString(s)

def rrPyString_FromStringAndSize(s: "char const *", size: "Py_ssize_t") -> "PyObject *":
    return _TestModelFactory.rrPyString_FromStringAndSize(s, size)

def rrPyString_AsString(s: "PyObject *") -> "char *":
    return _TestModelFactory.rrPyString_AsString(s)

def rrGetPyErrMessage() -> "char *":
    return _TestModelFactory.rrGetPyErrMessage()

def Variant_to_py(*args) -> "PyObject *":
    return _TestModelFactory.Variant_to_py(*args)

def Variant_from_py(py: "PyObject *") -> "Setting":
    return _TestModelFactory.Variant_from_py(py)

def dictionary_keys(dict: "rr::Dictionary const *") -> "PyObject *":
    return _TestModelFactory.dictionary_keys(dict)

def dictionary_values(dict: "rr::Dictionary const *") -> "PyObject *":
    return _TestModelFactory.dictionary_values(dict)

def dictionary_items(dict: "rr::Dictionary const *") -> "PyObject *":
    return _TestModelFactory.dictionary_items(dict)

def dictionary_getitem(dict: "rr::Dictionary const *", key: "char const *") -> "PyObject *":
    return _TestModelFactory.dictionary_getitem(dict, key)

def dictionary_setitem(dict: "rr::Dictionary *", key: "char const *", value: "PyObject *") -> "PyObject *":
    return _TestModelFactory.dictionary_setitem(dict, key, value)

def dictionary_delitem(dict: "rr::Dictionary *", key: "char const *") -> "void":
    return _TestModelFactory.dictionary_delitem(dict, key)

def dictionary_contains(dict: "rr::Dictionary const *", key: "char const *") -> "PyObject *":
    return _TestModelFactory.dictionary_contains(dict, key)

def doublematrix_to_py(mat: "ls::DoubleMatrix const *", structured_result: "bool", copy_result: "bool") -> "PyObject *":
    return _TestModelFactory.doublematrix_to_py(mat, structured_result, copy_result)

def stringvector_to_py(vec: "std::vector< std::string,std::allocator< std::string > > const &") -> "PyObject *":
    return _TestModelFactory.stringvector_to_py(vec)

def py_to_stringvector(obj: "PyObject *") -> "std::vector< std::string,std::allocator< std::string > >":
    return _TestModelFactory.py_to_stringvector(obj)

def Dictionary_from_py(py: "PyObject *") -> "rr::Dictionary *":
    return _TestModelFactory.Dictionary_from_py(py)

def pyutil_init(module: "PyObject *") -> "void":
    return _TestModelFactory.pyutil_init(module)
class TestModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def str(self) -> "std::string":
        return _TestModelFactory.TestModel_str(self)

    def modelName(self) -> "std::string":
        return _TestModelFactory.TestModel_modelName(self)
    __swig_destroy__ = _TestModelFactory.delete_TestModel

# Register TestModel in _TestModelFactory:
_TestModelFactory.TestModel_swigregister(TestModel)

class Result(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _TestModelFactory.Result_swiginit(self, _TestModelFactory.new_Result())
    __swig_destroy__ = _TestModelFactory.delete_Result

# Register Result in _TestModelFactory:
_TestModelFactory.Result_swigregister(Result)

class TimeSeriesResult(Result):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def timeSeriesResult(self) -> "ls::DoubleMatrix":
        return _TestModelFactory.TimeSeriesResult_timeSeriesResult(self)

    def timeSeriesSettings(self) -> "std::unordered_map< std::string,rr::Setting,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,rr::Setting > > >":
        return _TestModelFactory.TimeSeriesResult_timeSeriesSettings(self)
    __swig_destroy__ = _TestModelFactory.delete_TimeSeriesResult

# Register TimeSeriesResult in _TestModelFactory:
_TestModelFactory.TimeSeriesResult_swigregister(TimeSeriesResult)

class SteadyStateResult(Result):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def steadyState(self) -> "StringDoubleMap":
        return _TestModelFactory.SteadyStateResult_steadyState(self)

    def steadyStateSettings(self) -> "std::unordered_map< std::string,rr::Setting,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,rr::Setting > > >":
        return _TestModelFactory.SteadyStateResult_steadyStateSettings(self)
    __swig_destroy__ = _TestModelFactory.delete_SteadyStateResult

# Register SteadyStateResult in _TestModelFactory:
_TestModelFactory.SteadyStateResult_swigregister(SteadyStateResult)

class SteadyStateMultiStart(Result):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def steadyState(self) -> "VectorStringDoubleMap":
        return _TestModelFactory.SteadyStateMultiStart_steadyState(self)
    __swig_destroy__ = _TestModelFactory.delete_SteadyStateMultiStart

# Register SteadyStateMultiStart in _TestModelFactory:
_TestModelFactory.SteadyStateMultiStart_swigregister(SteadyStateMultiStart)

class JacobianResult(Result):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def fullJacobianAmt(self) -> "ls::DoubleMatrix":
        return _TestModelFactory.JacobianResult_fullJacobianAmt(self)

    def fullJacobianConc(self) -> "ls::DoubleMatrix":
        return _TestModelFactory.JacobianResult_fullJacobianConc(self)

    def reducedJacobianAmt(self) -> "ls::DoubleMatrix":
        return _TestModelFactory.JacobianResult_reducedJacobianAmt(self)

    def reducedJacobianConc(self) -> "ls::DoubleMatrix":
        return _TestModelFactory.JacobianResult_reducedJacobianConc(self)

    def jacobianSettings(self) -> "std::unordered_map< std::string,rr::Setting,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,rr::Setting > > >":
        return _TestModelFactory.JacobianResult_jacobianSettings(self)
    __swig_destroy__ = _TestModelFactory.delete_JacobianResult

# Register JacobianResult in _TestModelFactory:
_TestModelFactory.JacobianResult_swigregister(JacobianResult)

class SimpleFlux(TestModel, TimeSeriesResult, SteadyStateResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def str(self) -> "std::string":
        return _TestModelFactory.SimpleFlux_str(self)

    def modelName(self) -> "std::string":
        return _TestModelFactory.SimpleFlux_modelName(self)

    def timeSeriesResult(self) -> "ls::DoubleMatrix":
        return _TestModelFactory.SimpleFlux_timeSeriesResult(self)

    def steadyState(self) -> "StringDoubleMap":
        return _TestModelFactory.SimpleFlux_steadyState(self)

    def steadyStateSettings(self) -> "std::unordered_map< std::string,rr::Setting,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,rr::Setting > > >":
        return _TestModelFactory.SimpleFlux_steadyStateSettings(self)

    def timeSeriesSettings(self) -> "std::unordered_map< std::string,rr::Setting,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,rr::Setting > > >":
        return _TestModelFactory.SimpleFlux_timeSeriesSettings(self)

    def __init__(self):
        _TestModelFactory.SimpleFlux_swiginit(self, _TestModelFactory.new_SimpleFlux())
    __swig_destroy__ = _TestModelFactory.delete_SimpleFlux

# Register SimpleFlux in _TestModelFactory:
_TestModelFactory.SimpleFlux_swigregister(SimpleFlux)

class SimpleFluxManuallyReduced(TestModel, SteadyStateResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def str(self) -> "std::string":
        return _TestModelFactory.SimpleFluxManuallyReduced_str(self)

    def modelName(self) -> "std::string":
        return _TestModelFactory.SimpleFluxManuallyReduced_modelName(self)

    def steadyState(self) -> "StringDoubleMap":
        return _TestModelFactory.SimpleFluxManuallyReduced_steadyState(self)

    def steadyStateSettings(self) -> "std::unordered_map< std::string,rr::Setting,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,rr::Setting > > >":
        return _TestModelFactory.SimpleFluxManuallyReduced_steadyStateSettings(self)

    def __init__(self):
        _TestModelFactory.SimpleFluxManuallyReduced_swiginit(self, _TestModelFactory.new_SimpleFluxManuallyReduced())
    __swig_destroy__ = _TestModelFactory.delete_SimpleFluxManuallyReduced

# Register SimpleFluxManuallyReduced in _TestModelFactory:
_TestModelFactory.SimpleFluxManuallyReduced_swigregister(SimpleFluxManuallyReduced)

class OpenLinearFlux(TestModel, SteadyStateResult, TimeSeriesResult, JacobianResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def str(self) -> "std::string":
        return _TestModelFactory.OpenLinearFlux_str(self)

    def steadyState(self) -> "StringDoubleMap":
        return _TestModelFactory.OpenLinearFlux_steadyState(self)

    def timeSeriesResult(self) -> "ls::DoubleMatrix":
        return _TestModelFactory.OpenLinearFlux_timeSeriesResult(self)

    def modelName(self) -> "std::string":
        return _TestModelFactory.OpenLinearFlux_modelName(self)

    def steadyStateSettings(self) -> "std::unordered_map< std::string,rr::Setting,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,rr::Setting > > >":
        return _TestModelFactory.OpenLinearFlux_steadyStateSettings(self)

    def timeSeriesSettings(self) -> "std::unordered_map< std::string,rr::Setting,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,rr::Setting > > >":
        return _TestModelFactory.OpenLinearFlux_timeSeriesSettings(self)

    def fullJacobianAmt(self) -> "ls::DoubleMatrix":
        return _TestModelFactory.OpenLinearFlux_fullJacobianAmt(self)

    def fullJacobianConc(self) -> "ls::DoubleMatrix":
        return _TestModelFactory.OpenLinearFlux_fullJacobianConc(self)

    def reducedJacobianAmt(self) -> "ls::DoubleMatrix":
        return _TestModelFactory.OpenLinearFlux_reducedJacobianAmt(self)

    def reducedJacobianConc(self) -> "ls::DoubleMatrix":
        return _TestModelFactory.OpenLinearFlux_reducedJacobianConc(self)

    def jacobianSettings(self) -> "std::unordered_map< std::string,rr::Setting,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,rr::Setting > > >":
        return _TestModelFactory.OpenLinearFlux_jacobianSettings(self)

    def __init__(self):
        _TestModelFactory.OpenLinearFlux_swiginit(self, _TestModelFactory.new_OpenLinearFlux())
    __swig_destroy__ = _TestModelFactory.delete_OpenLinearFlux

# Register OpenLinearFlux in _TestModelFactory:
_TestModelFactory.OpenLinearFlux_swigregister(OpenLinearFlux)

class Model269(TestModel, TimeSeriesResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def str(self) -> "std::string":
        return _TestModelFactory.Model269_str(self)

    def modelName(self) -> "std::string":
        return _TestModelFactory.Model269_modelName(self)

    def timeSeriesResult(self) -> "ls::DoubleMatrix":
        return _TestModelFactory.Model269_timeSeriesResult(self)

    def timeSeriesSettings(self) -> "std::unordered_map< std::string,rr::Setting,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,rr::Setting > > >":
        return _TestModelFactory.Model269_timeSeriesSettings(self)

    def __init__(self):
        _TestModelFactory.Model269_swiginit(self, _TestModelFactory.new_Model269())
    __swig_destroy__ = _TestModelFactory.delete_Model269

# Register Model269 in _TestModelFactory:
_TestModelFactory.Model269_swigregister(Model269)

class Model28(TestModel, TimeSeriesResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def str(self) -> "std::string":
        return _TestModelFactory.Model28_str(self)

    def modelName(self) -> "std::string":
        return _TestModelFactory.Model28_modelName(self)

    def timeSeriesResult(self) -> "ls::DoubleMatrix":
        return _TestModelFactory.Model28_timeSeriesResult(self)

    def timeSeriesSettings(self) -> "std::unordered_map< std::string,rr::Setting,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,rr::Setting > > >":
        return _TestModelFactory.Model28_timeSeriesSettings(self)

    def __init__(self):
        _TestModelFactory.Model28_swiginit(self, _TestModelFactory.new_Model28())
    __swig_destroy__ = _TestModelFactory.delete_Model28

# Register Model28 in _TestModelFactory:
_TestModelFactory.Model28_swigregister(Model28)

class CeilInRateLaw(TestModel, TimeSeriesResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def str(self) -> "std::string":
        return _TestModelFactory.CeilInRateLaw_str(self)

    def modelName(self) -> "std::string":
        return _TestModelFactory.CeilInRateLaw_modelName(self)

    def timeSeriesResult(self) -> "ls::DoubleMatrix":
        return _TestModelFactory.CeilInRateLaw_timeSeriesResult(self)

    def timeSeriesSettings(self) -> "std::unordered_map< std::string,rr::Setting,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,rr::Setting > > >":
        return _TestModelFactory.CeilInRateLaw_timeSeriesSettings(self)

    def __init__(self):
        _TestModelFactory.CeilInRateLaw_swiginit(self, _TestModelFactory.new_CeilInRateLaw())
    __swig_destroy__ = _TestModelFactory.delete_CeilInRateLaw

# Register CeilInRateLaw in _TestModelFactory:
_TestModelFactory.CeilInRateLaw_swigregister(CeilInRateLaw)

class FactorialInRateLaw(TestModel, TimeSeriesResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def str(self) -> "std::string":
        return _TestModelFactory.FactorialInRateLaw_str(self)

    def modelName(self) -> "std::string":
        return _TestModelFactory.FactorialInRateLaw_modelName(self)

    def timeSeriesResult(self) -> "ls::DoubleMatrix":
        return _TestModelFactory.FactorialInRateLaw_timeSeriesResult(self)

    def timeSeriesSettings(self) -> "std::unordered_map< std::string,rr::Setting,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,rr::Setting > > >":
        return _TestModelFactory.FactorialInRateLaw_timeSeriesSettings(self)

    def __init__(self):
        _TestModelFactory.FactorialInRateLaw_swiginit(self, _TestModelFactory.new_FactorialInRateLaw())
    __swig_destroy__ = _TestModelFactory.delete_FactorialInRateLaw

# Register FactorialInRateLaw in _TestModelFactory:
_TestModelFactory.FactorialInRateLaw_swigregister(FactorialInRateLaw)

class Venkatraman2010(TestModel, SteadyStateResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def str(self) -> "std::string":
        return _TestModelFactory.Venkatraman2010_str(self)

    def modelName(self) -> "std::string":
        return _TestModelFactory.Venkatraman2010_modelName(self)

    def steadyState(self) -> "StringDoubleMap":
        return _TestModelFactory.Venkatraman2010_steadyState(self)

    def steadyStateSettings(self) -> "std::unordered_map< std::string,rr::Setting,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,rr::Setting > > >":
        return _TestModelFactory.Venkatraman2010_steadyStateSettings(self)

    def __init__(self):
        _TestModelFactory.Venkatraman2010_swiginit(self, _TestModelFactory.new_Venkatraman2010())
    __swig_destroy__ = _TestModelFactory.delete_Venkatraman2010

# Register Venkatraman2010 in _TestModelFactory:
_TestModelFactory.Venkatraman2010_swigregister(Venkatraman2010)

class Brown2004(TestModel, SteadyStateResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def str(self) -> "std::string":
        return _TestModelFactory.Brown2004_str(self)

    def modelName(self) -> "std::string":
        return _TestModelFactory.Brown2004_modelName(self)

    def steadyState(self) -> "StringDoubleMap":
        return _TestModelFactory.Brown2004_steadyState(self)

    def steadyStateSettings(self) -> "std::unordered_map< std::string,rr::Setting,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,rr::Setting > > >":
        return _TestModelFactory.Brown2004_steadyStateSettings(self)

    def __init__(self):
        _TestModelFactory.Brown2004_swiginit(self, _TestModelFactory.new_Brown2004())
    __swig_destroy__ = _TestModelFactory.delete_Brown2004

# Register Brown2004 in _TestModelFactory:
_TestModelFactory.Brown2004_swigregister(Brown2004)

class LayoutOnly(TestModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def str(self) -> "std::string":
        return _TestModelFactory.LayoutOnly_str(self)

    def modelName(self) -> "std::string":
        return _TestModelFactory.LayoutOnly_modelName(self)

    def __init__(self):
        _TestModelFactory.LayoutOnly_swiginit(self, _TestModelFactory.new_LayoutOnly())
    __swig_destroy__ = _TestModelFactory.delete_LayoutOnly

# Register LayoutOnly in _TestModelFactory:
_TestModelFactory.LayoutOnly_swigregister(LayoutOnly)


def getAvailableTestModels() -> "std::vector< std::string,std::allocator< std::string > >":
    return _TestModelFactory.getAvailableTestModels()

def TestModelFactory(modelName: "std::string const &") -> "TestModel *":
    return _TestModelFactory.TestModelFactory(modelName)

def _testDoublePair(first: "double", second: "double") -> "DoublePair *":
    return _TestModelFactory._testDoublePair(first, second)

def _testDoubleMap(first: "double", second: "double") -> "std::unordered_map< double,double,std::hash< double >,std::equal_to< double >,std::allocator< std::pair< double const,double > > > *":
    return _TestModelFactory._testDoubleMap(first, second)

def _testVariantMap() -> "std::unordered_map< std::string,rr::Setting,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,rr::Setting > > > *":
    return _TestModelFactory._testVariantMap()

def _testVariant() -> "rr::Setting *":
    return _TestModelFactory._testVariant()

def _testResultMap() -> "StringDoublePairMap":
    return _TestModelFactory._testResultMap()


