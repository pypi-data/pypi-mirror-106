import os
from yamldirs.filemaker import Filemaker
import shutil
import inspect


def default_project_directory(env_root, cli_name):

    # Run after cookiecutter if cookiecutter selected.
    # cookie might no work since it may not be named cli_name

    dirtree  = f"""
        {cli_name}:
            - __init__.py: |
                # - autogenerated by autocleus
            - cmd:
              - __init__.py: |
                # - autogenerated by autocleus                   
    """

    Filemaker(env_root, dirtree)


def command_template(env_root, cli_name):

    # Run after cookiecutter if cookiecutter selected.

    path = f"{env_root}/{cli_name}/cmd"
    #{path}/template_cmd.py: >
    
    template  = f"""
        #!/usr/bin/env python3
        # - autogenerated by autocleus

        # import whatever you'd like here
        # autocleus has structured this as a project so you can create your own
        # libraries and include them in your cli 

        # All of this can be packaged to a wheel when you're done by autocleus with:
        # autocleus generate --concretized_cli

        # When you pip install your whl, your command is installed on your PATH and 
        # will be made available to your environment to be executed.

        description = "Add a short description of your command here"
        section = "build"   # you can group your commands into 'sections' making help printout organized
        level = "short"     # leave this as short for command subparsers

        def setup_parser(subparser):
            '''
            Setup command subparser.

            This should always take one argument, subparser, which autocleus uses
            to add your commands subparser to the main subparser controlled through
            autocleus.

            You do not need to import anything from autocleus for this function.
            '''
    
            # add arguments for your coommands here (see argparse docs for more information on add_argument method)
            subparser.add_argument('--myflag', action='store_true', help="this is an example of a flag")

            subparser.add_argument('--myargument', nargs=1, default='mydefault_value',
                help="this is an example of an argument that can take 1 value but that also has a default")
    
        
        # Add any help functions here  ...


        def template_cmd(parser, args):
            '''
            Function that gets called when you run command.
    
            This should always take two arguments which are placeholders
            for autocleus to setup the full command line parser with 
            your command loaded.
            '''

            # can name this variable whatever you like but need to call parser.parser_args() 
            # to pull in the command line options parsed through autocleus to your function
            parsed_opts = parser.parse_args()

            if parsed_opts.myflag:
                print("My flag is true - I'm going to do something!")
                # run your own function/tasks here
            
            if parsed_opts.myargument == 'mydefault_value':
                exit("Don't just except the default...")
            
            else:
                print('We can do something with this!')
                # run your own functions or tasks here with the input value for 'myargument'
                 
    """
    with open(f"{path}/template_cmd.py", 'w') as f:
        f.write(inspect.cleandoc(template))
    #Filemaker(path, template)


def dev_cliexe(env_root, cli_name, short_description):
    path = f"{env_root}/bin"

    cliexe = f"""
        #!/usr/bin/env python

        import os
        import sys
        sys.path.append(os.path.realpath(".."))
        import autocleus.climaker.components as acc


        if __name__ == "__main__":
            custom_cli = acc.CLImaker('{cli_name}.cmd', '{short_description}')
            sys.exit(custom_cli.entrypoint())
    """
    with open(f"{path}/{cli_name}", 'w') as f:
        f.write(inspect.cleandoc(cliexe))
    os.chmod(f"{path}/{cli_name}", 0o755)


# may or may not need the below depending on how setuptools.sandbox turns out
# put those functions here as well.

#autocleus.default_project_directory()
#autocleus.dev_cliexe()

#def pkged_cliexe(cli_name):

#def package_file(cli_name)